[{"/Users/jamiewalton/Desktop/Classification_v3/src/index.js":"1","/Users/jamiewalton/Desktop/Classification_v3/src/App.js":"2","/Users/jamiewalton/Desktop/Classification_v3/src/reportWebVitals.js":"3","/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Register.js":"4","/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Login.js":"5","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Header.js":"6","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Annotations.js":"7","/Users/jamiewalton/Desktop/Classification_v3/src/components/common/PrivateRoute.js":"8","/Users/jamiewalton/Desktop/Classification_v3/src/store.js":"9","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/index.js":"10","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/auth.js":"11","/Users/jamiewalton/Desktop/Classification_v3/src/actions/types.js":"12","/Users/jamiewalton/Desktop/Classification_v3/src/actions/auth.js":"13","/Users/jamiewalton/Desktop/Classification_v3/src/actions/classify.js":"14","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/classify.js":"15","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/BinNote.js":"16","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/menu.js":"17","/Users/jamiewalton/Desktop/Classification_v3/src/actions/menu.js":"18","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Plankton.js":"19","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Search.js":"20","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/ClassDownload.js":"21","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/YearControl.js":"22","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/DayControl.js":"23","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/FileControl.js":"24","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/SetControl.js":"25","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/Order.js":"26","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/Bar.js":"27","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/TimeSeriesControl.js":"28","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Note.js":"29","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Analysis.js":"30","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Notebook.js":"31","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Preferences.js":"32","/Users/jamiewalton/Desktop/Classification_v3/src/actions/preferences.js":"33","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/ClassMenu.js":"34","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Landing.js":"35","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Classify.js":"36","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/PublicClassify.js":"37","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/HomeHeader.js":"38","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Tutorial.js":"39","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Learn.js":"40","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/CommunityReview.js":"41","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/CommunityFile.js":"42"},{"size":461,"mtime":1626905198221,"results":"43","hashOfConfig":"44"},{"size":2914,"mtime":1652829356371,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":1626233027000,"results":"46","hashOfConfig":"44"},{"size":9989,"mtime":1652927004358,"results":"47","hashOfConfig":"44"},{"size":4492,"mtime":1652925098309,"results":"48","hashOfConfig":"44"},{"size":6248,"mtime":1651358390759,"results":"49","hashOfConfig":"44"},{"size":37286,"mtime":1652988375936,"results":"50","hashOfConfig":"44"},{"size":824,"mtime":1640398801879,"results":"51","hashOfConfig":"44"},{"size":382,"mtime":1626905198223,"results":"52","hashOfConfig":"44"},{"size":195,"mtime":1642018041661,"results":"53","hashOfConfig":"44"},{"size":2889,"mtime":1651175456356,"results":"54","hashOfConfig":"44"},{"size":1811,"mtime":1652926610580,"results":"55","hashOfConfig":"44"},{"size":3326,"mtime":1652926687045,"results":"56","hashOfConfig":"44"},{"size":5215,"mtime":1652720766798,"results":"57","hashOfConfig":"44"},{"size":2302,"mtime":1642020074842,"results":"58","hashOfConfig":"44"},{"size":4622,"mtime":1640369848297,"results":"59","hashOfConfig":"44"},{"size":5957,"mtime":1652889785257,"results":"60","hashOfConfig":"44"},{"size":1500,"mtime":1652889715418,"results":"61","hashOfConfig":"44"},{"size":4703,"mtime":1652988447997,"results":"62","hashOfConfig":"44"},{"size":10445,"mtime":1651175456335,"results":"63","hashOfConfig":"44"},{"size":11279,"mtime":1651175456333,"results":"64","hashOfConfig":"44"},{"size":1214,"mtime":1640371109945,"results":"65","hashOfConfig":"44"},{"size":1217,"mtime":1640371067362,"results":"66","hashOfConfig":"44"},{"size":1352,"mtime":1640371073356,"results":"67","hashOfConfig":"44"},{"size":1231,"mtime":1640371091504,"results":"68","hashOfConfig":"44"},{"size":519,"mtime":1641361919852,"results":"69","hashOfConfig":"70"},{"size":776,"mtime":1646115016367,"results":"71","hashOfConfig":"44"},{"size":1313,"mtime":1640371101364,"results":"72","hashOfConfig":"44"},{"size":3705,"mtime":1640398940475,"results":"73","hashOfConfig":"44"},{"size":4317,"mtime":1651438459838,"results":"74","hashOfConfig":"44"},{"size":14309,"mtime":1651175456334,"results":"75","hashOfConfig":"44"},{"size":11742,"mtime":1642356203869,"results":"76","hashOfConfig":"44"},{"size":2345,"mtime":1642312368178,"results":"77","hashOfConfig":"44"},{"size":5263,"mtime":1652906548829,"results":"78","hashOfConfig":"44"},{"size":7344,"mtime":1652916935601,"results":"79","hashOfConfig":"44"},{"size":734,"mtime":1651175456327,"results":"80","hashOfConfig":"44"},{"size":29127,"mtime":1652987505992,"results":"81","hashOfConfig":"44"},{"size":4491,"mtime":1651175456336,"results":"82","hashOfConfig":"44"},{"size":5263,"mtime":1652907610142,"results":"83","hashOfConfig":"44"},{"size":3709,"mtime":1651458181869,"results":"84","hashOfConfig":"44"},{"size":8554,"mtime":1652902566646,"results":"85","hashOfConfig":"44"},{"size":15803,"mtime":1652902973481,"results":"86","hashOfConfig":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"q77g26",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"89"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"89"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"89"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"89"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"89"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k6rdz1",{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"89"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"89"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"89"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"89"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"89"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"89"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"89"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"89"},"/Users/jamiewalton/Desktop/Classification_v3/src/index.js",[],["186","187"],"/Users/jamiewalton/Desktop/Classification_v3/src/App.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reportWebVitals.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Register.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Login.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Header.js",["188"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link,  Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { logout } from \"../../actions/auth\";\nimport { goto_home, goto_learn, goto_register, goto_login, goto_classify, goto_notebook, goto_analysis } from \"../../actions/menu\";\n\nexport class Header extends Component {\n    static propTypes = {\n        auth: PropTypes.object.isRequired,\n        logout: PropTypes.func.isRequired,\n        location: PropTypes.object.isRequired,\n        goto_home: PropTypes.func.isRequired,\n        goto_learn: PropTypes.func.isRequired,\n        goto_register: PropTypes.func.isRequired,\n        goto_login: PropTypes.func.isRequired,\n        goto_classify: PropTypes.func.isRequired,\n        goto_notebook: PropTypes.func.isRequired,\n        goto_analysis: PropTypes.func.isRequired,\n    };\n\n    render() {\n        const { isAuthenticated, user } = this.props.auth;\n        var pathname;\n        {this.props.location ? pathname = this.props.location.pathname : pathname = null}\n\n        if(this.props.onClassify) {\n            return <Redirect to=\"/classify\" />\n        } else if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook/\" />\n        } else if(this.props.onAnalysis) {\n            return <Redirect to=\"/analysis\" />\n        } else if(this.props.onLearn) {\n            return <Redirect to=\"/learn\" />\n        }\n        var authLinks = (\n            <ul className=\"logoutbar\">\n                <span className='nav-hello'>\n                    <strong className='nav-hello'>\n                        { user ? `Welcome, ${user.username}` : \"\" }\n                    </strong>\n                </span>\n                <div className=\"login-navbar\">\n                    <li>\n                        <button  \n                            onClick={this.props.goto_home}\n                            className=\"login-nav-link\">\n                                Home\n                        </button>\n                    </li>\n                    <li>\n                        <button  \n                            onClick={this.props.goto_learn}\n                            className=\"login-nav-link\">\n                                Learn\n                        </button>\n                    </li>\n                    <li>\n                        <button  \n                            onClick={this.props.goto_classify}\n                            className=\"login-nav-link\">\n                                Classify\n                        </button>\n                    </li>\n                </div>\n                <li className=\"nav-item\">\n                    <button \n                        onClick={this.props.logout} \n                        to=\"/login\" \n                        className=\"logout\">Logout</button>\n                </li>\n            </ul>\n        );\n\n        if(this.props.user !== null) {\n            if(this.props.user.groups[0] === 1) {\n                authLinks = (\n                    <ul className=\"logoutbar\">\n                        <span className='nav-hello'>\n                            <strong className='nav-hello'>\n                                { user ? `Welcome, ${user.username}` : \"\" }\n                            </strong>\n                        </span>\n                        <div className=\"login-navbar\">\n                            <li>\n                                <button \n                                    onClick={this.props.goto_classify}\n                                    className=\"login-nav-link\">\n                                        Classify\n                                </button>\n                            </li>\n                            <li>\n                                <button  \n                                    onClick={this.props.goto_notebook}\n                                    className=\"login-nav-link\">\n                                        Notebook\n                                </button>\n                            </li>\n                            <li>\n                                <button  \n                                    onClick={this.props.goto_analysis}\n                                    className=\"login-nav-link\">\n                                        Analysis\n                                </button>\n                            </li>\n                            <li>\n                                <a  \n                                    href=\"http://odontella.oceandatacenter.ucsc.edu:8000/admin/\"\n                                    className=\"login-nav-link\">\n                                        Admin\n                                </a>\n                            </li>\n                        </div>\n                        <li className=\"nav-item\">\n                            <button \n                                onClick={this.props.logout} \n                                to=\"/login\" \n                                className=\"logout\">Logout</button>\n                        </li>\n                    </ul>\n                );\n            } \n        }\n\n        const guestLinks = (\n            <ul className=\"navbar\">\n                <li className=\"nav-item\">\n                    <Link to=\"/register\" className=\"nav-link\" onClick={this.props.goto_register}>Register</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link to=\"/login\" className=\"nav-link\" onClick={this.props.goto_login}>Login</Link>\n                </li>\n            </ul>\n        );\n        \n        return (\n            <header className={(pathname === '/' || pathname === '/learn') ? 'home-header' : 'general-header'}>\n                <button  \n                    onClick={this.props.goto_home}\n                    className=\"h3\">\n                        IFCB Classification\n                </button>\n                { isAuthenticated ? authLinks : guestLinks }\n            </header>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    user: state.auth.user,\n    onHome: state.menu.onHome,\n});\n\nexport default connect(mapStateToProps, { logout, goto_home, goto_learn, goto_register, goto_login, goto_classify, goto_notebook, goto_analysis })(Header);","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Annotations.js",["189"],"/Users/jamiewalton/Desktop/Classification_v3/src/components/common/PrivateRoute.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/store.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/index.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/auth.js",["190","191","192"],"import {\n    USER_LOADED,\n    USER_LOADING,\n    PREFERENCES_LOADED,\n    PREFERENCES_ERROR,\n    LOCATION_SAVED,\n    AUTH_ERROR,\n    LOGIN_ATTEMPT,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n} from '../actions/types';\n\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    loginFailed: false,\n    registerFailed: false,\n    isLoading: false,\n    user: null,\n    preferences: {\"id\": 0, \"user\": 0, \"sort\": \"AZ\", \"scale\": \"0.560\", \"load\": \"recent\", \"phytoguide\": true},\n    location: window.location.pathname,\n    locationCount: 1,\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            }\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload.user,\n                preferences: action.payload.preferences,\n            };\n        case PREFERENCES_LOADED:\n            return {\n                ...state,\n                preferences: action.payload\n            };\n        case LOCATION_SAVED:\n            return {\n                ...state,\n                location: action.payload\n            }\n        case LOGIN_ATTEMPT:\n            return {\n                ...state,\n                ...action.payload,\n                loginFailed: false\n            }\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n            localStorage.setItem('token', action.payload.token);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false\n            }\n        case PREFERENCES_ERROR:\n            console.log('Failed to load user preferences.');\n        case AUTH_ERROR:\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false,\n                registerFailed: true,\n            }\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false\n            }\n        case LOGIN_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false,\n                loginFailed: true,\n            }\n            \n        default:\n            return state;\n    }\n}\n\n","/Users/jamiewalton/Desktop/Classification_v3/src/actions/types.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/auth.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/classify.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/classify.js",["193"],"import {\n    SAVE_PROGRESS,\n    SAVE_SUCCESS,\n    SYNC_PROGRESS,\n    SYNC_SUCCESS,\n    SCALE_CHANGED,\n    NOTES_CHANGED,\n    NOTES_RECORDED,\n    NOTEBOOK_FILTERED,\n    REPLY_RESOLVED,\n    REPLY_OPEN,\n    TARGETS_BASIC_SEARCHED,\n    BINS_BASIC_SEARCHED\n} from '../actions/types';\n\nconst initialState = {\n    isSaving: false,\n    isSyncing: false,\n    scaleEntry: 0.560,\n    noteChangeFlag: true,\n    replyChangeFlag: false,\n    notes: [],\n    targetSearchResults: [[]],\n    binsSearchResults: [[]],\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case SAVE_PROGRESS:\n            return {\n                ...state,\n                isSaving: true\n            }\n        case SAVE_SUCCESS:\n            return {\n                ...state,\n                isSaving: false\n            }\n        case SYNC_PROGRESS:\n            return {\n                ...state,\n                isSyncing: true\n            }\n        case SYNC_SUCCESS:\n            return {\n                ...state,\n                isSyncing: false\n            }\n        case SCALE_CHANGED:\n            return {\n                ...state,\n                scaleEntry: action.payload\n            }\n        case NOTES_CHANGED:\n            return {\n                ...state,\n                noteChangeFlag: true\n            }\n        case NOTES_RECORDED:\n            return {\n                ...state,\n                noteChangeFlag: false\n            }\n        case REPLY_OPEN:\n            return {\n                ...state,\n                noteChangeFlag: true\n            }\n        case REPLY_RESOLVED:\n            return {\n                ...state,\n                noteChangeFlag: false\n            }\n        case NOTEBOOK_FILTERED:\n            return {\n                ...state,\n                notes: action.payload\n            }\n        case TARGETS_BASIC_SEARCHED:\n            return {\n                ...state,\n                targetSearchResults: ((typeof(action.payload) === Array) ? (action.payload) : ([action.payload]))\n            }\n        case BINS_BASIC_SEARCHED:\n            return {\n                ...state,\n                binsSearchResults: ((typeof(action.payload) === Array) ? (action.payload) : ([action.payload]))\n            }\n        default:\n            return state;\n    }\n}","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/BinNote.js",["194","195"],"import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport { PropTypes } from \"prop-types\";\n\nimport { addBinNote, sendNotesChange, receiveNotesChange, receiveReplyOpen } from \"../../actions/classify\";\nimport Note from \"../features/Note\";\n\nexport class BinNote extends React.Component {\n    state = {\n        entry: '',\n        parents: [],\n        notes: [],\n    }\n    \n    static propTypes = {\n        addBinNote: PropTypes.func,\n        receiveNotesChange: PropTypes.func,\n        noteChangeFlag: PropTypes.bool,\n        receiveReplyOpen: PropTypes.func,\n        replyChangeFlag: PropTypes.bool,\n        user: PropTypes.object,\n    };\n\n    getNotes() {\n        axios\n            .get('/process/note/' + this.props.timeseries + '/' + this.props.file + '/' + this.props.image + '/')\n            .then((res) => {\n                this.setState({ notes: res.data });\n            })\n            .catch((err) => console.log(err));\n    }\n\n    renderNote(note, count) {\n        if (note.parent !== null) {\n            var reply = note;\n            var iters = 0;\n            while (reply.parent !== null) {\n                var parentFunc = (element) => element.id === reply.parent;\n                var reply = this.state.notes[this.state.notes.findIndex(parentFunc)];\n                iters = iters + 1;\n            }\n            if (count!==iters) {\n                return;\n            }\n        }\n        return(\n            <div>\n                <Note\n                    note={note}\n                    user={this.props.user.username}\n                    timeseries={this.props.timeseries}\n                    ifcb={this.props.ifcb}\n                    file={this.props.file}\n                    type={this.props.type}\n                    image={this.props.image}\n                />\n                <div className=\"reply\" style={{margin: \"0 0 0 \" + String((count+1)) + \"vw\"}}>\n                {(note.replies.length !== 0) ?\n                    note.replies.map((reply) => this.renderNote(reply, count+1)) :\n                    <div></div>\n                }\n                </div>\n            </div>\n        \n        );\n    }\n\n    componentDidMount() {\n        this.getNotes();\n    }\n\n    componentDidUpdate() {\n        if(this.props.noteChangeFlag) {\n            this.props.receiveNotesChange();\n            this.getNotes();\n        }\n        if(this.props.replyChangeFlag) {\n            this.props.receiveReplyOpen();\n            this.getNotes();\n        }\n    }\n\n    onChange = e => this.setState({ entry: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addBinNote(this.props.user.username, this.state.entry, null, [], this.props.timeseries, this.props.ifcb, this.props.file, this.props.image);\n        this.props.sendNotesChange();\n        this.getNotes();\n        const noteForm = document.getElementById(\"note-form\");\n        noteForm.reset()\n    }\n    \n    render() {\n        return(\n            <div className={this.props.type + \"-notes-content\"}>\n                {(this.props.type === 'bin') ? <div className=\"refresh\" onClick={() => this.getNotes()}></div> : <div></div>}\n                <div id=\"note-container\">\n                    {this.state.notes.map((note) => this.renderNote(note, 0))}\n                </div>\n                    <div className={this.props.type + \"-note-form\"}>\n                        <form onSubmit={this.onSubmit} id=\"note-form\">\n                            <div className={this.props.type + \"-new-note\"}>\n                            <input\n                                type=\"textarea\"\n                                rows=\"10\"\n                                className={this.props.type + \"-note-input\"}\n                                name={this.props.type + \"-note-entry\"}\n                                id=\"note-entry\"\n                                onChange={this.onChange}\n                                value={this.entry}\n                            />\n                            <button type=\"submit\" className={this.props.type + \"-note-submit\"}></button>\n                            </div>\n                            {(this.state.notes === []) ? <p className=\"bin-note-label\">Add a Note</p> : <div></div>}\n                        </form>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    noteChangeFlag: state.classify.noteChangeFlag,\n    replyChangeFlag: state.classify.replyChangeFlag,\n    user: state.auth.user\n });\n\nexport default connect(mapStateToProps, {addBinNote, sendNotesChange, receiveNotesChange, receiveReplyOpen})(BinNote);","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/menu.js",["196"],"import {\n    CLASSIFY_PAGE,\n    NOTEBOOK_PAGE,\n    ANALYSIS_PAGE,\n    CLASSDOWNLOAD_PAGE,\n    SEARCH_PAGE,\n    HOME_PAGE,\n    LEARN_PAGE,\n    REGISTER_PAGE,\n    LOGIN_PAGE,\n    COMMUNITYREVIEW_PAGE,\n    COMMUNITYFILE_PAGE\n} from '../actions/types';\n\nconst initialState = {\n    onHome: false,\n    onLearn: false,\n    onRegister: false,\n    onLogin: false,\n    onClassify: false,\n    onNotebook: false,\n    onAnalysis: false,\n    onClassDownload: false,\n    onSearch: false,\n    onCommunityReview: false,\n    onCommunityFile: false,\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case HOME_PAGE:\n            return {\n                ...state,\n                onHome: true,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        case LEARN_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: true,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        case REGISTER_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: true,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        case LOGIN_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: true,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        case CLASSIFY_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: true,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        case NOTEBOOK_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: true,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        \n        case ANALYSIS_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: true,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n\n        case CLASSDOWNLOAD_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: true,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n\n        case SEARCH_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: true,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n\n        case COMMUNITYREVIEW_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: true,\n                onCommunityFile: false,\n            }\n\n        case COMMUNITYFILE_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: true,\n            }\n            \n        default:\n            return state;\n    }\n}\n\n","/Users/jamiewalton/Desktop/Classification_v3/src/actions/menu.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Plankton.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Search.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/features/ClassDownload.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/YearControl.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/DayControl.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/FileControl.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/SetControl.js",[],["197","198"],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/Order.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/Bar.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/TimeSeriesControl.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Note.js",["199","200","201","202","203"],"import React from \"react\";\nimport { connect } from 'react-redux';\nimport { PropTypes } from \"prop-types\";\n\nimport { addBinNote, deleteBinNote, flagBinNote, sendNotesChange, sendReplyOpen } from \"../../actions/classify\";\n\nclass Note extends React.Component {\n    state = {\n        entry: '',\n    }\n\n    static propTypes = {\n        addBinNote: PropTypes.func,\n        deleteBinNote: PropTypes.func,\n        sendNotesChange: PropTypes.func,\n        sendReplyOpenChange: PropTypes.func,\n        notes: PropTypes.array,\n    };\n    \n    reply(id) {\n        document.getElementById('reply-form' + id).classList.toggle('show');\n        this.props.sendReplyOpen();\n    }\n\n    delete(id) {\n        this.props.deleteBinNote(id);\n        this.props.sendNotesChange();\n    }\n\n    flag(id) {\n        this.props.flagBinNote(id);\n        this.props.sendNotesChange();\n    }\n\n    getFlagButton(isFlagged) {\n        if (isFlagged) {\n            return 'Unflag'\n        } else {\n            return 'Flag'\n        }\n    }\n\n    onChange = e => this.setState({ entry: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addBinNote(this.props.user, this.state.entry, this.props.note.id, [], this.props.timeseries, this.props.ifcb, this.props.file, this.props.image);\n        this.props.sendNotesChange();\n        const replyForm = document.getElementById(\"note-form\");\n        replyForm.reset()\n        document.getElementById('reply-form' + this.props.note.id).classList.toggle('show');\n    }\n    \n    render() {\n        const { id, author, date, entry, parent, replies, timeseries, file, image, flag } = this.props.note;\n        return (\n            <div className={this.props.type + \"-note\"} id={id}>\n                <div className={this.props.type + \"-note-header\"}>\n                    <p className=\"note-author\">{author}</p>\n                    <p className=\"note-date\">{date.slice(0,10)}</p>\n                    {(flag) ? <div className=\"flag-small\"></div> : <div></div>}\n                </div>\n                <p className={this.props.type + \"-note-entry\"}>{entry}</p>\n                {(this.props.type === 'bin') ? \n                    <button className=\"reply-button\" onClick={() => this.reply(id)}>Reply</button> :\n                    <div></div>}\n                {(author === this.props.user) ? \n                    <button className=\"reply-button\" onClick={() => this.delete(id)}>Delete</button> :\n                    <div></div>}\n                {(author === this.props.user) ? \n                    <button className=\"reply-button\" onClick={() => this.flag(id)}>{this.getFlagButton(flag)}</button> :\n                    <div></div>}\n                <div className=\"reply-form\" id={\"reply-form\" + id}>\n                        <form onSubmit={this.onSubmit} id=\"note-form\">\n                            <div className=\"new-note\">\n                            <input\n                                type=\"textarea\"\n                                rows=\"10\"\n                                className=\"note-input\"\n                                name=\"note-entry\"\n                                id=\"note-entry\"\n                                onChange={this.onChange}\n                                value={this.entry}\n                            />\n                            <button type=\"submit\" className={this.props.type + \"-note-submit\"}></button>\n                            </div>\n                        </form>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    notes: state.classify.notes,\n });\n\nexport default connect(mapStateToProps, {addBinNote, deleteBinNote, flagBinNote, sendNotesChange, sendReplyOpen})(Note);","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Analysis.js",["204"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport Header from '../layout/Header';\nimport { goto_classdownload, goto_search, goto_communityreview } from \"../../actions/menu\";\nimport '../../css/analysis-styles.css';\n\nclass AnalysisOption extends Component {\n    render() {\n        return(\n            <div className=\"analysis-option-container\">\n                <h2 className=\"analysis-option-heading\">{this.props.heading}</h2>\n                <p className=\"analysis-option-description\">{this.props.description}</p>\n                <div className=\"analysis-option-button\" onClick={this.props.handleClick}>Start</div>\n            </div>\n        );\n    }\n}\n\nclass Analysis extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            analysisOptions: [\n                {heading: 'Search', description: \"Find any image or collection of images with the help of classification filtering, file look-up, and more.\"},\n                {heading: 'Download by Class', description: \"Download a ZIP file containing all, or a desired subset of, images classified as a particular species.\"},\n                {heading: 'Analyze Community Data', description: \"Review community scientist classifications and download their datasets.\"},\n            ],\n            bin: '',\n            target: '',\n        }\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        onClassify: PropTypes.bool,\n        onNotebook: PropTypes.bool,\n        onClassDownload: PropTypes.bool,\n        onSearch: PropTypes.bool,\n        goto_classdownload: PropTypes.func,\n        goto_search: PropTypes.func,\n    }\n\n    renderAnalysisOption(option) {\n        var handleClick\n        if (option.heading === 'Search') {\n            handleClick = this.props.goto_search;\n        } else if (option.heading === 'Download by Class') {\n            handleClick = this.props.goto_classdownload;\n        } else if (option.heading === 'Analyze Community Data') {\n            handleClick = this.props.goto_communityreview;\n        }\n        return (\n            <AnalysisOption\n                key={option.heading}\n                heading={option.heading}\n                description={option.description}\n                handleClick={handleClick}\n            />\n        );\n    }\n\n    render() {\n        if(this.props.onClassify) {\n            return <Redirect to=\"/classify\" />\n        }\n\n        if(this.props.onHome) {\n            return <Redirect to=\"/\" />\n        }\n    \n        if(this.props.onLearn) {\n            return <Redirect to=\"/learn\" />\n        }\n\n        if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook/\" />\n        }\n\n        if(this.props.onClassDownload) {\n            return <Redirect to=\"/analysis/classdownload\" />\n        }\n\n        if(this.props.onSearch) {\n            return <Redirect to=\"/analysis/search\" />\n        }\n\n        if(this.props.onCommunityReview) {\n            return <Redirect to=\"/analysis/communityreview\" />\n        }\n\n        return(\n            <div>\n                <Header />\n                <title>IFCB | Analysis</title>\n                <div className='main'>\n                    <div className=\"page\">\n                        <div>\n                            <div className=\"notebook-heading\">\n                                <h1 className=\"notebook-header\">Analysis</h1>\n                            </div>\n                            <div className=\"analysis-options\">\n                                {this.state.analysisOptions.map((option) => (this.renderAnalysisOption(option)))}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    onClassify: state.menu.onClassify,\n    onHome: state.menu.onHome,\n    onLearn: state.menu.onLearn,\n    onNotebook: state.menu.onNotebook,\n    onClassDownload: state.menu.onClassDownload,\n    onSearch: state.menu.onSearch,\n    onCommunityReview: state.menu.onCommunityReview,\n });\n\nexport default connect(mapStateToProps, { goto_classdownload, goto_search, goto_communityreview })(Analysis);","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Notebook.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Preferences.js",["205","206","207","208","209"],"import React from \"react\";\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { changeScale, setLoadPreference, setScalePreference, setSortPreference, setPhytoGuidePreference } from \"../../actions/preferences\";\nimport '../../css/classify-styles.css';\n\nclass Preferences extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            recentChecked: true,\n            phytoGuideChecked: true,\n            sortChecked: {AZ: true, ZA: false, LS: false, SL: false},\n            scaleEntry: 560,\n        }\n        this.onSortChange = this.onSortChange.bind(this);\n        this.onScaleChange = this.onScaleChange.bind(this);\n        this.onLoadChange = this.onLoadChange.bind(this);\n        this.onPhytoGuideChange = this.onPhytoGuideChange.bind(this);\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        changeScale: PropTypes.func,\n        setLoadPreference: PropTypes.func,\n        setScalePreference: PropTypes.func,\n        setSortPreference: PropTypes.func,\n        setPhytoGuidePreference: PropTypes.func,\n    }\n\n    componentDidMount() {\n        switch (this.props.sort) {\n            case 'AZ':\n                this.setState({ \n                    sortChecked: {AZ: true, ZA: false, LS: false, SL: false},\n                });\n                break\n            case 'ZA':\n                this.setState({ \n                    sortChecked: {AZ: false, ZA: true, LS: false, SL: false},\n                });\n                break\n            case 'LS':\n                this.setState({ \n                    sortChecked: {AZ: false, ZA: false, LS: true, SL: false},\n                });\n                break\n            case 'SL':\n                this.setState({ \n                    sortChecked: {AZ: false, ZA: false, LS: false, SL: true},\n                });\n        }\n        this.setState({\n            recentChecked: this.props.load==='recent',\n            phytoGuideChecked: this.props.phytoGuide===true,\n            scaleEntry: this.props.scale,\n        });\n    }\n    \n    close() {\n        document.getElementById(\"overlay\").style.display = \"none\";\n        document.getElementById('preferences').classList.toggle('show-pref');\n        this.props.history.go(0);\n    }\n\n    onScaleChange(e) {\n        this.setState({ scaleEntry: e.target.value });\n        this.props.changeScale(e.target.value);\n        this.props.setScalePreference(e.target.value, this.props.user.username);\n    }\n\n    onSortChange(e) {\n        switch (e.target.value){\n            case 'AZ':\n                this.setState({ sortChecked: {AZ: true, ZA: false, LS: false, SL: false} });\n                this.props.setSortPreference({AZ: true, ZA: false, LS: false, SL: false}, this.props.user.username);\n                break\n            case 'ZA':\n                this.setState({ sortChecked: {AZ: false, ZA: true, LS: false, SL: false} });\n                this.props.setSortPreference({AZ: false, ZA: true, LS: false, SL: false}, this.props.user.username);\n                break\n            case 'LS':\n                this.setState({ sortChecked: {AZ: false, ZA: false, LS: true, SL: false} });\n                this.props.setSortPreference({AZ: false, ZA: false, LS: true, SL: false}, this.props.user.username);\n                break\n            case 'SL':\n                this.setState({ sortChecked: {AZ: false, ZA: false, LS: false, SL: true} });\n                this.props.setSortPreference({AZ: false, ZA: false, LS: false, SL: true}, this.props.user.username);\n        }\n    } \n    \n    onLoadChange(e) {\n        switch (e.target.value){\n            case 'recent':\n                this.setState({ recentChecked: true });\n                break\n            case 'edited':\n                this.setState({ recentChecked: false })\n        }\n        this.props.setLoadPreference(e.target.value, this.props.user.username);\n    }\n\n    onPhytoGuideChange(e) {\n        switch (e.target.value){\n            case 'True':\n                this.setState({ phytoGuideChecked: true });\n                break\n            case 'False':\n                this.setState({ phytoGuideChecked: false })\n        }\n        this.props.setPhytoGuidePreference(e.target.value, this.props.user.username);\n    }\n    \n    render() {\n\n        return(\n            <div className=\"preferences-window\" id=\"preferences\">\n                <div className=\"window-close\" onClick={() => this.close()}></div>\n                <h1 className=\"preferences-heading\">Preferences</h1>\n                <div className=\"preferences-container\">\n                    <div className=\"left-pref-col\">\n                        <div className=\"pref-category\">\n                            <p className=\"pref-subheading\">On Website Load</p>\n                            <div className=\"pref-form\">\n                                <div style={{'display':'flex'}}>\n                                    <input \n                                        type=\"radio\" \n                                        name=\"load\" \n                                        id=\"recent\" \n                                        className=\"pref-radio\" \n                                        value=\"recent\"\n                                        checked={this.state.recentChecked}\n                                        onChange={this.onLoadChange}\n                                    />\n                                    <label className=\"pref-radio-label\" for=\"recent\">Load most recent file</label>\n                                </div>\n                                <div style={{'display':'flex'}}>\n                                    <input \n                                        type=\"radio\" \n                                        name=\"load\" \n                                        id=\"edited\" \n                                        className=\"pref-radio\" \n                                        value=\"edited\"\n                                        checked={!this.state.recentChecked}\n                                        onChange={this.onLoadChange}\n                                    />\n                                    <label className=\"pref-radio-label\" for=\"edited\">Load last edited file</label>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"pref-category\" style={{'margin':'2vw 0 0 0'}}>\n                            <p className=\"pref-subheading\">Show PhytoGuide</p>\n                            <div className=\"pref-form\">\n                                <input \n                                    type=\"radio\" \n                                    name=\"phytoguide\" \n                                    id=\"showPhytoGuide\" \n                                    className=\"pref-radio\" \n                                    value=\"True\"\n                                    checked={this.state.phytoGuideChecked}\n                                    onChange={this.onPhytoGuideChange}\n                                />\n                                <label className=\"pref-radio-label\" for=\"recent\">Show guide</label>\n                                </div>\n                                <div style={{'display':'flex'}}>\n                                    <input \n                                        type=\"radio\" \n                                        name=\"phytoguide\" \n                                        id=\"showPhytoGuide\" \n                                        className=\"pref-radio\" \n                                        value=\"False\"\n                                        checked={!this.state.phytoGuideChecked}\n                                        onChange={this.onPhytoGuideChange}\n                                    />\n                                    <label className=\"pref-radio-label\" for=\"edited\">Do not show guide</label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"right-pref-col\">\n                        <div className=\"pref-category\">\n                            <p className=\"pref-subheading\">Sort Targets</p>\n                            <div className=\"pref-form\">\n                                <input \n                                    type=\"radio\" \n                                    name=\"sort\" \n                                    id=\"AZ\" \n                                    className=\"pref-radio\" \n                                    value=\"AZ\"\n                                    checked={this.state.sortChecked.AZ}\n                                    onChange={this.onSortChange}\n                                />\n                                <label className=\"pref-radio-label\" for=\"recent\">By class, from A to Z</label><br></br>\n                                <input \n                                    type=\"radio\" \n                                    name=\"sort\" \n                                    id=\"ZA\" \n                                    className=\"pref-radio\" \n                                    value=\"ZA\"\n                                    checked={this.state.sortChecked.ZA}\n                                    onChange={this.onSortChange} \n                                />\n                                <label className=\"pref-radio-label\" for=\"edited\">By class, from Z to A</label><br></br>\n                                <input \n                                    type=\"radio\" \n                                    name=\"sort\" \n                                    id=\"LS\" \n                                    className=\"pref-radio\" \n                                    value=\"LS\"\n                                    checked={this.state.sortChecked.LS}\n                                    onChange={this.onSortChange}\n                                />\n                                <label className=\"pref-radio-label\" for=\"edited\">By size, from largest to smallest</label><br></br>\n                                <input \n                                    type=\"radio\" \n                                    name=\"sort\" \n                                    id=\"SL\" \n                                    className=\"pref-radio\" \n                                    value=\"SL\"\n                                    checked={this.state.sortChecked.SL}\n                                    onChange={this.onSortChange}\n                                />\n                                <label className=\"pref-radio-label\" for=\"edited\">By size, from smallest to largest</label><br></br>\n                            </div>\n                        </div>\n                        <div className=\"pref-category\" style={{'margin':'2vw 0 0 0'}}>\n                            <p className=\"pref-subheading\">Image Scale</p>\n                            <div className=\"pref-form\">\n                                <input \n                                    type=\"number\" \n                                    name=\"scale\" \n                                    id=\"scale\" \n                                    value={this.state.scaleEntry}\n                                    className=\"target-jump-container scale\"\n                                    step='0.01'\n                                    onChange={this.onScaleChange}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n});\n\nexport default connect(mapStateToProps, {changeScale, setLoadPreference, setScalePreference, setSortPreference, setPhytoGuidePreference})(Preferences)","/Users/jamiewalton/Desktop/Classification_v3/src/actions/preferences.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/ClassMenu.js",["210","211","212","213"],"import React from \"react\";\nimport '../../css/classify-styles.css';\nimport correctIcon from \"../../icons/green-check.png\";\nimport incorrectIcon from \"../../icons/red-x.png\";\n\n\nclass Micrometer extends React.Component {\n    render() {\n        return(\n            <div className=\"drag-box\">\n                <div className=\"micrometer-block\"\n                style={{width: (String(34*this.props.scale) + 'vw')}}></div>\n                <p className=\"micrometer-text\">10µm</p>\n            </div>\n        );\n    }\n}\n\nclass ClassMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            indexSelected: this.props.initial,\n            indexHovered: this.props.initial,\n        }\n    }\n    \n    handleMenuClick(x, i) {\n        this.setState({ \n            indexSelected: i,\n            indexHovered: i,\n         });\n        this.props.onClick(x);\n    }\n\n    handleMouseOver(i) {\n        this.setState({ indexHovered: i });\n    }\n\n    handleMouseOut() {\n        this.setState({ indexHovered: this.state.indexSelected });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.initial !== prevProps.initial) {\n            this.setState({ \n                indexSelected: this.props.initial,\n                indexHovered: this.props.initial,\n             });\n        }\n      }\n  \n    render() {\n      const classes = this.props.categorizeMode ? this.props.categories : this.props.classes\n      const descriptions = this.props.categorizeMode ? this.props.descriptions.filter((n,i) => this.props.categoryIndices.includes(i)) : this.props.descriptions\n      const examples = this.props.categorizeMode ? this.props.examples.filter((n,i) => this.props.categoryIndices.includes(i)) : this.props.examples\n      const nonexamples = this.props.categorizeMode ? this.props.nonexamples.filter((n,i) => this.props.categoryIndices.includes(i)) : this.props.nonexamples\n      \n      const options = classes.map((x, i) => \n      <li key={x}><button id={x} className=\"classmenu-button\"\n            onClick={() => this.handleMenuClick(x, i)} \n            onMouseEnter={() => this.handleMouseOver(i)} \n            onMouseLeave={() => this.handleMouseOut(i)}>{x}</button></li>);\n\n\n      return(\n      <div className=\"sidebar\">\n      <div style={{'display':'flex'}}>\n            <div className={this.props.showPhytoGuide ? \"class-menu with-guide\" : \"class-menu\"}>\n                <div className=\"control-box\">\n                    <div className=\"annotation-control\" onClick={() =>  this.props.handleSelectAllClick()}>\n                        <p className=\"control-text\">Select All</p>\n                    </div>\n                    <div className=\"annotation-control\" onClick={() =>  this.props.handleUndoClick()}>\n                        <p className=\"control-text\">Undo</p>\n                    </div>\n                </div>\n                <ul className=\"class-menu-options\">{options}</ul>\n            </div>\n            {this.props.showPhytoGuide ? \n                    <div className=\"phyto-guide\">\n                        <p className=\"phyto-guide-heading\">{classes[this.state.indexHovered]}</p>\n                        <p className=\"phyto-guide-description\">{descriptions[this.state.indexHovered]}</p>\n                        <div className=\"yes-examples\">\n                            { (examples.length > 0) ?\n                                examples[this.state.indexHovered].map((image) => (\n                                    <div>\n                                        <img src={correctIcon} className='phyto-guide-icon'></img>\n                                        <img src={image} className=\"image\" \n                                            alt={classes[this.state.indexHovered] + ' example'}\n                                            className=\"phyto-guide-image\"\n                                            >\n                                        </img>\n                                    </div>\n                                )) : <div></div>\n                            }\n                        </div>\n                        <div className=\"no-examples\">\n                            { (nonexamples.length) > 0 ? ((nonexamples[this.state.indexHovered].length) ? <p className=\"phyto-guide-nonexample-heading\">Don't confuse with:</p> : <div></div>) : <div></div> }\n                            { (nonexamples.length) > 0 ? \n                                nonexamples[this.state.indexHovered].map((image) => (\n                                    <div>\n                                        <img src={incorrectIcon} className='phyto-guide-icon'></img>\n                                        <img src={image} className=\"image\" \n                                            alt={classes[this.state.indexHovered] + ' non-example'}\n                                            className=\"phyto-guide-image\"\n                                            >\n                                        </img>\n                                    </div>\n                                )) : <div></div>\n                            }\n                        </div>\n                    </div> : <div></div>}\n      </div>\n      <Micrometer scale={this.props.scale}/>\n      </div>\n      );\n  }\n}\n\nexport default ClassMenu","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Landing.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Classify.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/PublicClassify.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/HomeHeader.js",["214"],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Tutorial.js",["215"],"import React from \"react\";\nimport { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from \"react-dom\";\nimport akashiwo from \"../../assets/akashiwo-character.png\";\nimport \"../../css/classify-styles.css\";\n\nclass Tutorial extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toc: [\n                {id: 0, title: \"Welcome!\", text: \"Let's get started classifying phytoplankton.\", buttons: null},\n                {id: 1, title: \"Select a sample\", text: \"Each IFCB collects samples throughout the day full of phytoplankton images it captured. Right now, you’re seeing the latest sample. If you would like to load a new one, use the menu on the left to select a day and an IFCB location.\", buttons: null},\n                {id: 2, title: \"The AutoClassifier\", text: \"Each sample is run through an auto-clasification algorithm, which identifies each phytoplankton image. But the algorithm isn’t always right: that’s where you come in!\", buttons: null},\n                {id: 3, title: \"Start categorizing\", text: \"Your first task is to find the images that the AutoClassifier misidentified. Use the menu on the left to navigate to the classifications. In each one, click on the images that don’t belong, using the guide to determine what qualifies and what doesn’t.\", buttons: null},\n                {id: 4, title: \"What if you're unsure?\", text: \"If you’re ever torn on whether an image belongs or not, just leave it in its original category. But also remember that our scientists check over your classifications before using them, so you will never ruin data if you misidentify an image.\", buttons: null},\n                {id: 5, title: \"Switch modes\", text: \"When you finish all the categories, hit the 'Finished Categorizing' button so we know the file is complete. If you’re up for a challenge, switch over to identify mode using the toggle bar above the images.\", buttons: null},\n                {id: 6, title: \"Start identifying\", text: \"Now you’ll see all the images that you marked as misidentified or that the AutoClassifier couldn’t figure out in the first place. Select a classification in the left menu, then click on all the images that match it. Make sure to hit the finish button when you're done!\", buttons: null},\n                {id: 7, title: \"Try another method\", text: \"You can also work the other way: choose an image, then hover over the classifications in the left menu until you find the one that matches it. Select on the classification, then click on the image to classify it. Either method is a good way to identify phytoplankton: find which one works best for you!\", buttons: null},\n                {id: 8, title: \"What if you're unsure?\", text: \"Again, if you’re not sure where an image belongs, just leave it unclassified. If you’re finding that identify mode is too challenging, you can always stick to just categorizing.\", buttons: null},\n                {id: 9, title: 'Congrats!', text: \"You’re ready to dive in. When you finish a sample, load up a new one! You can always revisit this tutorial if you need any help.\", buttons: null},\n            ],\n            tracks: [\n                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n            ],\n            slide: 0,\n            track: 0,\n        }\n    }\n\n    back() {\n        const i = this.state.tracks[this.state.track].findIndex(slide => slide === this.state.slide);\n        const slide = this.state.tracks[this.state.track][i-1];\n        this.setState({ slide: slide });\n    }\n\n    next() {\n        const i = this.state.tracks[this.state.track].findIndex(slide => slide === this.state.slide);\n        const slide = this.state.tracks[this.state.track][i+1];\n        this.setState({ slide: slide });\n    }\n\n    handleButton(track) {\n        const prevTrack = this.state.track;\n        this.setState({ track: track });\n        const i = this.state.tracks[prevTrack].findIndex(slide => slide === this.state.slide);\n        const slide = this.state.tracks[track][i+1];\n        this.setState({ slide: slide });\n    }\n\n    render() {\n\n        const slide = this.state.toc[this.state.slide];\n\n        return (\n            <div className=\"public-time-controls\">\n                <img src={akashiwo} alt=\"Drawing of a celebratory phytoplankton\" className=\"akashiwo-character\"></img>\n                <div id={\"tutorial-1\"} className=\"visible-tutorial-text\">\n                    <p className=\"tutorial-title\">{slide.title}</p>\n                    <p className=\"tutorial-body\">{slide.text}</p>\n                    {slide.buttons ? <div className='tutorial-button-container'>{slide.buttons.map((button) => <div key={button.track} className='tutorial-button' onClick={() => this.handleButton(button.track)}>{button.text}</div>)}</div> : <div/>}\n                    <div className='tutorial-nav-container'>\n                        {this.state.slide > 0 ? <p className=\"tutorial-back\" onClick={() => this.back()}>{'< Back'}</p> : <div/>}\n                        {this.state.slide < this.state.toc.length - 1 && !slide.buttons ? <p className=\"tutorial-next\" onClick={() => this.next()}>{'Next >'}</p> : <div/>}\n                    </div>\n                </div>\n            </div>\n        );\n\n\n    }\n}\n\nexport default (Tutorial);","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Learn.js",["216","217","218","219"],"import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../layout/Header';\nimport ceratium from \"../../assets/ceratium.jpg\";\nimport ditylum from \"../../assets/ditylum-gradient.png\";\nimport chaetoceros from \"../../assets/chaetoceros-gradient.png\";\nimport lithodesmium from \"../../assets/lithodesmium-gradient.png\";\n\nexport class Landing extends Component {\n    // TODO: Make hero into img and add alt text\n    // media query smaller version when width is less than 950px\n\n    static propTypes = {\n        onHome: PropTypes.bool,\n        onClassify: PropTypes.bool,\n        onLearn: PropTypes.bool,\n        onNotebook: PropTypes.bool,\n        onAnalysis: PropTypes.bool,\n      };\n\n    render() {\n\n        if(this.props.onClassify) {\n            return <Redirect to=\"/classify\" />\n        }\n        if(this.props.onHome) {\n            return <Redirect to=\"/\" />\n        }\n        if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook/\" />\n        }\n        if(this.props.onAnalysis) {\n            return <Redirect to=\"/analysis/\" />\n        }\n\n        return (\n            <main>\n                <Header location={this.props.location} />\n                <div style={{'background-color':'#7bb224'}}>\n                    <div className='learn-hero'>\n                        <h2 className='learn-title'>Learn</h2>\n                    </div>\n                </div>\n                <div className='main'>\n                    <div className='learn-page'>\n                        <h3 className='learn-heading'>Phytoplankton</h3>\n                        <br/>\n                        <p className='learn-body'>Phytoplankton are tiny, single-celled organisms that drift with the ocean currents. Like plants, many species of phytoplankton convert sunlight to energy through photosynthesis, though some types can consume prey.</p>\n                        <h3 className='learn-heading'>IFCBs</h3>\n                        <br/>\n                        <p className='learn-body'>The phytoplankton images on this site are taken by an Imaging FlowCytobot, or IFCB. An IFCB is an automated microscope with a built-in camera. It collects a small sample of seawater, which flows through a tiny tube inside the instrument. Images of the phytoplankton cells are taken as they pass one at a time in front of the camera. <br/><br/> The IFCB is a valuable tool because it runs by itself, around the clock, for weeks at a time. The IFCB collects a seawater sample every 20 minutes, and can produce as many as 20,000 images an hour! All of the images are sent over the internet to a computer.</p>\n                        <h3 className='learn-heading'>The Lab</h3>\n                        <br/>\n                        <p className='learn-body'>In the Kudela Lab at UC Santa Cruz, we use microscopes, satellites, robots, and good old fashioned chemistry to understand phytoplankton. Phytoplankton are the unsung heroes of our planet, providing food for everything from krill to whales, and producing much of the oxygen in our atmosphere. The dynamic and ever-changing phytoplankton community is made up of thousands of different species, and we use an array of tools to examine what kinds are in the water at different times and under different conditions. This</p>\n                    </div>\n                </div>\n            </main>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    onClassify: state.menu.onClassify,\n    onHome: state.menu.onHome,\n    onNotebook: state.menu.onNotebook,\n    onAnalysis: state.menu.onAnalysis,\n });\n\n export default connect(mapStateToProps)(Landing);","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/CommunityReview.js",["220","221","222"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect, Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport Header from '../layout/Header';\nimport { Grid, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\nimport { goto_communityfile } from \"../../actions/menu\";\nimport '../../css/analysis-styles.css';\nimport '../../css/notebook-styles.css';\nimport '../../css/classify-styles.css';\nimport loader from \"../annotations/loader.GIF\";\n\n\nclass CommunityFilePreview extends Component {\n    getDate(file) {\n        const timestamp = file.slice(1,5) + '-' + file.slice(5,7) + '-' + file.slice(7,12) + ':' + \n            file.slice(12,14) + ':' + file.slice(14,16);\n        const date = new Date(timestamp);\n        const dateString = date.toDateString().slice(4,10) + ',' + date.toDateString().slice(10,);\n        \n        return dateString\n    }\n\n    handleDownload() {\n        document.getElementById('download-src').src = 'http://odontella.oceandatacenter.ucsc.edu:8000/mat/' + this.props.ifcb + '/' + this.props.file + '/'\n    }\n\n    render() {\n        var appearance = ''\n        if(this.props.categorized) {\n            appearance = 'community-file-preview-categorized';\n        } else if(this.props.identified) {\n            appearance = 'community-file-preview-identified';\n        }\n        return (\n            <div className={\"community-file-preview-container \" + appearance}>\n                <div>\n                    <p className=\"community-file-date\">{this.getDate(this.props.file)}</p>\n                    <p className=\"community-file-file\">{this.props.file}</p>\n                    <p className=\"community-file-classifier\">{this.props.classifier}</p>\n                </div>\n                <div className=\"community-file-preview-buttons\">\n                    <div className=\"round-button download community-download\" onClick={() => this.handleDownload()}>\n                        <div style={{display: 'none'}}>\n                        <iframe id=\"download-src\" />\n                        </div>\n                    </div>\n                    <div className=\"round-button right-arrow community-download\" onClick={() => this.props.onClick(this.props.timeseries, this.props.file, this.props.classifier)}></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass CommunityReview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n            selectedTimeseries: '',\n            selectedFile: '',\n            selectedUser: '',\n        }\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        onClassify: PropTypes.bool,\n        onNotebook: PropTypes.bool,\n        onAnalysis: PropTypes.bool,\n        onCommunityFile: PropTypes.bool,\n        goto_communityfile: PropTypes.func,\n    }\n\n    componentDidMount() {\n        axios\n            .get('/communityfiles/')\n            .then((res) => {\n                this.setState({ files: res.data.reverse() })\n            })\n            .catch((err) => console.log(err));\n    }\n\n    handleFileClick(timeseries, file, user) {\n        this.setState({ \n            selectedTimeseries: timeseries,\n            selectedFile: file,\n            selectedUser: user\n         });\n         this.props.goto_communityfile();\n    }\n\n    renderLegend() {\n        return(\n            <div className='community-review-legend'>\n                <div className='legend-entry'>\n                    <div className='legend-bubble identified-bubble' />\n                    <p className='legend-text'>Identification Complete</p>\n                </div>\n                <div className='legend-entry'>\n                    <div className='legend-bubble categorized-bubble' />\n                    <p className='legend-text'>Categorization Complete</p>\n                </div>\n                <div className='legend-entry'>\n                    <div className='legend-bubble incomplete-bubble' />\n                    <p className='legend-text'>Incomplete</p>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        if(this.props.onClassify) {\n            return <Redirect to=\"/classify\" />\n        }\n\n        if(this.props.onHome) {\n            return <Redirect to=\"/\" />\n        }\n    \n        if(this.props.onLearn) {\n            return <Redirect to=\"/learn\" />\n        }\n\n        if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook/\" />\n        }\n\n        if(this.props.onAnalysis) {\n            return <Redirect to=\"/analysis\" />\n        }\n\n        if(this.props.onCommunityFile) {\n            return <Redirect to={\"/analysis/communityreview/\" + this.state.selectedTimeseries + \"/\" + this.state.selectedFile + \"/\" + this.state.selectedUser} />\n        }\n\n        const cache = new CellMeasurerCache({\n            defaultHeight: 10,\n            minHeight: 10,\n            fixedWidth: true\n          });\n\n        const files = this.state.files;\n\n        const cellRenderer = ({columnIndex, key, rowIndex, parent, style}) => ( \n\n            <CellMeasurer\n                cache={cache}\n                key={key}\n                parent={parent}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n            >\n            {({ measure, registerChild }) => (\n            \n                <div ref={registerChild} key={key} style={style}>\n                    <div onLoad={measure}>\n                        {files[(rowIndex*4)+columnIndex] ?\n                            <CommunityFilePreview\n                                timeseries={files[(rowIndex*4)+columnIndex].bin.timeseries}\n                                file={files[(rowIndex*4)+columnIndex].bin.file}\n                                ifcb={files[(rowIndex*4)+columnIndex].bin.ifcb}\n                                classifier={files[(rowIndex*4)+columnIndex].classifier}\n                                categorized={files[(rowIndex*4)+columnIndex].bin.categorized}\n                                identified={files[(rowIndex*4)+columnIndex].bin.identified}\n                                onClick={() => this.handleFileClick(files[(rowIndex*4)+columnIndex].bin.timeseries, files[(rowIndex*4)+columnIndex].bin.file, files[(rowIndex*4)+columnIndex].classifier)}\n                            /> : \n                            <div/> }\n                        </div>\n                </div>\n            )}\n            </CellMeasurer>\n        )\n        \n           return(\n            <div>\n                <Header />\n                <title>IFCB | Community Review</title>\n                <div className='main'>\n                    <div className=\"page\">\n                        <div>\n                            <div className=\"notebook-heading\">\n                                <h1 className=\"notebook-header\">Analysis</h1>\n                            </div>\n                            <h2 className=\"analysis-option-heading page-heading community-review-heading\">Community Review</h2>\n                            {this.renderLegend()}\n                            <div>\n                                {this.state.files.length > 1 ?\n                                    <Grid\n                                        width={document.documentElement.clientWidth*0.8}\n                                        height={800}\n                                        columnWidth={document.documentElement.clientWidth*0.8/4}\n                                        rowHeight={document.documentElement.clientWidth*0.11}\n                                        rowCount={Math.floor(this.state.files.length/4)+1}\n                                        columnCount={4}\n                                        cellRenderer={cellRenderer}\n                                        scrollToAlignment=\"start\"\n                                        className=\"community-review-grid\"\n                                    /> :\n                                    <div/>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    onHome: state.menu.onHome,\n    onLearn: state.menu.onLearn,\n    onClassify: state.menu.onClassify,\n    onNotebook: state.menu.onClassify,\n    onAnalysis: state.menu.onAnalysis,\n    onCommunityFile: state.menu.onCommunityFile,\n });\n\nexport default connect(mapStateToProps, { goto_communityfile })(CommunityReview);","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/CommunityFile.js",["223","224"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Header from '../layout/Header';\nimport Plankton from '../annotations/Plankton';\nimport '../../css/datepicker.css';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\nimport { List, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\nimport { goto_communityreview } from \"../../actions/menu\";\n\nimport '../../css/classify-styles.css';\nimport loader from \"../annotations/loader.GIF\";\n\nclass CommunityFilePreview extends Component {\n    getDate(file) {\n        const timestamp = file.slice(1,5) + '-' + file.slice(5,7) + '-' + file.slice(7,12) + ':' + \n            file.slice(12,14) + ':' + file.slice(14,16);\n        const date = new Date(timestamp);\n        const dateString = date.toDateString().slice(4,10) + ',' + date.toDateString().slice(10,);\n        \n        return dateString\n    }\n\n    handleDownload() {\n        document.getElementById('download-src').src = 'http://odontella.oceandatacenter.ucsc.edu:8000/mat/' + this.props.ifcb + '/' + this.props.file + '/'\n    }\n\n    render() {\n        var appearance = ''\n        var status = 'This file is incomplete.'\n        if(this.props.categorized) {\n            appearance = 'community-file-preview-categorized';\n            status = 'This file is fully categorized, but not fully identified.';\n        } else if(this.props.identified) {\n            appearance = 'community-file-preview-identified';\n            status = 'This file is fully categorized and identified.';\n        }\n        return (\n            <div className=\"community-file-info-container\">\n                <div className={\"community-file-preview-container community-file-info \" + appearance}>\n                    <div>\n                        <p className=\"community-file-date community-file-heading\">{this.getDate(this.props.file)}</p>\n                        <p className=\"community-file-file\">{this.props.file}</p>\n                        <p className=\"community-file-classifier\">{this.props.classifier}</p>\n                    </div>\n                    <div className=\"community-file-preview-buttons\">\n                        <div className=\"round-button download community-download\" onClick={() => this.handleDownload()}>\n                            <div style={{display: 'none'}}>\n                            <iframe id=\"download-src\" />\n                            </div>\n                        </div>\n                        <div className=\"round-button right-arrow community-download flip-right-arrow\" onClick={() => this.props.onClick()}></div>\n                    </div>\n                </div>\n                <div className=\"community-file-status-container\">\n                    <p className={\"community-file-status \" + appearance + '-text'}>{status}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass CommunityFile extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          loading: true,\n          newFile: '',\n          newTimeSeries: '',\n          planktonClickEnabled: true,\n          infoShowing: [],\n          bin: {timeseries:'', ifcb:'', year:'', day:'', file:''},\n          user: '',\n          targets: [],\n          targetNumbers: [],\n          rows: [],\n          scrollToIndex: undefined,\n          jumpEntry: '',\n          jumpSubmit: '',\n          initialTargetJump: '',\n          lastEditBin: '',\n          lastEditTarget: '',\n          lastScroll: 0,\n          categorized: false,\n          identified: false,\n      }\n  }\n\n  static propTypes = {\n    preferences: PropTypes.object,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    changeScale: PropTypes.func,\n    save: PropTypes.func.isRequired,\n    isSaving: PropTypes.bool,\n    sync: PropTypes.func.isRequired,\n    isSyncing: PropTypes.bool,\n    user: PropTypes.object,\n    scaleEntry: PropTypes.number,\n    onNotebook: PropTypes.bool,\n    onAnalysis: PropTypes.bool,\n    goto_communityreview: PropTypes.func,\n  };\n\n  getNewTimeSeries(option) {\n    this.setState({ loading: true });\n\n    var k = this.state.timeSeriesOptions.findIndex(timeseries => timeseries === option);\n    const timeseries = this.state.timeSeriesNames[k];\n\n    axios\n        .get('/process/public/timeseries/' + timeseries + '/')\n        .then((res) => { this.setState({ \n            newTimeSeries: timeseries,\n            newFile: res.data.bin.file\n        }) })\n        .catch((err) => console.log(err));\n  }\n  \n\n  componentDidMount() {\n    const urlInfo = this.props.location.pathname.split('/')\n    const timeseries = urlInfo[3];\n    const file = urlInfo[4];\n    const user = urlInfo[5];\n    this.setState({ loading: true, user: user });\n\n    if (file !== undefined) {\n        axios\n            .get('/process/public/file/' + timeseries + '/' + file + '/' + user + '/')\n            .then((res) => {\n                this.setState({ \n                    bin: res.data.bin, \n                    yearOptions: res.data.options.year_options.reverse(),\n                    dayOptions: res.data.options.day_options[1],\n                    dateOptions: res.data.options.filled_days.map((date) => (new Date(date))),\n                    fileOptions: res.data.options.file_options,\n                    filledDays: res.data.options.filled_days,\n                    dayOption: res.data.bin.day,\n                })\n                axios\n                    .get('/process/public/targets/' + timeseries + '/' + file + '/' + user + '/')\n                    .then((targetResponse) => {\n                        this.setState({ \n                            targets: targetResponse.data,\n                            targetNumbers: targetResponse.data.map(t => t.number),\n                            loading: false,\n                        });\n                        axios\n                            .get('/process/rows/community/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + user + '/')\n                            .then((rowResponse) => {\n                                this.setState({ \n                                    rows: rowResponse.data.options.rows,\n                                });\n                            });\n                });\n            })\n            .catch((err) => {\n                console.log(err);\n                this.setState({ bin: {timeseries:'', ifcb:'', year:'', day:'', file:'Not Found'} });\n                return;\n            });\n        axios\n            .get('/complete/public/status/' + timeseries + '/' + file + '/' + user + '/')\n            .then((completionStatusResponse) => {\n                this.setState({\n                    categorized: completionStatusResponse.data.options.categorized,\n                    identified: completionStatusResponse.data.options.identified,\n                });\n            })\n    }\n\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.url !== prevProps.match.url) {\n        this.props.history.go(0);\n    }\n  }\n\n  disablePlanktonClick(targetNum, bool, infoShowing) {\n    const infoClassList = document.getElementById(targetNum + '-info').classList;\n    if ((infoShowing) || (infoClassList.contains('show-info'))) {\n        if (!this.state.infoShowing.includes(targetNum)) {\n            this.setState({ infoShowing: this.state.infoShowing.concat([targetNum]) });\n        }\n        this.setState({ planktonClickEnabled: false });\n    } else {\n        const newInfoShowing = this.state.infoShowing.filter(function(item) {\n            return item !== targetNum\n        })\n        this.setState({ planktonClickEnabled: bool, infoShowing: newInfoShowing });\n    }\n  }\n\n  renderLoader() {\n    return <img src={loader} alt=\"Loading targets...\" width=\"80\" loop=\"infinite\" style={{'margin':'0 0 3vw 0'}}></img>\n  }\n\n  returnToClassify() {\n    this.setState({ newFile: 'blank' });\n  }\n\n  renderNotFound() {\n      return(\n        <div className='main'>\n            <div className=\"page\">\n                <div className=\"content\">\n                    <div className=\"inner-content\">\n                        <h1>File Not Found</h1>\n                        <p className=\"not-found-message\">The IFCB file you're looking for doesn't exist. There may be a typo in the time series, file number, or sort code in the URL.</p>\n                        <div className=\"return-button\" onClick={() => this.returnToClassify()}>Return to Classify</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n      );\n  }\n\n  renderPage() {\n    const cache = new CellMeasurerCache({\n        defaultHeight: 10,\n        minHeight: 10,\n        fixedWidth: true\n      });\n\n    const scrollToIndex = this.state.scrollToIndex;\n\n    const selectedDate = (this.state.bin.day === '') ? new Date() : new Date(this.state.bin.day + '-' + this.state.bin.year);\n\n    const rowRenderer = ({index, key, parent, style}) => (\n        \n        (this.state.targets.length < 1) ? <div/> : \n\n            <CellMeasurer\n                cache={cache}\n                key={key}\n                parent={parent}\n                rowIndex={index}\n            >\n            {({ measure, registerChild }) => (\n            <div ref={registerChild} key={key} style={style}>\n                <div onLoad={measure} className=\"row\">\n                    <div className=\"image-row\">\n                        {this.state.rows[index].map((i) => \n                            <Plankton \n                                timeseries={this.state.bin.timeseries}\n                                file={this.state.bin.file}\n                                timestamp={this.state.bin.file}\n                                id={i}\n                                targetNum={this.state.targets[i].number}\n                                class_name={this.state.targets[i].class_name}\n                                class_abbr={this.state.targets[i].class_abbr}\n                                height={this.state.targets[i].height}\n                                width={this.state.targets[i].width}\n                                scale={this.props.scaleEntry / 10}\n                                ifcb={this.state.bin.ifcb}\n                                editor={'jamiewalton'}\n                                date={this.state.targets[i].date}\n                                onClick={() => console.log()}\n                                onCheck={() => console.log()}\n                                infoChange={(targetNum, bool, infoShowing) => this.disablePlanktonClick(targetNum, bool, infoShowing)}\n                                infoShowing={this.state.infoShowing}\n                                public={false}\n                                categorizeMode={false}\n                                noteOption={false}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n            )}\n            </CellMeasurer>\n        )\n      return(\n        \n        <div className='main'>\n            <div className=\"page\">\n            <div className=\"content\">\n                    <div className=\"inner-content\">\n                    <div className=\"notebook-heading\">\n                        <h1 className=\"notebook-header\">Analysis</h1>\n                    </div>\n                    <h2 className=\"analysis-option-heading page-heading community-review-heading\">Community Review</h2>\n                        {this.state.bin.file ? \n                            <CommunityFilePreview \n                                timeseries={this.state.bin.timeseries}\n                                file={this.state.bin.file}\n                                ifcb={this.state.bin.ifcb}\n                                classifier={this.state.user}\n                                categorized={this.state.categorized}\n                                identified={this.state.identified}\n                                onClick={() => this.props.goto_communityreview()}\n                            /> : <div/>}\n                        <div className=\"annotations\">\n                            <div>\n                                <div className=\"image-grid remove-top-margin\" id=\"image-grid\">\n                                    {\n                                    (this.state.loading || this.props.isSaving) ? this.renderLoader() : console.log()\n                                    }\n                                    {\n                                    (this.state.emptyCategories && this.state.categorizeMode) ? <p className=\"empty-categories-text\">Nothing to categorize! Switch over to Identify mode to start classifying.</p> :\n                                        <List\n                                            height={800} // fix later\n                                            rowCount={this.state.rows.length}\n                                            rowHeight={cache.rowHeight}\n                                            rowRenderer={rowRenderer}\n                                            scrollToAlignment=\"start\"\n                                            scrollToIndex={scrollToIndex}\n                                            width={document.documentElement.clientWidth*0.72}\n                                        />\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n      );\n  }\n\n  render() {\n\n    if(this.props.onHome) {\n        return <Redirect to=\"/\" />\n    }\n\n    if(this.props.onLearn) {\n        return <Redirect to=\"/learn\" />\n    }\n    \n    if(this.props.onNotebook) {\n        return <Redirect to=\"/notebook/\" />\n    }\n\n    if(this.props.onAnalysis) {\n        return <Redirect to=\"/analysis/\" />\n    }\n\n    if(this.props.onCommunityReview) {\n        return <Redirect to=\"/analysis/communityreview/\" />\n    }\n\n    if(this.state.newFile.length !== 0) {\n        if (this.state.newFile === 'blank') {\n            return <Redirect to='/classify' />\n        }\n        const newURL = '/classify/' + this.state.newTimeSeries + '/' + this.state.newFile;\n        return <Redirect to={newURL} />\n    }\n\n    if (this.state.rows !== [] && this.state.initialTargetJump === '' && !this.state.loading) {\n        const urlInfo = this.props.location.pathname.split('/');\n        if (urlInfo.length > 4) {\n            const targetNum = urlInfo[4];\n            var k = this.state.targets.findIndex(target => target.number === targetNum);\n            var scrollToIndex = this.state.rows.findIndex(row => row.includes(k));\n\n            if (isNaN(scrollToIndex) || scrollToIndex<0) {\n                scrollToIndex = undefined;\n            }\n\n            this.setState({\n                jumpEntry: targetNum,\n                jumpSubmit: targetNum,\n                initialTargetJump: targetNum,\n                scrollToIndex: scrollToIndex\n            });\n        }\n    }\n\n    return(\n        <div className='body'>\n        <title>{'IFCB | ' + this.state.bin.file}</title>\n        <Header />\n        {(this.state.bin.file === 'Not Found') ? this.renderNotFound() : this.renderPage()}\n        \n        <script>{document.addEventListener(\"scroll\", this.flipBackToTop)}</script>\n    </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => ({\n    preferences: state.auth.preferences,\n    isSaving: state.classify.isSaving,\n    user: state.auth.user,\n    scaleEntry: state.classify.scaleEntry,\n    onHome: state.menu.onHome,\n    onLearn: state.menu.onLearn,\n    onNotebook: state.menu.onNotebook,\n    onAnalysis: state.menu.onAnalysis,\n    onCommunityReview: state.menu.onCommunityReview,\n });\n\nexport default connect(mapStateToProps, {goto_communityreview })(CommunityFile);",{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":25,"column":9,"nodeType":"231","messageId":"232","endLine":25,"endColumn":90},{"ruleId":"233","severity":1,"message":"234","line":586,"column":16,"nodeType":"235","endLine":586,"endColumn":44},{"ruleId":"236","severity":1,"message":"237","line":29,"column":1,"nodeType":"238","endLine":106,"endColumn":2},{"ruleId":"239","severity":1,"message":"240","line":71,"column":9,"nodeType":"241","messageId":"242","endLine":71,"endColumn":25},{"ruleId":"243","severity":1,"message":"244","line":83,"column":9,"nodeType":"241","messageId":"245","endLine":91,"endColumn":14},{"ruleId":"236","severity":1,"message":"237","line":27,"column":1,"nodeType":"238","endLine":92,"endColumn":2},{"ruleId":"246","severity":1,"message":"247","line":39,"column":34,"nodeType":"248","messageId":"249","endLine":39,"endColumn":74},{"ruleId":"250","severity":1,"message":"251","line":40,"column":21,"nodeType":"252","messageId":"253","endLine":40,"endColumn":26},{"ruleId":"236","severity":1,"message":"237","line":29,"column":1,"nodeType":"238","endLine":205,"endColumn":2},{"ruleId":"225","replacedBy":"254"},{"ruleId":"227","replacedBy":"255"},{"ruleId":"256","severity":1,"message":"257","line":55,"column":42,"nodeType":"252","messageId":"258","endLine":55,"endColumn":48},{"ruleId":"256","severity":1,"message":"259","line":55,"column":50,"nodeType":"252","messageId":"258","endLine":55,"endColumn":57},{"ruleId":"256","severity":1,"message":"260","line":55,"column":59,"nodeType":"252","messageId":"258","endLine":55,"endColumn":69},{"ruleId":"256","severity":1,"message":"261","line":55,"column":71,"nodeType":"252","messageId":"258","endLine":55,"endColumn":75},{"ruleId":"256","severity":1,"message":"262","line":55,"column":77,"nodeType":"252","messageId":"258","endLine":55,"endColumn":82},{"ruleId":"256","severity":1,"message":"263","line":5,"column":8,"nodeType":"252","messageId":"258","endLine":5,"endColumn":13},{"ruleId":"256","severity":1,"message":"263","line":2,"column":8,"nodeType":"252","messageId":"258","endLine":2,"endColumn":13},{"ruleId":"264","severity":1,"message":"265","line":34,"column":9,"nodeType":"266","messageId":"267","endLine":54,"endColumn":10},{"ruleId":"264","severity":1,"message":"265","line":75,"column":9,"nodeType":"266","messageId":"267","endLine":91,"endColumn":10},{"ruleId":"264","severity":1,"message":"265","line":95,"column":9,"nodeType":"266","messageId":"267","endLine":101,"endColumn":10},{"ruleId":"264","severity":1,"message":"265","line":106,"column":9,"nodeType":"266","messageId":"267","endLine":112,"endColumn":10},{"ruleId":"268","severity":1,"message":"269","line":88,"column":41,"nodeType":"235","endLine":88,"endColumn":93},{"ruleId":"270","severity":1,"message":"271","line":91,"column":45,"nodeType":"272","messageId":"273","endLine":91,"endColumn":74},{"ruleId":"268","severity":1,"message":"269","line":103,"column":41,"nodeType":"235","endLine":103,"endColumn":95},{"ruleId":"270","severity":1,"message":"271","line":106,"column":45,"nodeType":"272","messageId":"273","endLine":106,"endColumn":74},{"ruleId":"256","severity":1,"message":"274","line":19,"column":13,"nodeType":"252","messageId":"258","endLine":19,"endColumn":18},{"ruleId":"256","severity":1,"message":"275","line":2,"column":10,"nodeType":"252","messageId":"258","endLine":2,"endColumn":60},{"ruleId":"256","severity":1,"message":"276","line":6,"column":8,"nodeType":"252","messageId":"258","endLine":6,"endColumn":16},{"ruleId":"256","severity":1,"message":"277","line":7,"column":8,"nodeType":"252","messageId":"258","endLine":7,"endColumn":15},{"ruleId":"256","severity":1,"message":"278","line":8,"column":8,"nodeType":"252","messageId":"258","endLine":8,"endColumn":19},{"ruleId":"256","severity":1,"message":"279","line":9,"column":8,"nodeType":"252","messageId":"258","endLine":9,"endColumn":20},{"ruleId":"256","severity":1,"message":"280","line":4,"column":20,"nodeType":"252","messageId":"258","endLine":4,"endColumn":24},{"ruleId":"256","severity":1,"message":"281","line":13,"column":8,"nodeType":"252","messageId":"258","endLine":13,"endColumn":14},{"ruleId":"233","severity":1,"message":"234","line":47,"column":25,"nodeType":"235","endLine":47,"endColumn":53},{"ruleId":"233","severity":1,"message":"234","line":51,"column":29,"nodeType":"235","endLine":51,"endColumn":57},{"ruleId":"256","severity":1,"message":"282","line":231,"column":11,"nodeType":"252","messageId":"258","endLine":231,"endColumn":23},"no-native-reassign",["283"],"no-negated-in-lhs",["284"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-duplicate-case","Duplicate case label.","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'reply'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'reply' is already defined.","Identifier","redeclared",["283"],["284"],"no-unused-vars","'parent' is assigned a value but never used.","unusedVar","'replies' is assigned a value but never used.","'timeseries' is assigned a value but never used.","'file' is assigned a value but never used.","'image' is assigned a value but never used.","'axios' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'title' is defined but never used.","'__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED' is defined but never used.","'ceratium' is defined but never used.","'ditylum' is defined but never used.","'chaetoceros' is defined but never used.","'lithodesmium' is defined but never used.","'Link' is defined but never used.","'loader' is defined but never used.","'selectedDate' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]