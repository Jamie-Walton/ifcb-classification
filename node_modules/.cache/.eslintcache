[{"/Users/jamiewalton/Desktop/Classification_v3/src/index.js":"1","/Users/jamiewalton/Desktop/Classification_v3/src/App.js":"2","/Users/jamiewalton/Desktop/Classification_v3/src/reportWebVitals.js":"3","/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Register.js":"4","/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Login.js":"5","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Header.js":"6","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Annotations.js":"7","/Users/jamiewalton/Desktop/Classification_v3/src/components/common/PrivateRoute.js":"8","/Users/jamiewalton/Desktop/Classification_v3/src/store.js":"9","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/index.js":"10","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/auth.js":"11","/Users/jamiewalton/Desktop/Classification_v3/src/actions/types.js":"12","/Users/jamiewalton/Desktop/Classification_v3/src/actions/auth.js":"13","/Users/jamiewalton/Desktop/Classification_v3/src/actions/classify.js":"14","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/classify.js":"15","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Notebook.js":"16","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/BinNote.js":"17","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Note.js":"18","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/menu.js":"19","/Users/jamiewalton/Desktop/Classification_v3/src/actions/menu.js":"20"},{"size":461,"mtime":1626905198221,"results":"21","hashOfConfig":"22"},{"size":1171,"mtime":1627596697674,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1626233027000,"results":"24","hashOfConfig":"22"},{"size":4308,"mtime":1626905198206,"results":"25","hashOfConfig":"22"},{"size":3065,"mtime":1626905198206,"results":"26","hashOfConfig":"22"},{"size":3055,"mtime":1628386848901,"results":"27","hashOfConfig":"22"},{"size":37302,"mtime":1628473142759,"results":"28","hashOfConfig":"22"},{"size":757,"mtime":1627067540186,"results":"29","hashOfConfig":"22"},{"size":382,"mtime":1626905198223,"results":"30","hashOfConfig":"22"},{"size":195,"mtime":1627676355016,"results":"31","hashOfConfig":"22"},{"size":1418,"mtime":1627676373779,"results":"32","hashOfConfig":"22"},{"size":955,"mtime":1628613401795,"results":"33","hashOfConfig":"22"},{"size":2564,"mtime":1627317963366,"results":"34","hashOfConfig":"22"},{"size":3848,"mtime":1628613401793,"results":"35","hashOfConfig":"22"},{"size":1595,"mtime":1628613401802,"results":"36","hashOfConfig":"22"},{"size":14005,"mtime":1628613401798,"results":"37","hashOfConfig":"22"},{"size":4612,"mtime":1628613401795,"results":"38","hashOfConfig":"22"},{"size":3705,"mtime":1628613401797,"results":"39","hashOfConfig":"22"},{"size":606,"mtime":1627677255362,"results":"40","hashOfConfig":"22"},{"size":284,"mtime":1627676738000,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"q77g26",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/jamiewalton/Desktop/Classification_v3/src/index.js",[],["91","92"],"/Users/jamiewalton/Desktop/Classification_v3/src/App.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reportWebVitals.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Register.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Login.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Header.js",["93"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link,  Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { logout } from \"../../actions/auth\";\nimport { goto_classify, goto_notebook } from \"../../actions/menu\";\n\nexport class Header extends Component {\n    static propTypes = {\n        auth: PropTypes.object.isRequired,\n        logout: PropTypes.func.isRequired,\n        goto_classify: PropTypes.func.isRequired,\n        goto_notebook: PropTypes.func.isRequired,\n        goto_notebook: PropTypes.func.isRequired,\n    };\n\n    render() {\n        const { isAuthenticated, user } = this.props.auth;\n\n        if(this.props.onClassify) {\n            return <Redirect to=\"/\" />\n        } else if(this.props.onNotebook) {\n            return <Redirect to=\"/Notebook\" />\n        }\n\n        const authLinks = (\n            <ul className=\"logoutbar\">\n                <span className='nav-hello'>\n                    <strong className='nav-hello'>\n                        { user ? `Welcome, ${user.username}` : \"\" }\n                    </strong>\n                </span>\n                <div className=\"login-navbar\">\n                    <li>\n                        <button \n                            onClick={this.props.goto_classify}\n                            className=\"login-nav-link\">\n                                Classify\n                        </button>\n                    </li>\n                    <li>\n                        <button  \n                            onClick={this.props.goto_notebook}\n                            className=\"login-nav-link\">\n                                Notebook\n                        </button>\n                    </li>\n                    <li>\n                        <a  \n                            href=\"http://ifcb-classification.herokuapp.com/admin/\" // TODO: Fix URL later\n                            className=\"login-nav-link\">\n                                Admin\n                        </a>\n                    </li>\n                </div>\n                <li className=\"nav-item\">\n                    <button \n                        onClick={this.props.logout} \n                        to=\"/login\" \n                        className=\"logout\">Logout</button>\n                </li>\n            </ul>\n        );\n\n        const guestLinks = (\n            <ul className=\"navbar\">\n                <li className=\"nav-item\">\n                    <Link to=\"/register\" className=\"nav-link\">Register</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link to=\"/login\" className=\"nav-link\">Login</Link>\n                </li>\n            </ul>\n        );\n        \n        return (\n            <header>\n                <h3>IFCB Classification</h3>\n                { isAuthenticated ? authLinks : guestLinks }\n            </header>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { logout, goto_classify, goto_notebook })(Header);","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Annotations.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/common/PrivateRoute.js",["94"],"import React from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport loader from \"./loader.GIF\";\n\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n    <Route \n        {...rest}\n        render={props => {\n            if(auth.isLoading) {\n                return <img src={loader} alt=\"Loading...\" width=\"80\" loop=\"infinite\"></img>\n            } else if(!auth.isAuthenticated) {\n                return <Redirect to=\"/login\" />\n            } else {\n                return <Component {...props} />;\n            }\n        }}\n    />\n);\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);","/Users/jamiewalton/Desktop/Classification_v3/src/store.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/index.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/auth.js",["95"],"import {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n} from '../actions/types';\n\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            }\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload\n            };\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n            localStorage.setItem('token', action.payload.token);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false\n            }\n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false\n            }\n            \n        default:\n            return state;\n    }\n}\n\n","/Users/jamiewalton/Desktop/Classification_v3/src/actions/types.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/auth.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/classify.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/classify.js",["96"],"import {\n    SAVE_PROGRESS,\n    SAVE_SUCCESS,\n    SYNC_PROGRESS,\n    SYNC_SUCCESS,\n    NOTES_CHANGED,\n    NOTES_RECORDED,\n    NOTEBOOK_FILTERED,\n    REPLY_RESOLVED,\n    REPLY_OPEN\n} from '../actions/types';\n\nconst initialState = {\n    isSaving: false,\n    isSyncing: false,\n    noteChangeFlag: true,\n    replyChangeFlag: false,\n    notes: []\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case SAVE_PROGRESS:\n            return {\n                ...state,\n                isSaving: true\n            }\n        case SAVE_SUCCESS:\n            return {\n                ...state,\n                isSaving: false\n            }\n        case SYNC_PROGRESS:\n            return {\n                ...state,\n                isSyncing: true\n            }\n        case SYNC_SUCCESS:\n            return {\n                ...state,\n                isSyncing: false\n            }\n        case NOTES_CHANGED:\n            return {\n                ...state,\n                noteChangeFlag: true\n            }\n        case NOTES_RECORDED:\n            return {\n                ...state,\n                noteChangeFlag: false\n            }\n        case REPLY_OPEN:\n            return {\n                ...state,\n                noteChangeFlag: true\n            }\n        case REPLY_RESOLVED:\n            return {\n                ...state,\n                noteChangeFlag: false\n            }\n        case NOTEBOOK_FILTERED:\n            return {\n                ...state,\n                notes: action.payload\n            }\n        default:\n            return state;\n    }\n}","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Notebook.js",["97","98","99"],"import React, { Component } from 'react';\nimport { Grid, AutoSizer, CellMeasurerCache, CellMeasurer } from 'react-virtualized';\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport { filterNotebook, receiveNotesChange } from \"../../actions/classify\";\nimport Header from '../layout/Header';\nimport Note from \"./Note\";\nimport '../../css/notebook-styles.css';\nimport loader from \"./loader.GIF\";\n\nclass Filter extends Component {\n    renderOption(option) {\n        return(\n            <div className=\"filter-option\" onClick={() => this.props.applyFilter(this.props.filter, option)}>{option}</div>\n        );\n    }\n    \n    render() {\n        return(\n            <div>\n                <div className=\"filter-choice\" onClick={() => this.props.onClick(this.props.filter)}>\n                    <p className=\"filter-choice-text\">{this.props.filter}</p>\n                    <p className=\"filter-choice-plus\" id={this.props.filter + \"-plus\"}>+</p>\n                </div>\n                <div className=\"filter-dropdown\" id={this.props.filter + \"-dropdown\"}>\n                    {this.props.options.map((option) => (this.renderOption(option[this.props.filter])))}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Notebook extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            notes: [{\n                \"id\": \"\",\n                \"author\": \"\",\n                \"date\": \"\",\n                \"entry\": \"\",\n                \"parent\": null,\n                \"replies\": [],\n                \"timeseries\": \"\",\n                \"ifcb\": \"\",\n                \"file\": \"\",\n                \"image\": \"\"\n            }],\n            flags: [],\n            classes: [],\n            searchTerms: \"\",\n            authors: [{author: ''}],\n            bins: [{bin: ''}],\n            timeseries: [{timeseries: ''}],\n            ifcbs: [{ifcb: ''}],\n            types: [\n                {type: 'Bin Note'}, \n                {type: 'Target Note'}\n            ],\n            appliedFilters: [],\n        }\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        onClassify: PropTypes.bool,\n        notes: PropTypes.array,\n        filterNotebook: PropTypes.func,\n        receiveNotesChange: PropTypes.func,\n        noteChangeFlag: PropTypes.bool\n    }\n\n    getNotebook(filters) {\n        if (filters.length === 0) {\n            axios\n                .get('/notebook/')\n                .then((res) => {\n                    this.setState({ \n                        notes: res.data,\n                        flags: Array(res.data.length).fill(''),\n                    });\n                })\n                .catch((err) => console.log(err));\n        } else {\n            this.props.filterNotebook(filters);\n        }\n    }\n\n    componentDidMount() {\n        this.getNotebook([]);\n        axios\n            .get('/notebook/filters/')\n            .then((res) => {\n                this.setState({ \n                    authors: res.data.options.authors,\n                    bins: res.data.options.bins,\n                    timeseries: res.data.options.timeseries,\n                    ifcbs: res.data.options.ifcbs,\n                });\n            })\n            .catch((err) => console.log(err));\n    }\n\n    componentDidUpdate() {\n        if (this.props.noteChangeFlag) {\n            this.getNotebook(this.state.appliedFilters);\n            this.props.receiveNotesChange();\n        }\n    }\n\n    handleFilterClick() {\n        document.getElementById('filter_dropdown').classList.toggle('show');\n    }\n\n    onChange = e => this.setState({ searchTerms: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        const newAppliedFilters = this.state.appliedFilters.concat([ {category: \"search\", choice: this.state.searchTerms} ]);\n        this.setState({ appliedFilters: newAppliedFilters })\n        this.props.filterNotebook(newAppliedFilters);\n    }\n\n    handleFilterChoiceClick(option) {\n        document.getElementById(option + '-plus').classList.toggle('rotate-plus');\n        document.getElementById(option + '-dropdown').classList.toggle('show');\n    }\n\n    handleApplyFilter(category, choice) {\n        const duplicates = this.state.appliedFilters.filter(entry => (entry['category'] === category) && (entry['choice'] === choice))\n        if (duplicates.length === 0) {\n            const newAppliedFilters = this.state.appliedFilters.concat([ {category: category, choice: choice} ])\n            this.getNotebook(newAppliedFilters);\n            this.setState({ appliedFilters: newAppliedFilters });\n        }\n    }\n\n    handleRemoveFilter(filter) {\n        const applied = this.state.appliedFilters;\n        const index = applied.findIndex(entry => entry === filter);\n        const newAppliedFilters = applied.slice(0, index).concat(applied.slice(index+1,applied.length));\n        this.setState({ appliedFilters: newAppliedFilters });\n        this.getNotebook(newAppliedFilters);\n    }\n\n    renderFilterChoice(filter, options) {\n        return(\n            <Filter\n                filter={filter}\n                options={options}\n                onClick={(option) => this.handleFilterChoiceClick(option)}\n                applyFilter={(category, choice) => this.handleApplyFilter(category, choice)}\n            />\n        );\n    }\n\n    renderAppliedFilters(filter) {\n        return (\n            <div className=\"filter-choice applied\" onClick={() => this.handleRemoveFilter(filter)}>\n                <p className=\"filter-choice-text applied-text\">{filter.category.toUpperCase() + ': ' + filter.choice}</p>\n                <p className=\"filter-choice-plus applied-text rotate-plus\" id={this.props.filter + \"-plus\"}>+</p>\n            </div>\n        );\n    }\n\n\n  render() {\n    if(this.props.onClassify) {\n        return <Redirect to=\"/\" />\n    }\n\n    const cache = new CellMeasurerCache({\n        defaultHeight: 200,\n        minHeight: 200,\n        fixedWidth: true\n      });\n\n    // Grid data as an array of arrays\n    const notes = this.state.notes;\n    const username = this.props.user.username;\n    const flags = this.state.flags\n    var skips = 0;\n    var rendered = [];\n\n    function renderReply(note, count) {\n        return(\n            <div className=\"reply\" style={{margin: \"0 0 0 \" + String(count) + \"vw\"}}>\n                <Note\n                    note={note}\n                    user={username}\n                    timeseries={note.timeseries}\n                    ifcb={note.ifcb}\n                    file={note.file}\n                    type='bin'\n                    image={note.image}\n                />\n                <div className=\"reply\" style={{margin: \"0 0 0 \" + String((count+1)) + \"vw\"}}>\n                {(note.replies.length !== 0) ?\n                    note.replies.map((reply) => renderReply(reply, count+1)) :\n                    <div></div>\n                }\n                </div>\n            </div>\n        );\n    }\n    \n    function cellRenderer({columnIndex, key, parent, rowIndex, style}) {\n        if ((rowIndex === 0) && (columnIndex === 0)) {\n            skips = 0;\n            rendered = [];\n        }\n        var noteIndex = (3*rowIndex) + columnIndex + skips;\n        if ((noteIndex) < notes.length) {\n            if ((notes[noteIndex].parent !== null) || (rendered.includes(noteIndex))) {\n                while (notes[noteIndex].parent !== null || (rendered.includes(noteIndex))) {\n                    noteIndex = noteIndex + 1;\n                    skips = skips + 1;\n                    if (noteIndex >= notes.length) {\n                        return\n                    }\n                }\n            }\n            rendered = rendered.concat([noteIndex]);\n            const note = notes[noteIndex];\n            const count = 0;\n            var url = '';\n            if (note.image !== 'None') {\n                url = 'http://128.114.25.154:8888/' + note.timeseries + '/' + note.file + '_' + note.ifcb + '_' + note.image + '.jpg';\n            }\n            const flatNote = JSON.stringify(note);\n            const includesFlag = flatNote.includes('true');\n            return (\n                <CellMeasurer\n                    cache={cache}\n                    columnIndex={columnIndex}\n                    key={key}\n                    parent={parent}\n                    rowIndex={rowIndex}\n                >\n                {({ measure, registerChild }) => (\n                    <div ref={registerChild} key={key} style={style}>\n                        <div className=\"notebook-note\" onLoad={measure}>\n                            {(url === '') ? <div></div> : \n                            <img src={url} className=\"notebook-image\" alt={'Target ' + note.image}></img>}\n                            {(includesFlag) ? <div className=\"flag\"></div> : <div></div>}\n                            <div className=\"notebook-entry\"> \n                                <div>\n                                    {(note.image === 'None') ? \n                                    <div className=\"notebook-entry\">\n                                        <p className=\"notebook-entry-heading\">{note.timeseries + ', ' + note.file}</p>\n                                    </div> :\n                                    <div className=\"notebook-entry\">\n                                        <p className=\"notebook-entry-heading\">{'Target ' + note.image}</p>\n                                        <p className=\"notebook-entry-subtitle\">{note.timeseries + ', ' + note.file}</p>\n                                    </div>\n                                    }\n                                    <Note\n                                        note={note}\n                                        user={username}\n                                        timeseries={note.timeseries}\n                                        ifcb={note.ifcb}\n                                        file={note.file}\n                                        type='bin'\n                                        image={note.image}\n                                    />\n                                    {(note.replies.length !== 0) ?\n                                        note.replies.map((reply) => renderReply(reply, count+1)) :\n                                        <div></div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n                </CellMeasurer>\n            );\n            } else {return}\n      }\n\n    return (\n            <div>\n                <Header />\n                <div className='main'>\n                    <div className=\"page\">\n                        <div>\n                            <div className=\"notebook-heading\">\n                                <h1 className=\"notebook-header\">Notebook</h1>\n                                <div className=\"filter-button\" onClick={() => this.handleFilterClick()}>Filter</div>\n                            </div>\n                            <div className=\"day-dropdown withmargin\" id='filter_dropdown'>\n                                <form className=\"search-form\" id=\"search-form\" onSubmit={this.onSubmit}>\n                                    <div className=\"search-bar\">\n                                        <div className=\"search-icon\"></div>\n                                        <input\n                                            type=\"text\"\n                                            className=\"search-input\"\n                                            name=\"searchTerms\"\n                                            onChange={this.onChange}\n                                            value={this.state.searchTerms}\n                                        />\n                                    </div>\n                                    <div className=\"applied-filters\">{this.state.appliedFilters.map((filter) => (this.renderAppliedFilters(filter)))}</div>\n                                    <div className=\"filter-buttons\">\n                                        {this.renderFilterChoice('author', this.state.authors)}\n                                        {this.renderFilterChoice('file', this.state.bins)}\n                                        {this.renderFilterChoice('timeseries', this.state.timeseries)}\n                                        {this.renderFilterChoice('ifcb', this.state.ifcbs)}\n                                    </div>\n                                </form>\n                            </div>\n                            <div className=\"notebook-content\">\n                                <AutoSizer>\n                                {({ width, height }) => (\n                                    <Grid\n                                        cellRenderer={cellRenderer}\n                                        columnCount={3}\n                                        columnWidth={document.documentElement.clientWidth*0.29}\n                                        rowHeight={cache.rowHeight}\n                                        deferredMeasurementCache={cache}\n                                        cellRenderer={cellRenderer}\n                                        rowCount={Math.ceil(this.state.notes.length/3)}\n                                        height={height}\n                                        width={width}\n                                        notes={this.props.notes}\n                                    />\n                                )}\n                                </AutoSizer>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    onClassify: state.menu.onClassify,\n    noteChangeFlag: state.classify.noteChangeFlag\n });\n\nexport default connect(mapStateToProps, {filterNotebook, receiveNotesChange})(Notebook);\n","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/BinNote.js",["100","101"],"import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport { PropTypes } from \"prop-types\";\n\nimport { addBinNote, sendNotesChange, receiveNotesChange, receiveReplyOpen } from \"../../actions/classify\";\nimport Note from \"./Note\";\n\nexport class BinNote extends React.Component {\n    state = {\n        entry: '',\n        parents: [],\n        notes: [],\n    }\n    \n    static propTypes = {\n        addBinNote: PropTypes.func,\n        receiveNotesChange: PropTypes.func,\n        noteChangeFlag: PropTypes.bool,\n        receiveReplyOpen: PropTypes.func,\n        replyChangeFlag: PropTypes.bool,\n        user: PropTypes.object,\n    };\n\n    getNotes() {\n        axios\n            .get('/process/note/' + this.props.timeseries + '/' + this.props.file + '/' + this.props.image + '/')\n            .then((res) => {\n                this.setState({ notes: res.data });\n            })\n            .catch((err) => console.log(err));\n    }\n\n    renderNote(note, count) {\n        if (note.parent !== null) {\n            var reply = note;\n            var iters = 0;\n            while (reply.parent !== null) {\n                var parentFunc = (element) => element.id === reply.parent;\n                var reply = this.state.notes[this.state.notes.findIndex(parentFunc)];\n                iters = iters + 1;\n            }\n            if (count!==iters) {\n                return;\n            }\n        }\n        return(\n            <div>\n                <Note\n                    note={note}\n                    user={this.props.user.username}\n                    timeseries={this.props.timeseries}\n                    ifcb={this.props.ifcb}\n                    file={this.props.file}\n                    type={this.props.type}\n                    image={this.props.image}\n                />\n                <div className=\"reply\" style={{margin: \"0 0 0 \" + String((count+1)) + \"vw\"}}>\n                {(note.replies.length !== 0) ?\n                    note.replies.map((reply) => this.renderNote(reply, count+1)) :\n                    <div></div>\n                }\n                </div>\n            </div>\n        \n        );\n    }\n\n    componentDidMount() {\n        this.getNotes();\n    }\n\n    componentDidUpdate() {\n        if(this.props.noteChangeFlag) {\n            this.props.receiveNotesChange();\n            this.getNotes();\n        }\n        if(this.props.replyChangeFlag) {\n            this.props.receiveReplyOpen();\n            this.getNotes();\n        }\n    }\n\n    onChange = e => this.setState({ entry: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addBinNote(this.props.user.username, this.state.entry, null, [], this.props.timeseries, this.props.ifcb, this.props.file, this.props.image);\n        this.props.sendNotesChange();\n        this.getNotes();\n        const noteForm = document.getElementById(\"note-form\");\n        noteForm.reset()\n    }\n    \n    render() {\n        return(\n            <div className={this.props.type + \"-notes-content\"}>\n                {(this.props.type === 'bin') ? <div className=\"refresh\" onClick={() => this.getNotes()}></div> : <div></div>}\n                <div id=\"note-container\">\n                    {this.state.notes.map((note) => this.renderNote(note, 0))}\n                </div>\n                    <div className={this.props.type + \"-note-form\"}>\n                        <form onSubmit={this.onSubmit} id=\"note-form\">\n                            <div className={this.props.type + \"-new-note\"}>\n                            <input\n                                type=\"textarea\"\n                                rows=\"10\"\n                                className={this.props.type + \"-note-input\"}\n                                name={this.props.type + \"-note-entry\"}\n                                id=\"note-entry\"\n                                onChange={this.onChange}\n                                value={this.entry}\n                            />\n                            <button type=\"submit\" className={this.props.type + \"-note-submit\"}></button>\n                            </div>\n                            {(this.state.notes === []) ? <p className=\"bin-note-label\">Add a Note</p> : <div></div>}\n                        </form>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    noteChangeFlag: state.classify.noteChangeFlag,\n    replyChangeFlag: state.classify.replyChangeFlag,\n    user: state.auth.user\n });\n\nexport default connect(mapStateToProps, {addBinNote, sendNotesChange, receiveNotesChange, receiveReplyOpen})(BinNote);","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Note.js",["102","103","104","105","106"],"import React from \"react\";\nimport { connect } from 'react-redux';\nimport { PropTypes } from \"prop-types\";\n\nimport { addBinNote, deleteBinNote, flagBinNote, sendNotesChange, sendReplyOpen } from \"../../actions/classify\";\n\nclass Note extends React.Component {\n    state = {\n        entry: '',\n    }\n\n    static propTypes = {\n        addBinNote: PropTypes.func,\n        deleteBinNote: PropTypes.func,\n        sendNotesChange: PropTypes.func,\n        sendReplyOpenChange: PropTypes.func,\n        notes: PropTypes.array,\n    };\n    \n    reply(id) {\n        document.getElementById('reply-form' + id).classList.toggle('show');\n        this.props.sendReplyOpen();\n    }\n\n    delete(id) {\n        this.props.deleteBinNote(id);\n        this.props.sendNotesChange();\n    }\n\n    flag(id) {\n        this.props.flagBinNote(id);\n        this.props.sendNotesChange();\n    }\n\n    getFlagButton(isFlagged) {\n        if (isFlagged) {\n            return 'Unflag'\n        } else {\n            return 'Flag'\n        }\n    }\n\n    onChange = e => this.setState({ entry: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addBinNote(this.props.user, this.state.entry, this.props.note.id, [], this.props.timeseries, this.props.ifcb, this.props.file, this.props.image);\n        this.props.sendNotesChange();\n        const replyForm = document.getElementById(\"note-form\");\n        replyForm.reset()\n        document.getElementById('reply-form' + this.props.note.id).classList.toggle('show');\n    }\n    \n    render() {\n        const { id, author, date, entry, parent, replies, timeseries, file, image, flag } = this.props.note;\n        return (\n            <div className={this.props.type + \"-note\"} id={id}>\n                <div className={this.props.type + \"-note-header\"}>\n                    <p className=\"note-author\">{author}</p>\n                    <p className=\"note-date\">{date.slice(0,10)}</p>\n                    {(flag) ? <div className=\"flag-small\"></div> : <div></div>}\n                </div>\n                <p className={this.props.type + \"-note-entry\"}>{entry}</p>\n                {(this.props.type === 'bin') ? \n                    <button className=\"reply-button\" onClick={() => this.reply(id)}>Reply</button> :\n                    <div></div>}\n                {(author === this.props.user) ? \n                    <button className=\"reply-button\" onClick={() => this.delete(id)}>Delete</button> :\n                    <div></div>}\n                {(author === this.props.user) ? \n                    <button className=\"reply-button\" onClick={() => this.flag(id)}>{this.getFlagButton(flag)}</button> :\n                    <div></div>}\n                <div className=\"reply-form\" id={\"reply-form\" + id}>\n                        <form onSubmit={this.onSubmit} id=\"note-form\">\n                            <div className=\"new-note\">\n                            <input\n                                type=\"textarea\"\n                                rows=\"10\"\n                                className=\"note-input\"\n                                name=\"note-entry\"\n                                id=\"note-entry\"\n                                onChange={this.onChange}\n                                value={this.entry}\n                            />\n                            <button type=\"submit\" className={this.props.type + \"-note-submit\"}></button>\n                            </div>\n                        </form>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    notes: state.classify.notes,\n });\n\nexport default connect(mapStateToProps, {addBinNote, deleteBinNote, flagBinNote, sendNotesChange, sendReplyOpen})(Note);","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/menu.js",["107"],"import {\n    CLASSIFY_PAGE,\n    NOTEBOOK_PAGE\n} from '../actions/types';\n\n\nconst initialState = {\n    onClassify: true,\n    onNotebook: false\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case CLASSIFY_PAGE:\n            return {\n                ...state,\n                onClassify: true,\n                onNotebook: false\n            }\n        case NOTEBOOK_PAGE:\n            return {\n                ...state,\n                onClassify: false,\n                onNotebook: true\n            }\n            \n        default:\n            return state;\n    }\n}\n\n","/Users/jamiewalton/Desktop/Classification_v3/src/actions/menu.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":14,"column":9,"nodeType":"114","messageId":"115","endLine":14,"endColumn":22},{"ruleId":"116","severity":1,"message":"117","line":4,"column":8,"nodeType":"118","messageId":"119","endLine":4,"endColumn":17},{"ruleId":"120","severity":1,"message":"121","line":20,"column":1,"nodeType":"122","endLine":59,"endColumn":2},{"ruleId":"120","severity":1,"message":"121","line":21,"column":1,"nodeType":"122","endLine":71,"endColumn":2},{"ruleId":"116","severity":1,"message":"123","line":12,"column":8,"nodeType":"118","messageId":"119","endLine":12,"endColumn":14},{"ruleId":"116","severity":1,"message":"124","line":184,"column":11,"nodeType":"118","messageId":"119","endLine":184,"endColumn":16},{"ruleId":"125","severity":1,"message":"126","line":323,"column":41,"nodeType":"127","messageId":"128","endLine":323,"endColumn":68},{"ruleId":"129","severity":1,"message":"130","line":39,"column":34,"nodeType":"131","messageId":"132","endLine":39,"endColumn":74},{"ruleId":"133","severity":1,"message":"134","line":40,"column":21,"nodeType":"118","messageId":"135","endLine":40,"endColumn":26},{"ruleId":"116","severity":1,"message":"136","line":55,"column":42,"nodeType":"118","messageId":"119","endLine":55,"endColumn":48},{"ruleId":"116","severity":1,"message":"137","line":55,"column":50,"nodeType":"118","messageId":"119","endLine":55,"endColumn":57},{"ruleId":"116","severity":1,"message":"138","line":55,"column":59,"nodeType":"118","messageId":"119","endLine":55,"endColumn":69},{"ruleId":"116","severity":1,"message":"139","line":55,"column":71,"nodeType":"118","messageId":"119","endLine":55,"endColumn":75},{"ruleId":"116","severity":1,"message":"140","line":55,"column":77,"nodeType":"118","messageId":"119","endLine":55,"endColumn":82},{"ruleId":"120","severity":1,"message":"121","line":12,"column":1,"nodeType":"122","endLine":30,"endColumn":2},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-dupe-keys","Duplicate key 'goto_notebook'.","ObjectExpression","unexpected","no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'loader' is defined but never used.","'flags' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'reply'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'reply' is already defined.","redeclared","'parent' is assigned a value but never used.","'replies' is assigned a value but never used.","'timeseries' is assigned a value but never used.","'file' is assigned a value but never used.","'image' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]