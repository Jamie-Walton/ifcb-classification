[{"/Users/jamiewalton/Desktop/Classification_v3/src/index.js":"1","/Users/jamiewalton/Desktop/Classification_v3/src/App.js":"2","/Users/jamiewalton/Desktop/Classification_v3/src/reportWebVitals.js":"3","/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Register.js":"4","/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Login.js":"5","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Header.js":"6","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Annotations.js":"7","/Users/jamiewalton/Desktop/Classification_v3/src/components/common/PrivateRoute.js":"8","/Users/jamiewalton/Desktop/Classification_v3/src/store.js":"9","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/index.js":"10","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/auth.js":"11","/Users/jamiewalton/Desktop/Classification_v3/src/actions/types.js":"12","/Users/jamiewalton/Desktop/Classification_v3/src/actions/auth.js":"13","/Users/jamiewalton/Desktop/Classification_v3/src/actions/classify.js":"14","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/classify.js":"15","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/BinNote.js":"16","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/menu.js":"17","/Users/jamiewalton/Desktop/Classification_v3/src/actions/menu.js":"18","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Plankton.js":"19","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Search.js":"20","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/ClassDownload.js":"21","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/YearControl.js":"22","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/DayControl.js":"23","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/FileControl.js":"24","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/SetControl.js":"25","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/Order.js":"26","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/Bar.js":"27","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/TimeSeriesControl.js":"28","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Note.js":"29","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Analysis.js":"30","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Notebook.js":"31","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Preferences.js":"32","/Users/jamiewalton/Desktop/Classification_v3/src/actions/preferences.js":"33","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/ClassMenu.js":"34","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Landing.js":"35","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Classify.js":"36","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/PublicClassify.js":"37","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/HomeHeader.js":"38","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Tutorial.js":"39","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Learn.js":"40","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/CommunityReview.js":"41","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/CommunityFile.js":"42"},{"size":461,"mtime":1626905198221,"results":"43","hashOfConfig":"44"},{"size":2914,"mtime":1652829356371,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":1626233027000,"results":"46","hashOfConfig":"44"},{"size":9148,"mtime":1652838832148,"results":"47","hashOfConfig":"44"},{"size":4478,"mtime":1652909462249,"results":"48","hashOfConfig":"44"},{"size":6248,"mtime":1651358390759,"results":"49","hashOfConfig":"44"},{"size":37222,"mtime":1652891083973,"results":"50","hashOfConfig":"44"},{"size":824,"mtime":1640398801879,"results":"51","hashOfConfig":"44"},{"size":382,"mtime":1626905198223,"results":"52","hashOfConfig":"44"},{"size":195,"mtime":1642018041661,"results":"53","hashOfConfig":"44"},{"size":2889,"mtime":1651175456356,"results":"54","hashOfConfig":"44"},{"size":1759,"mtime":1652889683358,"results":"55","hashOfConfig":"44"},{"size":3245,"mtime":1651175454836,"results":"56","hashOfConfig":"44"},{"size":5215,"mtime":1652720766798,"results":"57","hashOfConfig":"44"},{"size":2302,"mtime":1642020074842,"results":"58","hashOfConfig":"44"},{"size":4622,"mtime":1640369848297,"results":"59","hashOfConfig":"44"},{"size":5957,"mtime":1652889785257,"results":"60","hashOfConfig":"44"},{"size":1500,"mtime":1652889715418,"results":"61","hashOfConfig":"44"},{"size":4178,"mtime":1652891113429,"results":"62","hashOfConfig":"44"},{"size":10445,"mtime":1651175456335,"results":"63","hashOfConfig":"44"},{"size":11279,"mtime":1651175456333,"results":"64","hashOfConfig":"44"},{"size":1214,"mtime":1640371109945,"results":"65","hashOfConfig":"44"},{"size":1217,"mtime":1640371067362,"results":"66","hashOfConfig":"44"},{"size":1352,"mtime":1640371073356,"results":"67","hashOfConfig":"44"},{"size":1231,"mtime":1640371091504,"results":"68","hashOfConfig":"44"},{"size":519,"mtime":1641361919852,"results":"69","hashOfConfig":"70"},{"size":776,"mtime":1646115016367,"results":"71","hashOfConfig":"44"},{"size":1313,"mtime":1640371101364,"results":"72","hashOfConfig":"44"},{"size":3705,"mtime":1640398940475,"results":"73","hashOfConfig":"44"},{"size":4317,"mtime":1651438459838,"results":"74","hashOfConfig":"44"},{"size":14309,"mtime":1651175456334,"results":"75","hashOfConfig":"44"},{"size":11742,"mtime":1642356203869,"results":"76","hashOfConfig":"44"},{"size":2345,"mtime":1642312368178,"results":"77","hashOfConfig":"44"},{"size":5263,"mtime":1652906548829,"results":"78","hashOfConfig":"44"},{"size":6616,"mtime":1651459158585,"results":"79","hashOfConfig":"44"},{"size":734,"mtime":1651175456327,"results":"80","hashOfConfig":"44"},{"size":28596,"mtime":1652907474881,"results":"81","hashOfConfig":"44"},{"size":4491,"mtime":1651175456336,"results":"82","hashOfConfig":"44"},{"size":5263,"mtime":1652907610142,"results":"83","hashOfConfig":"44"},{"size":3709,"mtime":1651458181869,"results":"84","hashOfConfig":"44"},{"size":8554,"mtime":1652902566646,"results":"85","hashOfConfig":"44"},{"size":15803,"mtime":1652902973481,"results":"86","hashOfConfig":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"q77g26",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"89"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"89"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"89"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"89"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"89"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"89"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k6rdz1",{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"89"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"89"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"89"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"89"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"89"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"89"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"89"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"89"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"89"},"/Users/jamiewalton/Desktop/Classification_v3/src/index.js",[],["188","189"],"/Users/jamiewalton/Desktop/Classification_v3/src/App.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reportWebVitals.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Register.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Login.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Header.js",["190"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link,  Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { logout } from \"../../actions/auth\";\nimport { goto_home, goto_learn, goto_register, goto_login, goto_classify, goto_notebook, goto_analysis } from \"../../actions/menu\";\n\nexport class Header extends Component {\n    static propTypes = {\n        auth: PropTypes.object.isRequired,\n        logout: PropTypes.func.isRequired,\n        location: PropTypes.object.isRequired,\n        goto_home: PropTypes.func.isRequired,\n        goto_learn: PropTypes.func.isRequired,\n        goto_register: PropTypes.func.isRequired,\n        goto_login: PropTypes.func.isRequired,\n        goto_classify: PropTypes.func.isRequired,\n        goto_notebook: PropTypes.func.isRequired,\n        goto_analysis: PropTypes.func.isRequired,\n    };\n\n    render() {\n        const { isAuthenticated, user } = this.props.auth;\n        var pathname;\n        {this.props.location ? pathname = this.props.location.pathname : pathname = null}\n\n        if(this.props.onClassify) {\n            return <Redirect to=\"/classify\" />\n        } else if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook/\" />\n        } else if(this.props.onAnalysis) {\n            return <Redirect to=\"/analysis\" />\n        } else if(this.props.onLearn) {\n            return <Redirect to=\"/learn\" />\n        }\n        var authLinks = (\n            <ul className=\"logoutbar\">\n                <span className='nav-hello'>\n                    <strong className='nav-hello'>\n                        { user ? `Welcome, ${user.username}` : \"\" }\n                    </strong>\n                </span>\n                <div className=\"login-navbar\">\n                    <li>\n                        <button  \n                            onClick={this.props.goto_home}\n                            className=\"login-nav-link\">\n                                Home\n                        </button>\n                    </li>\n                    <li>\n                        <button  \n                            onClick={this.props.goto_learn}\n                            className=\"login-nav-link\">\n                                Learn\n                        </button>\n                    </li>\n                    <li>\n                        <button  \n                            onClick={this.props.goto_classify}\n                            className=\"login-nav-link\">\n                                Classify\n                        </button>\n                    </li>\n                </div>\n                <li className=\"nav-item\">\n                    <button \n                        onClick={this.props.logout} \n                        to=\"/login\" \n                        className=\"logout\">Logout</button>\n                </li>\n            </ul>\n        );\n\n        if(this.props.user !== null) {\n            if(this.props.user.groups[0] === 1) {\n                authLinks = (\n                    <ul className=\"logoutbar\">\n                        <span className='nav-hello'>\n                            <strong className='nav-hello'>\n                                { user ? `Welcome, ${user.username}` : \"\" }\n                            </strong>\n                        </span>\n                        <div className=\"login-navbar\">\n                            <li>\n                                <button \n                                    onClick={this.props.goto_classify}\n                                    className=\"login-nav-link\">\n                                        Classify\n                                </button>\n                            </li>\n                            <li>\n                                <button  \n                                    onClick={this.props.goto_notebook}\n                                    className=\"login-nav-link\">\n                                        Notebook\n                                </button>\n                            </li>\n                            <li>\n                                <button  \n                                    onClick={this.props.goto_analysis}\n                                    className=\"login-nav-link\">\n                                        Analysis\n                                </button>\n                            </li>\n                            <li>\n                                <a  \n                                    href=\"http://odontella.oceandatacenter.ucsc.edu:8000/admin/\"\n                                    className=\"login-nav-link\">\n                                        Admin\n                                </a>\n                            </li>\n                        </div>\n                        <li className=\"nav-item\">\n                            <button \n                                onClick={this.props.logout} \n                                to=\"/login\" \n                                className=\"logout\">Logout</button>\n                        </li>\n                    </ul>\n                );\n            } \n        }\n\n        const guestLinks = (\n            <ul className=\"navbar\">\n                <li className=\"nav-item\">\n                    <Link to=\"/register\" className=\"nav-link\" onClick={this.props.goto_register}>Register</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link to=\"/login\" className=\"nav-link\" onClick={this.props.goto_login}>Login</Link>\n                </li>\n            </ul>\n        );\n        \n        return (\n            <header className={(pathname === '/' || pathname === '/learn') ? 'home-header' : 'general-header'}>\n                <button  \n                    onClick={this.props.goto_home}\n                    className=\"h3\">\n                        IFCB Classification\n                </button>\n                { isAuthenticated ? authLinks : guestLinks }\n            </header>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    user: state.auth.user,\n    onHome: state.menu.onHome,\n});\n\nexport default connect(mapStateToProps, { logout, goto_home, goto_learn, goto_register, goto_login, goto_classify, goto_notebook, goto_analysis })(Header);","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Annotations.js",["191"],"import React from \"react\";\nimport axios from \"axios\";\nimport Header from '../layout/Header';\nimport Preferences from './Preferences';\nimport BinNote from './BinNote';\nimport Plankton from './Plankton';\nimport ClassMenu from './ClassMenu';\nimport TimeSeriesControl from './time/TimeSeriesControl';\nimport YearControl from './time/YearControl';\nimport DayControl from './time/DayControl';\nimport Bar from './time/Bar';\nimport FileControl from './time/FileControl';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\nimport { List, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\nimport { classifyTarget, classifyRow, classifyAll, save, sync } from \"../../actions/classify\";\nimport { changeScale } from \"../../actions/preferences\";\n\nimport '../../css/classify-styles.css';\nimport loader from \"./loader.GIF\";\nimport toTop from \"../../icons/to-top.png\";\n\nclass NavButton extends React.Component {\n    render() {\n        return(\n            <div className={this.props.className} onClick={() => this.props.onClick()}>\n                <p>{this.props.text}</p>\n            </div>\n        )\n    }\n}\n\nclass Annotations extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          loading: true,\n          newFile: '',\n          newTimeSeries: '',\n          classes: [],\n          classAbbrs: [],\n          classDescriptions: [],\n          classExamples: [],\n          classNonexamples: [],\n          classPicker: 'Unclassified',\n          classMark: 'UNC',\n          planktonClickEnabled: true,\n          infoShowing: [],\n          bin: {timeseries:'', ifcb:'', year:'', day:'', file:''},\n          timeSeriesOptions: [],\n          yearOptions: [],\n          dayOptions: [],\n          barHeights: [],\n          fileOptions: [],\n          setOptions: [],\n          filledDays: [],\n          targets: [],\n          targetNumbers: [],\n          history: [],\n          rows: [],\n          scrollToIndex: undefined,\n          jumpEntry: '',\n          jumpSubmit: '',\n          initialTargetJump: '',\n          lastEditBin: '',\n          lastEditTarget: '',\n          scale: 0.056,\n          lastScroll: 0,\n          dayOption: '',\n          previous: 'Previous',\n          next: 'Next',\n      }\n      this.onTargetJumpChange = this.onTargetJumpChange.bind(this);\n      this.onTargetJumpSubmit = this.onTargetJumpSubmit.bind(this);\n  }\n\n  static propTypes = {\n    preferences: PropTypes.object,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    changeScale: PropTypes.func,\n    classifyTarget: PropTypes.func.isRequired,\n    classifyRow: PropTypes.func.isRequired,\n    classifyAll: PropTypes.func.isRequired,\n    save: PropTypes.func.isRequired,\n    isSaving: PropTypes.bool,\n    sync: PropTypes.func.isRequired,\n    isSyncing: PropTypes.bool,\n    user: PropTypes.object,\n    scaleEntry: PropTypes.number,\n    onNotebook: PropTypes.bool,\n    onAnalysis: PropTypes.bool,\n  };\n\n  closeDropdown(element) {\n    if (document.getElementById(element + '_dropdown').classList.contains('show')) {\n        document.getElementById(element + '_dropdown').classList.toggle('show');\n        document.getElementById(element + '_label').classList.toggle('hide');\n        document.getElementById(element + '_bar').classList.toggle('accommodate-dropdown');\n    }\n  }\n\n  getNewTimeSeries(option) {\n    this.closeDropdown('timeseries');\n    this.setState({ loading: true });\n    axios\n        .get('/process/timeseries/' + option + '/')\n        .then((res) => { this.setState({ \n            newTimeSeries: option,\n            newFile: res.data.bin.file\n        }) })\n        .catch((err) => console.log(err));\n  }\n  \n\n  componentDidMount() {\n    this.setState({ loading: false });\n    const urlInfo = this.props.location.pathname.split('/');\n    if(urlInfo.length<3) {\n        if(this.props.preferences.load==='edited') {\n            this.jumpToLastEdit();\n        } else {\n            this.getNewTimeSeries('SCW');\n        }\n    } else {\n        const timeseries = urlInfo[2];\n        const file = urlInfo[3];\n\n        axios\n            .get('/api/timeseries/')\n            .then((res) => {this.setState({ timeSeriesOptions: res.data.map((c) => (c.name)) })})\n            .catch((err) => console.log(err));\n\n            this.setState({\n                loading: true,\n            });\n            axios\n                .get('/classes/SCW/')\n                .then((res) => {\n                    this.setState({ \n                        classes: res.data.map((c) => (c.display_name.replace('_', ' '))),\n                        classAbbrs: res.data.map((c) => (c.abbr)),\n                        classDescriptions: res.data.map((c) => (c.description)),\n                        classExamples: res.data.map((c) => (c.examples.split(',').filter(n => n.length > 1))),\n                        classNonexamples: res.data.map((c) => (c.nonexamples.split(',').filter(n => n.length))),\n                    });\n                })\n                .catch((err) => console.log(err));\n\n        axios\n            .get('/process/file/' + timeseries + '/' + file + '/' + this.props.preferences.sort + \n                '/' + Math.round(this.props.preferences.scale * 1000) + '/' + this.props.preferences.phytoguide + '/')\n            .then((res) => {\n                this.setState({ \n                    bin: res.data.bin, \n                    yearOptions: res.data.options.year_options.reverse(),\n                    barHeights: res.data.options.day_options[0],\n                    dayOptions: res.data.options.day_options[1],\n                    fileOptions: res.data.options.file_options,\n                    setOptions: res.data.options.set_options,\n                    rows: res.data.options.rows,\n                    filledDays: res.data.options.filled_days,\n                    dayOption: res.data.bin.day,\n                })\n                axios\n                    .get('/process/targets/' + timeseries + '/' + file + '/' + this.props.preferences.sort + '/')\n                    .then((targetResponse) => {\n                        this.setState({ \n                            targets: targetResponse.data,\n                            targetNumbers: targetResponse.data.map(t => t.number),\n                            history: [JSON.stringify(targetResponse.data)],\n                            loading: false,\n                        });\n                });\n            })\n            .catch((err) => {\n                console.log(err);\n                this.setState({ bin: {timeseries:'', ifcb:'', year:'', day:'', file:'Not Found'} });\n                return;\n            });\n        }\n    \n    if (this.props.scaleEntry !== this.props.preferences.scale) {\n        this.props.changeScale(this.props.preferences.scale);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.match.url !== prevProps.match.url) {\n        this.props.history.go(0);\n    }\n\n    if(this.state.scrollToIndex !== prevState.scrollToIndex) {\n        const target = this.state.jumpSubmit;\n        if (this.state.targetNumbers.includes(this.state.jumpSubmit)) {\n            setTimeout(() => {\n                try { \n                    this.highlightTarget(target);\n                } catch {\n                    console.log();\n                }\n            }, 1);\n            setTimeout(() => {\n                try {\n                    this.unhighlightTarget(target);\n                } catch {\n                    console.log();\n                }\n            }, 5000);\n            }\n    }\n\n  }\n\n  highlightTarget(targetNum) {\n    const container = document.getElementById(targetNum);\n    const text = document.getElementById(targetNum+'-text');\n    container.style.backgroundColor = '#16609F';\n    text.style.color = '#FFFFFF';\n  }\n\n  unhighlightTarget(targetNum) {\n    const container = document.getElementById(targetNum);\n    const text = document.getElementById(targetNum+'-text');\n    container.style.backgroundColor = '#FFFFFF';\n    text.style.color = '#4E4E4E';\n  }\n\n  getNewYear(option) {\n    this.closeDropdown('year');\n    this.setState({ loading: true });\n    axios\n        .get('/process/year/' + this.state.bin.timeseries + '/' + option + '/')\n        .then((res) => { this.setState({ \n            newTimeSeries: this.state.bin.timeseries,\n            newFile: res.data.bin.file\n        }) })\n        .catch((err) => console.log(err));\n  }\n\n  handleBarHover(option) {\n      this.setState({ dayOption: this.state.dayOptions[option] });\n  }\n\n  handleBar(option) {\n    const histogram = document.getElementById('histogram_dropdown').classList;\n    if (histogram.contains('show-day')) {\n        histogram.toggle('show-day');\n    }\n\n    this.closeDropdown('day');\n    this.setState({ loading: true });\n    axios\n        .get('/process/day/' + this.state.bin.timeseries + '/' + this.state.bin.year + '/'  + option + '/')\n        .then((res) => { this.setState({ \n            newTimeSeries: this.state.bin.timeseries,\n            newFile: res.data.bin.file\n        }) })\n        .catch((err) => console.log(err));\n  }\n\n  handleNewDay(option) {\n    document.body.scrollTop = 0; // For Safari\n    document.documentElement.scrollTop = 0;\n    const newDay = (element) => element === option;\n    const dayNumber = this.state.dayOptions.findIndex(newDay);\n    this.handleBar(dayNumber);\n  }\n\n  handleNewFile(option) {\n\n    document.body.scrollTop = 0; // For Safari\n    document.documentElement.scrollTop = 0;\n    this.closeDropdown('file');\n    \n    const file = 'D' + this.state.bin.year + this.state.bin.day.slice(0,2) + this.state.bin.day.slice(3,5) + \n    option.slice(0,3) + option.slice(4,6) + option.slice(7,9);\n    \n    this.setState({ \n        newTimeSeries: this.state.bin.timeseries,\n        newFile: file\n    })\n  }\n\n  handleMouseOver(element) {\n    element.style.backgroundColor = '#16609F';\n  }\n\n  handleMouseOut(element) {\n    element.style.backgroundColor = '#079CCC';\n  }\n\n  handleMenuClick(name) {\n      const prevMenu = document.getElementById(this.state.classPicker);\n      prevMenu.style.backgroundColor = '#079CCC';\n      prevMenu.addEventListener('mouseover', this.handleMouseOver(prevMenu));\n      prevMenu.addEventListener('mouseout', this.handleMouseOut(prevMenu));\n\n      const ids = document.getElementsByClassName('id');\n      const idTexts = document.getElementsByClassName('id-text');\n      for (let i=0; i<ids.length; i++) {\n          if (ids[i].style.backgroundColor !== '#FFFFFF') {\n            ids[i].style.backgroundColor = '#FFFFFF';\n            idTexts[i].style.color = '#4E4E4E';\n        }\n      }\n\n      const nameAbbr = (element) => element === name;\n      this.setState({ \n          classPicker: name,\n          classMark: this.state.classAbbrs[this.state.classes.findIndex(nameAbbr)],\n        });\n      const menu = document.getElementById(name);\n      menu.removeEventListener('mouseout', this.handleMouseOut(menu));\n      menu.style.backgroundColor = '#16609F';\n      \n      for (const target of this.state.targets) {\n          if (target.class_name === name) {\n              const container = document.getElementById(target.number);\n              const text = document.getElementById(target.number+'-text');\n              container.style.backgroundColor = '#16609F';\n              text.style.color = '#FFFFFF';\n          }\n      }\n  }\n\n  backToTop() {\n    if(document.body.scrollTop > 0 || document.documentElement.scrollTop > 0) {\n        if(document.body.scrollTop !== 0) {\n            this.setState({ lastScroll: document.body.scrollTop });\n        } else {\n            this.setState({ lastScroll: document.documentElement.scrollTop });\n        }\n        document.body.scrollTop = 0; // For Safari\n        document.documentElement.scrollTop = 0;\n    } else {\n        document.body.scrollTop = this.state.lastScroll;\n        document.documentElement.scrollTop = this.state.lastScroll;\n    }\n  }\n\n  flipBackToTop() {\n    if (document.getElementById('to-top') !== null) {\n        if(document.body.scrollTop > 0 || document.documentElement.scrollTop > 0) {\n            document.getElementById('to-top').classList.remove('flip');\n        } else if (!document.getElementById('to-top').classList.contains('flip')) {\n            document.getElementById('to-top').classList.add('flip');\n        }\n    }\n  }\n\n  handleSelectAllClick() {\n      var targets = this.state.targets;\n      const className = this.state.classPicker;\n      const classAbbrFunc = (element) => element === this.state.classPicker;\n      const classAbbr = this.state.classAbbrs[this.state.classes.findIndex(classAbbrFunc)];\n      for (let i = 0; i < targets.length; i++) {\n          targets[i].class_name = className;\n          targets[i].class_abbr = classAbbr;\n          targets[i].editor = this.props.user.username;\n          const container = document.getElementById(targets[i].number);\n          const text = document.getElementById(targets[i].number+'-text');\n          container.style.backgroundColor = '#16609F';\n          text.style.color = '#FFFFFF';\n      }\n      this.setState({ \n          targets: targets,\n          history: this.state.history.concat([JSON.stringify(targets)])\n     });\n     this.props.save(targets, this.state.bin.timeseries, this.state.bin.file, this.props.preferences.sort);\n  }\n\n  handleUndoClick() {\n    if (this.state.history.length > 1) {\n      const newHistory = this.state.history.slice(0, this.state.history.length-1);\n      const targets = JSON.parse(newHistory[newHistory.length-1]);\n      const rows = this.state.rows;\n      this.setState({ rows: [] });\n      this.setState({\n          targets: targets,\n          history: newHistory,\n      });\n      this.setState({ rows: rows });\n      this.props.save(targets, this.state.bin.timeseries, this.state.bin.file, this.props.preferences.sort);\n    }\n  }\n\n  handleSyncClick() {\n    document.getElementById('sync').classList.toggle('syncing');\n    this.setState({ rows: [] });\n    this.props.sync(this.state.bin.timeseries, this.state.bin.year, this.state.bin.day, this.state.bin.file);\n    axios\n        .get('/process/targets/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.props.preferences.sort + '/')\n        .then((targetResponse) => {\n            this.setState({ \n                targets: targetResponse.data,\n                history: this.state.history.concat([JSON.stringify(targetResponse.data)]),\n             });\n        });\n    axios\n        .get('process/rows/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + \n            '/' + this.props.preferences.sort + '/' + Math.round(this.state.scale * 1000) + '/' +\n            this.props.preferences.phytoguide + '/')\n        .then((res) => {this.setState({ \n            rows: res.data.options.rows,\n            loading: false,\n          })})\n        .catch((err) => console.log(err));\n    document.getElementById('sync').classList.toggle('syncing');\n  }\n\n  handleHistogramClick() {\n    const histogram = document.getElementById('histogram');\n    const histogram_dropdown = document.getElementById('histogram_dropdown');\n    histogram_dropdown.classList.toggle('show-day');\n    histogram.scrollTop = histogram.scrollHeight;\n  }\n\n  handleRowClick(j) {\n    var targets = this.state.targets;\n    const row = this.state.rows[j];\n    for (var i in row) {\n        var k = row[i]\n        const classAbbr = (element) => element === this.state.classPicker;\n        targets[k].class_name = this.state.classPicker;\n        targets[k].class_abbr = this.state.classAbbrs[this.state.classes.findIndex(classAbbr)];\n        targets[k].editor = this.props.user.username;\n        const container = document.getElementById(targets[k].number);\n        const text = document.getElementById(targets[k].number+'-text');\n        container.style.backgroundColor = '#16609F';\n        text.style.color = '#FFFFFF';\n    }\n    this.setState({ \n        targets: targets,\n        history: this.state.history.concat([JSON.stringify(targets)])\n    });\n    const start = row[0]\n    const end = row[i];\n    const targetRow = targets.slice(start, end+1);\n\n    this.props.classifyRow(targetRow, this.state.bin.timeseries, this.state.bin.file, this.props.preferences.sort, start, end);\n  }\n\n  disablePlanktonClick(targetNum, bool, infoShowing) {\n    const infoClassList = document.getElementById(targetNum + '-info').classList;\n    if ((infoShowing) || (infoClassList.contains('show-info'))) {\n        if (!this.state.infoShowing.includes(targetNum)) {\n            this.setState({ infoShowing: this.state.infoShowing.concat([targetNum]) });\n        }\n        this.setState({ planktonClickEnabled: false });\n    } else {\n        const newInfoShowing = this.state.infoShowing.filter(function(item) {\n            return item !== targetNum\n        })\n        this.setState({ planktonClickEnabled: bool, infoShowing: newInfoShowing });\n    }\n  }\n\n  handlePlanktonClick(i) {\n    if (this.state.planktonClickEnabled) {\n        var targets = this.state.targets;\n        const k = targets.findIndex(target => target.number === i);\n        const classAbbr = (element) => element === this.state.classPicker;\n        targets[k].class_name = this.state.classPicker;\n        targets[k].class_abbr = this.state.classAbbrs[this.state.classes.findIndex(classAbbr)];\n        targets[k].editor = this.props.user.username;\n        const history = this.state.history;\n        this.setState({\n            history: history.concat([JSON.stringify(targets)]),\n            targets: targets,\n        });\n        const container = document.getElementById(targets[k].number);\n        const text = document.getElementById(targets[k].number+'-text');\n        container.style.backgroundColor = '#16609F';\n        text.style.color = '#FFFFFF';\n\n        this.props.classifyTarget(targets[k], this.state.bin.timeseries, this.state.bin.file, targets[k].number);\n    }\n  }\n\n  showNotes() {\n      const noteDropdown = document.getElementById(\"note-dropdown\");\n      noteDropdown.classList.toggle('show');\n      const showButton = document.getElementById(\"show-notes-button\");\n      (showButton.innerHTML === \"Show Notes\") ? showButton.innerHTML = \"Hide Notes\" : showButton.innerHTML = \"Show Notes\";\n\n  }\n\n  hideInfo() {\n    const showButton = document.getElementById(\"hide-info-button\");\n    (showButton.innerHTML === \"Hide Info\") ? showButton.innerHTML = \"Show Info\" : showButton.innerHTML = \"Hide Info\";\n    const infoButtons = document.getElementsByClassName('info');\n      for (let i = 0; i < infoButtons.length; i++) {\n          infoButtons[i].classList.toggle('hide');\n      }\n  }\n\n  handleScale(dir) {\n    const initialScale = this.state.scale\n    var  newScale = 0;\n    if (dir === 'up') {\n        newScale = initialScale + 0.01;\n    } else if  (dir === 'down') {\n        newScale = initialScale - 0.01;\n    }\n    axios\n      .get('process/rows/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + \n        '/' + this.props.preferences.sort + '/' + Math.round((newScale) * 1000) + '/' +\n        this.props.preferences.phytoguide + '/')\n      .then((rowResponse) => { this.setState({ \n          scale: newScale,\n          rows: rowResponse.data.options.rows \n        }); });\n  }\n\n  handleDownload() {\n    document.getElementById('download-src').src = 'http://odontella.oceandatacenter.ucsc.edu:8000/mat/' + this.state.bin.ifcb + '/' + this.state.bin.file + '/'\n  }\n\n  openPreferences() {\n    document.getElementById(\"overlay\").style.display = \"block\";\n    document.getElementById('preferences').classList.toggle('show-pref');\n  }\n\n  closePreferences() {\n    document.getElementById(\"overlay\").style.display = \"none\";\n    document.getElementById('preferences').classList.toggle('show-pref');\n    this.props.history.go(0);\n  }\n\n  renderPreferences() {\n      return (\n        <Preferences \n            history={this.props.history}\n            load={this.props.preferences.load}\n            scale={this.props.preferences.scale}\n            sort={this.props.preferences.sort}\n            phytoGuide={this.props.preferences.phytoguide}\n        />\n      );\n  }\n\n  renderTimeSeriesControl() {\n    return <TimeSeriesControl\n        timeseries={this.state.bin.timeseries}\n        options={this.state.timeSeriesOptions}\n        onClick={(option) => this.getNewTimeSeries(option)}\n    />;\n  }\n\n  renderYearControl() {\n    return <YearControl\n        year={this.state.bin.year}\n        options={this.state.yearOptions}\n        onClick={(option) => this.getNewYear(option)} \n    />;\n  }\n\n  renderDayControl() {\n    const options = this.state.filledDays.slice().reverse();\n    return <DayControl\n        day={this.state.bin.day} \n        options={options}\n        onClick={(option) => this.handleNewDay(option)}\n    />;\n  }\n\n  renderFileControl() {\n    return <FileControl\n        file={this.state.bin.file} \n        options={this.state.fileOptions}\n        onClick={(option) => this.handleNewFile(option)} \n    />;\n  }\n\n  renderSync() {\n    return(\n        <div className=\"round-button sync\" id=\"sync-button\" onClick={() => this.handleSyncClick()}></div>\n    );\n  }\n\n  renderDownload() {\n      return(\n        <div className=\"round-button download\" onClick={() => this.handleDownload()}>\n            <div style={{display: 'none'}}>\n               <iframe id=\"download-src\" />\n            </div>\n        </div>\n      );\n  }\n\n  renderClassMenu() {\n    return <ClassMenu \n          classes={this.state.classes}\n          descriptions={this.state.classDescriptions}\n          examples={this.state.classExamples}\n          nonexamples={this.state.classNonexamples}\n          onClick={(name) => this.handleMenuClick(name)}\n          handleSelectAllClick={() => this.handleSelectAllClick()}\n          handleUndoClick={() => this.handleUndoClick()}\n          scale={this.state.scale}\n          showPhytoGuide={this.props.preferences.phytoguide}\n          categorizeMode={false}\n          initial={0}\n      />;\n  }\n\n  renderBar(gb, i) {\n    const currentDay = (element) => element === this.state.bin.day;\n    return <Bar \n        key={i}\n        onClick={(i) => this.handleBar(i)}\n        onHover={(i) => this.handleBarHover(i)}\n        number={i}\n        height={gb}\n        day={this.state.dayOptions[i]}\n        current={this.state.dayOptions.findIndex(currentDay)}\n    />;\n  }\n\n  renderNavButton(direction) {\n    var dir;\n    var text;\n    var className;\n    (direction === 'next') ? (dir = 1) : (dir = -1);\n    (direction === 'next') ? (className = 'next-button') : (className='previous-button');\n\n    const currentFile = (element) => \n        'D' + this.state.bin.year + this.state.bin.day.slice(0,2) + this.state.bin.day.slice(3,5) + \n        element.slice(0,3) + element.slice(4,6) + element.slice(7,9) === this.state.bin.file;\n    const fileNumber = this.state.fileOptions.findIndex(currentFile);\n    if ((fileNumber === this.state.fileOptions.length-1 && dir === 1) || (fileNumber === 0 && dir === -1)) {\n        const currentDay = (element) => element === this.state.bin.day;\n        const dayNumber = this.state.filledDays.findIndex(currentDay);\n        if ((dayNumber === this.state.filledDays.length-1 && dir === 1) || (dayNumber === 0 && dir === -1)) {\n            const currentYear = (element) => element === Number(this.state.bin.year);\n            const yearOptions = this.state.yearOptions.slice().reverse()\n            const yearNumber = yearOptions.findIndex(currentYear);\n            if ((yearNumber === yearOptions.length-1 && dir === 1)) {\n                return <NavButton\n                    text={'Up to Date'}\n                    className={'up-to-date-button'}\n                />;\n            } else if (yearNumber === 0 && dir === -1) {\n                return <NavButton\n                    text={'No Previous Data'}\n                    className={'up-to-date-button'}\n                />;\n            } else {\n                text = (direction === 'next') ? ('Next Year   >') : ('<   Previous Year');\n                return <NavButton\n                    text={text}\n                    onClick={() => this.getNewYear(yearOptions[yearNumber + dir])}\n                    className={className}\n                />\n            }\n        } else {\n            text = (direction === 'next') ? ('Next Day   >') : ('<   Previous Day');\n            return <NavButton\n                text={text}\n                onClick={() => this.handleNewDay(this.state.filledDays[dayNumber + dir])}\n                className={className}\n            />\n        }\n    } else {\n        text = (direction === 'next') ? ('Next File   >') : ('<   Previous File');\n        return <NavButton\n            text={text}\n            onClick={() => this.handleNewFile(this.state.fileOptions[fileNumber + dir])}\n            className={className}\n        />\n    }\n\n    \n  }\n\n  renderLoader() {\n    return <img src={loader} alt=\"Loading targets...\" width=\"80\" loop=\"infinite\" style={{'margin':'0 0 3vw 0'}}></img>\n  }\n\n  returnToClassify() {\n    this.setState({ newFile: 'blank' });\n  }\n\n  jumpToLastEdit() {\n    axios\n        .get('/lastedit/' + this.props.user.username + '/')\n        .then((res) => this.setState({ lastEditBin: res.data.bin, lastEditTarget: res.data.options }))\n        .catch((err) => console.log(err));\n  }\n\n  renderNotFound() {\n      return(\n        <div className='main'>\n            <div className=\"page\">\n                <div className=\"content\">\n                    <div className=\"inner-content\">\n                        <h1>File Not Found</h1>\n                        <p className=\"not-found-message\">The IFCB file you're looking for doesn't exist. There may be a typo in the time series, file number, or sort code in the URL.</p>\n                        <div className=\"return-button\" onClick={() => this.returnToClassify()}>Return to Classify</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n      );\n  }\n\n  onTargetJumpChange(event) {\n    this.setState({\n        jumpEntry: event.target.value,\n    });\n  }\n\n  onTargetJumpSubmit(e) {\n    e.preventDefault();\n\n    var k = this.state.targets.findIndex(target => target.number === this.state.jumpEntry);\n    var scrollToIndex = this.state.rows.findIndex(row => row.includes(k));\n    \n    if (isNaN(scrollToIndex) || scrollToIndex<0) {\n      scrollToIndex = undefined;\n    }\n    \n    this.setState({\n        jumpSubmit: this.state.jumpEntry,\n        scrollToIndex: scrollToIndex\n    });\n  }\n\n  renderPage() {\n    const cache = new CellMeasurerCache({\n        defaultHeight: 10,\n        minHeight: 10,\n        fixedWidth: true\n      });\n\n    const jumpEntry = this.state.jumpEntry;\n    const scrollToIndex = this.state.scrollToIndex;\n\n\n    const rowRenderer = ({index, key, parent, style}) => (\n        \n        (this.state.targets.length < 1) ? <div/> : \n\n            <CellMeasurer\n                cache={cache}\n                key={key}\n                parent={parent}\n                rowIndex={index}\n            >\n            {({ measure, registerChild }) => (\n            <div ref={registerChild} key={key} style={style}>\n                <div onLoad={measure} className=\"row\">\n                    <div className=\"row-select\" \n                        alt={'Select row'} onClick={() => this.handleRowClick(index)}>\n                    </div>\n                    <div className=\"image-row\">\n                        {this.state.rows[index].map((i) => \n                            <Plankton \n                                timeseries={this.state.bin.timeseries}\n                                file={this.state.bin.file}\n                                timestamp={this.state.bin.file}\n                                id={i}\n                                targetNum={this.state.targets[i].number}\n                                class_name={this.state.targets[i].class_name}\n                                class_abbr={this.state.targets[i].class_abbr}\n                                height={this.state.targets[i].height}\n                                width={this.state.targets[i].width}\n                                scale={this.props.scaleEntry / 10}\n                                ifcb={this.state.bin.ifcb}\n                                editor={this.state.targets[i].editor}\n                                date={this.state.targets[i].date}\n                                onClick={(i) => this.handlePlanktonClick(i)}\n                                infoChange={(targetNum, bool, infoShowing) => this.disablePlanktonClick(targetNum, bool, infoShowing)}\n                                infoShowing={this.state.infoShowing}\n                                public={false}\n                                categorizeMode={false}\n                                noteOption={true}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n            )}\n            </CellMeasurer>\n        )\n      return(\n        \n        <div className='main'>\n            <div className=\"page\">\n            <div className=\"content\">\n                <div className=\"overlay\" id=\"overlay\" onClick={() => this.closePreferences()}></div>\n                {this.renderPreferences()}\n                    <div className=\"inner-content\">\n                        <h4 onClick={() => this.jumpToLastEdit()}>Last Edit →</h4>\n                        <h1>Manual Classifications</h1>\n                        <div className=\"time-controls\">\n                            {this.renderTimeSeriesControl()}\n                            {this.renderYearControl()}\n                            {this.renderDayControl()}\n                            {this.renderFileControl()}\n                            <div className=\"target-jump-container\">\n                                <form onSubmit={this.onTargetJumpSubmit}>\n                                    <input\n                                        type=\"textarea\" \n                                        className=\"target-jump-input\"\n                                        onChange={this.onTargetJumpChange}\n                                        value={jumpEntry || ''}\n                                        placeholder=\"Target...\"\n                                    />\n                                </form>\n                                <p className=\"time-label jump-label\" id='targetjump_label'>Jump to Target</p>\n                            </div>\n                            <div className=\"show-notes-button\" id=\"show-notes-button\" onClick={() => this.showNotes()}>Show Notes</div>\n                            <div className=\"hide-info-button\" id=\"hide-info-button\" onClick={() => this.hideInfo()}>Hide Info</div>\n                            {this.renderSync()}\n                            {this.renderDownload()}\n                            <div className=\"round-button histogram\" onClick={() => this.handleHistogramClick()}></div>\n                            <div className=\"preferences-button\" onClick={() => this.openPreferences()}></div>\n                        </div>\n                        <div className='histogram-dropdown-container' id='histogram_dropdown'>\n                            <div className=\"histogram-dropdown\" id='histogram'>\n                                <div className=\"timeline\">\n                                    <div className=\"bars\">\n                                        {this.state.barHeights.map((gb, i) => this.renderBar(gb, i))}\n                                    </div>\n                                    <div className=\"axis\">\n                                        <p className=\"month\">Jan</p>\n                                        <p className=\"month\">Feb</p>\n                                        <p className=\"month\">Mar</p>\n                                        <p className=\"month\">Apr</p>\n                                        <p className=\"month\">May</p>\n                                        <p className=\"month\">Jun</p>\n                                        <p className=\"month\">Jul</p>\n                                        <p className=\"month\">Aug</p>\n                                        <p className=\"month\">Sep</p>\n                                        <p className=\"month\">Oct</p>\n                                        <p className=\"month\">Nov</p>\n                                        <p className=\"month\">Dec</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='day-option'>\n                                <p className='day-option-text'>{this.state.dayOption}</p>\n                            </div>\n                        </div>\n                        <div className=\"note-container\" id=\"note-dropdown\">\n                            {((this.state.bin.timeseries) === '' || this.state.bin.file === '') ? \n                            <div></div> :\n                            <BinNote \n                                timeseries={this.state.bin.timeseries}\n                                ifcb={this.state.bin.ifcb}\n                                file={this.state.bin.file}\n                                type='bin'\n                                image='None'\n                            /> }\n                        </div>\n                        <div className=\"annotations\">\n                            {this.renderClassMenu()}\n                            <div className=\"image-grid\" id=\"image-grid\">\n                                {\n                                (this.state.loading || this.props.isSaving) ? this.renderLoader() : console.log()\n                                }\n                                <List\n                                    height={800} // fix later\n                                    rowCount={this.state.rows.length}\n                                    rowHeight={cache.rowHeight}\n                                    rowRenderer={rowRenderer}\n                                    scrollToAlignment=\"start\"\n                                    scrollToIndex={scrollToIndex}\n                                    width={document.documentElement.clientWidth*0.72}\n                                />\n                                <img src={toTop} alt=\"Back to Top\" className=\"to-top\" id=\"to-top\" onClick={() => this.backToTop()}></img>\n                            </div>\n                        </div>\n                        <div className='navigation-container'>\n                            <div style={{'display':'flex'}}>\n                                {this.renderNavButton('previous')}\n                                {this.renderNavButton('next')}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n      );\n  }\n\n  render() {\n    \n    if(this.props.onHome) {\n        return <Redirect to=\"/\" />\n    }\n\n    if(this.props.onLearn) {\n        return <Redirect to=\"/learn\" />\n    }\n    \n    if(this.props.onNotebook) {\n        return <Redirect to=\"/notebook/\" />\n    }\n\n    if(this.props.onAnalysis) {\n        return <Redirect to=\"/analysis/\" />\n    }\n\n    if(this.state.newFile.length !== 0) {\n        if (this.state.newFile === 'blank') {\n            return <Redirect to='/classify' />\n        }\n        const newURL = '/classify/' + this.state.newTimeSeries + '/' + this.state.newFile;\n        return <Redirect to={newURL} />\n    }\n\n    if (this.state.rows !== [] && this.state.initialTargetJump === '' && !this.state.loading) {\n        const urlInfo = this.props.location.pathname.split('/');\n        if (urlInfo.length > 4) {\n            const targetNum = urlInfo[4];\n            var k = this.state.targets.findIndex(target => target.number === targetNum);\n            var scrollToIndex = this.state.rows.findIndex(row => row.includes(k));\n\n            if (isNaN(scrollToIndex) || scrollToIndex<0) {\n                scrollToIndex = undefined;\n            }\n\n            this.setState({\n                jumpEntry: targetNum,\n                jumpSubmit: targetNum,\n                initialTargetJump: targetNum,\n                scrollToIndex: scrollToIndex\n            });\n        }\n    }\n\n    if (typeof(this.state.lastEditBin) !== 'string') {\n        this.setState({ loading: true });\n        const bin = this.state.lastEditBin;\n        return <Redirect to={\"/classify/\" + bin.timeseries + '/' + bin.file + '/' + this.state.lastEditTarget.target} />\n    }\n\n    return(\n        <div className='body'>\n        <title>{'IFCB | ' + this.state.bin.file}</title>\n        <Header />\n        {(this.state.bin.file === 'Not Found') ? this.renderNotFound() : this.renderPage()}\n        \n        <script>{document.addEventListener(\"scroll\", this.flipBackToTop)}</script>\n    </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => ({\n    preferences: state.auth.preferences,\n    isSaving: state.classify.isSaving,\n    user: state.auth.user,\n    scaleEntry: state.classify.scaleEntry,\n    onHome: state.menu.onHome,\n    onLearn: state.menu.onLearn,\n    onNotebook: state.menu.onNotebook,\n    onAnalysis: state.menu.onAnalysis,\n });\n\nexport default connect(mapStateToProps, { classifyTarget, classifyRow, classifyAll, save, sync, changeScale })(Annotations);","/Users/jamiewalton/Desktop/Classification_v3/src/components/common/PrivateRoute.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/store.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/index.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/auth.js",["192","193","194"],"import {\n    USER_LOADED,\n    USER_LOADING,\n    PREFERENCES_LOADED,\n    PREFERENCES_ERROR,\n    LOCATION_SAVED,\n    AUTH_ERROR,\n    LOGIN_ATTEMPT,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n} from '../actions/types';\n\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    loginFailed: false,\n    registerFailed: false,\n    isLoading: false,\n    user: null,\n    preferences: {\"id\": 0, \"user\": 0, \"sort\": \"AZ\", \"scale\": \"0.560\", \"load\": \"recent\", \"phytoguide\": true},\n    location: window.location.pathname,\n    locationCount: 1,\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            }\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload.user,\n                preferences: action.payload.preferences,\n            };\n        case PREFERENCES_LOADED:\n            return {\n                ...state,\n                preferences: action.payload\n            };\n        case LOCATION_SAVED:\n            return {\n                ...state,\n                location: action.payload\n            }\n        case LOGIN_ATTEMPT:\n            return {\n                ...state,\n                ...action.payload,\n                loginFailed: false\n            }\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n            localStorage.setItem('token', action.payload.token);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false\n            }\n        case PREFERENCES_ERROR:\n            console.log('Failed to load user preferences.');\n        case AUTH_ERROR:\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false,\n                registerFailed: true,\n            }\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false\n            }\n        case LOGIN_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false,\n                loginFailed: true,\n            }\n            \n        default:\n            return state;\n    }\n}\n\n","/Users/jamiewalton/Desktop/Classification_v3/src/actions/types.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/auth.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/classify.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/classify.js",["195"],"import {\n    SAVE_PROGRESS,\n    SAVE_SUCCESS,\n    SYNC_PROGRESS,\n    SYNC_SUCCESS,\n    SCALE_CHANGED,\n    NOTES_CHANGED,\n    NOTES_RECORDED,\n    NOTEBOOK_FILTERED,\n    REPLY_RESOLVED,\n    REPLY_OPEN,\n    TARGETS_BASIC_SEARCHED,\n    BINS_BASIC_SEARCHED\n} from '../actions/types';\n\nconst initialState = {\n    isSaving: false,\n    isSyncing: false,\n    scaleEntry: 0.560,\n    noteChangeFlag: true,\n    replyChangeFlag: false,\n    notes: [],\n    targetSearchResults: [[]],\n    binsSearchResults: [[]],\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case SAVE_PROGRESS:\n            return {\n                ...state,\n                isSaving: true\n            }\n        case SAVE_SUCCESS:\n            return {\n                ...state,\n                isSaving: false\n            }\n        case SYNC_PROGRESS:\n            return {\n                ...state,\n                isSyncing: true\n            }\n        case SYNC_SUCCESS:\n            return {\n                ...state,\n                isSyncing: false\n            }\n        case SCALE_CHANGED:\n            return {\n                ...state,\n                scaleEntry: action.payload\n            }\n        case NOTES_CHANGED:\n            return {\n                ...state,\n                noteChangeFlag: true\n            }\n        case NOTES_RECORDED:\n            return {\n                ...state,\n                noteChangeFlag: false\n            }\n        case REPLY_OPEN:\n            return {\n                ...state,\n                noteChangeFlag: true\n            }\n        case REPLY_RESOLVED:\n            return {\n                ...state,\n                noteChangeFlag: false\n            }\n        case NOTEBOOK_FILTERED:\n            return {\n                ...state,\n                notes: action.payload\n            }\n        case TARGETS_BASIC_SEARCHED:\n            return {\n                ...state,\n                targetSearchResults: ((typeof(action.payload) === Array) ? (action.payload) : ([action.payload]))\n            }\n        case BINS_BASIC_SEARCHED:\n            return {\n                ...state,\n                binsSearchResults: ((typeof(action.payload) === Array) ? (action.payload) : ([action.payload]))\n            }\n        default:\n            return state;\n    }\n}","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/BinNote.js",["196","197"],"import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport { PropTypes } from \"prop-types\";\n\nimport { addBinNote, sendNotesChange, receiveNotesChange, receiveReplyOpen } from \"../../actions/classify\";\nimport Note from \"../features/Note\";\n\nexport class BinNote extends React.Component {\n    state = {\n        entry: '',\n        parents: [],\n        notes: [],\n    }\n    \n    static propTypes = {\n        addBinNote: PropTypes.func,\n        receiveNotesChange: PropTypes.func,\n        noteChangeFlag: PropTypes.bool,\n        receiveReplyOpen: PropTypes.func,\n        replyChangeFlag: PropTypes.bool,\n        user: PropTypes.object,\n    };\n\n    getNotes() {\n        axios\n            .get('/process/note/' + this.props.timeseries + '/' + this.props.file + '/' + this.props.image + '/')\n            .then((res) => {\n                this.setState({ notes: res.data });\n            })\n            .catch((err) => console.log(err));\n    }\n\n    renderNote(note, count) {\n        if (note.parent !== null) {\n            var reply = note;\n            var iters = 0;\n            while (reply.parent !== null) {\n                var parentFunc = (element) => element.id === reply.parent;\n                var reply = this.state.notes[this.state.notes.findIndex(parentFunc)];\n                iters = iters + 1;\n            }\n            if (count!==iters) {\n                return;\n            }\n        }\n        return(\n            <div>\n                <Note\n                    note={note}\n                    user={this.props.user.username}\n                    timeseries={this.props.timeseries}\n                    ifcb={this.props.ifcb}\n                    file={this.props.file}\n                    type={this.props.type}\n                    image={this.props.image}\n                />\n                <div className=\"reply\" style={{margin: \"0 0 0 \" + String((count+1)) + \"vw\"}}>\n                {(note.replies.length !== 0) ?\n                    note.replies.map((reply) => this.renderNote(reply, count+1)) :\n                    <div></div>\n                }\n                </div>\n            </div>\n        \n        );\n    }\n\n    componentDidMount() {\n        this.getNotes();\n    }\n\n    componentDidUpdate() {\n        if(this.props.noteChangeFlag) {\n            this.props.receiveNotesChange();\n            this.getNotes();\n        }\n        if(this.props.replyChangeFlag) {\n            this.props.receiveReplyOpen();\n            this.getNotes();\n        }\n    }\n\n    onChange = e => this.setState({ entry: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addBinNote(this.props.user.username, this.state.entry, null, [], this.props.timeseries, this.props.ifcb, this.props.file, this.props.image);\n        this.props.sendNotesChange();\n        this.getNotes();\n        const noteForm = document.getElementById(\"note-form\");\n        noteForm.reset()\n    }\n    \n    render() {\n        return(\n            <div className={this.props.type + \"-notes-content\"}>\n                {(this.props.type === 'bin') ? <div className=\"refresh\" onClick={() => this.getNotes()}></div> : <div></div>}\n                <div id=\"note-container\">\n                    {this.state.notes.map((note) => this.renderNote(note, 0))}\n                </div>\n                    <div className={this.props.type + \"-note-form\"}>\n                        <form onSubmit={this.onSubmit} id=\"note-form\">\n                            <div className={this.props.type + \"-new-note\"}>\n                            <input\n                                type=\"textarea\"\n                                rows=\"10\"\n                                className={this.props.type + \"-note-input\"}\n                                name={this.props.type + \"-note-entry\"}\n                                id=\"note-entry\"\n                                onChange={this.onChange}\n                                value={this.entry}\n                            />\n                            <button type=\"submit\" className={this.props.type + \"-note-submit\"}></button>\n                            </div>\n                            {(this.state.notes === []) ? <p className=\"bin-note-label\">Add a Note</p> : <div></div>}\n                        </form>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    noteChangeFlag: state.classify.noteChangeFlag,\n    replyChangeFlag: state.classify.replyChangeFlag,\n    user: state.auth.user\n });\n\nexport default connect(mapStateToProps, {addBinNote, sendNotesChange, receiveNotesChange, receiveReplyOpen})(BinNote);","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/menu.js",["198"],"import {\n    CLASSIFY_PAGE,\n    NOTEBOOK_PAGE,\n    ANALYSIS_PAGE,\n    CLASSDOWNLOAD_PAGE,\n    SEARCH_PAGE,\n    HOME_PAGE,\n    LEARN_PAGE,\n    REGISTER_PAGE,\n    LOGIN_PAGE,\n    COMMUNITYREVIEW_PAGE,\n    COMMUNITYFILE_PAGE\n} from '../actions/types';\n\nconst initialState = {\n    onHome: false,\n    onLearn: false,\n    onRegister: false,\n    onLogin: false,\n    onClassify: false,\n    onNotebook: false,\n    onAnalysis: false,\n    onClassDownload: false,\n    onSearch: false,\n    onCommunityReview: false,\n    onCommunityFile: false,\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case HOME_PAGE:\n            return {\n                ...state,\n                onHome: true,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        case LEARN_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: true,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        case REGISTER_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: true,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        case LOGIN_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: true,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        case CLASSIFY_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: true,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        case NOTEBOOK_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: true,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n        \n        case ANALYSIS_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: true,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n\n        case CLASSDOWNLOAD_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: true,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n\n        case SEARCH_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: true,\n                onCommunityReview: false,\n                onCommunityFile: false,\n            }\n\n        case COMMUNITYREVIEW_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: true,\n                onCommunityFile: false,\n            }\n\n        case COMMUNITYFILE_PAGE:\n            return {\n                ...state,\n                onHome: false,\n                onLearn: false,\n                onRegister: false,\n                onLogin: false,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n                onCommunityReview: false,\n                onCommunityFile: true,\n            }\n            \n        default:\n            return state;\n    }\n}\n\n","/Users/jamiewalton/Desktop/Classification_v3/src/actions/menu.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Plankton.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Search.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/features/ClassDownload.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/YearControl.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/DayControl.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/FileControl.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/SetControl.js",[],["199","200"],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/Order.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/Bar.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/time/TimeSeriesControl.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Note.js",["201","202","203","204","205"],"import React from \"react\";\nimport { connect } from 'react-redux';\nimport { PropTypes } from \"prop-types\";\n\nimport { addBinNote, deleteBinNote, flagBinNote, sendNotesChange, sendReplyOpen } from \"../../actions/classify\";\n\nclass Note extends React.Component {\n    state = {\n        entry: '',\n    }\n\n    static propTypes = {\n        addBinNote: PropTypes.func,\n        deleteBinNote: PropTypes.func,\n        sendNotesChange: PropTypes.func,\n        sendReplyOpenChange: PropTypes.func,\n        notes: PropTypes.array,\n    };\n    \n    reply(id) {\n        document.getElementById('reply-form' + id).classList.toggle('show');\n        this.props.sendReplyOpen();\n    }\n\n    delete(id) {\n        this.props.deleteBinNote(id);\n        this.props.sendNotesChange();\n    }\n\n    flag(id) {\n        this.props.flagBinNote(id);\n        this.props.sendNotesChange();\n    }\n\n    getFlagButton(isFlagged) {\n        if (isFlagged) {\n            return 'Unflag'\n        } else {\n            return 'Flag'\n        }\n    }\n\n    onChange = e => this.setState({ entry: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addBinNote(this.props.user, this.state.entry, this.props.note.id, [], this.props.timeseries, this.props.ifcb, this.props.file, this.props.image);\n        this.props.sendNotesChange();\n        const replyForm = document.getElementById(\"note-form\");\n        replyForm.reset()\n        document.getElementById('reply-form' + this.props.note.id).classList.toggle('show');\n    }\n    \n    render() {\n        const { id, author, date, entry, parent, replies, timeseries, file, image, flag } = this.props.note;\n        return (\n            <div className={this.props.type + \"-note\"} id={id}>\n                <div className={this.props.type + \"-note-header\"}>\n                    <p className=\"note-author\">{author}</p>\n                    <p className=\"note-date\">{date.slice(0,10)}</p>\n                    {(flag) ? <div className=\"flag-small\"></div> : <div></div>}\n                </div>\n                <p className={this.props.type + \"-note-entry\"}>{entry}</p>\n                {(this.props.type === 'bin') ? \n                    <button className=\"reply-button\" onClick={() => this.reply(id)}>Reply</button> :\n                    <div></div>}\n                {(author === this.props.user) ? \n                    <button className=\"reply-button\" onClick={() => this.delete(id)}>Delete</button> :\n                    <div></div>}\n                {(author === this.props.user) ? \n                    <button className=\"reply-button\" onClick={() => this.flag(id)}>{this.getFlagButton(flag)}</button> :\n                    <div></div>}\n                <div className=\"reply-form\" id={\"reply-form\" + id}>\n                        <form onSubmit={this.onSubmit} id=\"note-form\">\n                            <div className=\"new-note\">\n                            <input\n                                type=\"textarea\"\n                                rows=\"10\"\n                                className=\"note-input\"\n                                name=\"note-entry\"\n                                id=\"note-entry\"\n                                onChange={this.onChange}\n                                value={this.entry}\n                            />\n                            <button type=\"submit\" className={this.props.type + \"-note-submit\"}></button>\n                            </div>\n                        </form>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    notes: state.classify.notes,\n });\n\nexport default connect(mapStateToProps, {addBinNote, deleteBinNote, flagBinNote, sendNotesChange, sendReplyOpen})(Note);","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Analysis.js",["206"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport Header from '../layout/Header';\nimport { goto_classdownload, goto_search, goto_communityreview } from \"../../actions/menu\";\nimport '../../css/analysis-styles.css';\n\nclass AnalysisOption extends Component {\n    render() {\n        return(\n            <div className=\"analysis-option-container\">\n                <h2 className=\"analysis-option-heading\">{this.props.heading}</h2>\n                <p className=\"analysis-option-description\">{this.props.description}</p>\n                <div className=\"analysis-option-button\" onClick={this.props.handleClick}>Start</div>\n            </div>\n        );\n    }\n}\n\nclass Analysis extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            analysisOptions: [\n                {heading: 'Search', description: \"Find any image or collection of images with the help of classification filtering, file look-up, and more.\"},\n                {heading: 'Download by Class', description: \"Download a ZIP file containing all, or a desired subset of, images classified as a particular species.\"},\n                {heading: 'Analyze Community Data', description: \"Review community scientist classifications and download their datasets.\"},\n            ],\n            bin: '',\n            target: '',\n        }\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        onClassify: PropTypes.bool,\n        onNotebook: PropTypes.bool,\n        onClassDownload: PropTypes.bool,\n        onSearch: PropTypes.bool,\n        goto_classdownload: PropTypes.func,\n        goto_search: PropTypes.func,\n    }\n\n    renderAnalysisOption(option) {\n        var handleClick\n        if (option.heading === 'Search') {\n            handleClick = this.props.goto_search;\n        } else if (option.heading === 'Download by Class') {\n            handleClick = this.props.goto_classdownload;\n        } else if (option.heading === 'Analyze Community Data') {\n            handleClick = this.props.goto_communityreview;\n        }\n        return (\n            <AnalysisOption\n                key={option.heading}\n                heading={option.heading}\n                description={option.description}\n                handleClick={handleClick}\n            />\n        );\n    }\n\n    render() {\n        if(this.props.onClassify) {\n            return <Redirect to=\"/classify\" />\n        }\n\n        if(this.props.onHome) {\n            return <Redirect to=\"/\" />\n        }\n    \n        if(this.props.onLearn) {\n            return <Redirect to=\"/learn\" />\n        }\n\n        if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook/\" />\n        }\n\n        if(this.props.onClassDownload) {\n            return <Redirect to=\"/analysis/classdownload\" />\n        }\n\n        if(this.props.onSearch) {\n            return <Redirect to=\"/analysis/search\" />\n        }\n\n        if(this.props.onCommunityReview) {\n            return <Redirect to=\"/analysis/communityreview\" />\n        }\n\n        return(\n            <div>\n                <Header />\n                <title>IFCB | Analysis</title>\n                <div className='main'>\n                    <div className=\"page\">\n                        <div>\n                            <div className=\"notebook-heading\">\n                                <h1 className=\"notebook-header\">Analysis</h1>\n                            </div>\n                            <div className=\"analysis-options\">\n                                {this.state.analysisOptions.map((option) => (this.renderAnalysisOption(option)))}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    onClassify: state.menu.onClassify,\n    onHome: state.menu.onHome,\n    onLearn: state.menu.onLearn,\n    onNotebook: state.menu.onNotebook,\n    onClassDownload: state.menu.onClassDownload,\n    onSearch: state.menu.onSearch,\n    onCommunityReview: state.menu.onCommunityReview,\n });\n\nexport default connect(mapStateToProps, { goto_classdownload, goto_search, goto_communityreview })(Analysis);","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/Notebook.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Preferences.js",["207","208","209","210","211"],"import React from \"react\";\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { changeScale, setLoadPreference, setScalePreference, setSortPreference, setPhytoGuidePreference } from \"../../actions/preferences\";\nimport '../../css/classify-styles.css';\n\nclass Preferences extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            recentChecked: true,\n            phytoGuideChecked: true,\n            sortChecked: {AZ: true, ZA: false, LS: false, SL: false},\n            scaleEntry: 560,\n        }\n        this.onSortChange = this.onSortChange.bind(this);\n        this.onScaleChange = this.onScaleChange.bind(this);\n        this.onLoadChange = this.onLoadChange.bind(this);\n        this.onPhytoGuideChange = this.onPhytoGuideChange.bind(this);\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        changeScale: PropTypes.func,\n        setLoadPreference: PropTypes.func,\n        setScalePreference: PropTypes.func,\n        setSortPreference: PropTypes.func,\n        setPhytoGuidePreference: PropTypes.func,\n    }\n\n    componentDidMount() {\n        switch (this.props.sort) {\n            case 'AZ':\n                this.setState({ \n                    sortChecked: {AZ: true, ZA: false, LS: false, SL: false},\n                });\n                break\n            case 'ZA':\n                this.setState({ \n                    sortChecked: {AZ: false, ZA: true, LS: false, SL: false},\n                });\n                break\n            case 'LS':\n                this.setState({ \n                    sortChecked: {AZ: false, ZA: false, LS: true, SL: false},\n                });\n                break\n            case 'SL':\n                this.setState({ \n                    sortChecked: {AZ: false, ZA: false, LS: false, SL: true},\n                });\n        }\n        this.setState({\n            recentChecked: this.props.load==='recent',\n            phytoGuideChecked: this.props.phytoGuide===true,\n            scaleEntry: this.props.scale,\n        });\n    }\n    \n    close() {\n        document.getElementById(\"overlay\").style.display = \"none\";\n        document.getElementById('preferences').classList.toggle('show-pref');\n        this.props.history.go(0);\n    }\n\n    onScaleChange(e) {\n        this.setState({ scaleEntry: e.target.value });\n        this.props.changeScale(e.target.value);\n        this.props.setScalePreference(e.target.value, this.props.user.username);\n    }\n\n    onSortChange(e) {\n        switch (e.target.value){\n            case 'AZ':\n                this.setState({ sortChecked: {AZ: true, ZA: false, LS: false, SL: false} });\n                this.props.setSortPreference({AZ: true, ZA: false, LS: false, SL: false}, this.props.user.username);\n                break\n            case 'ZA':\n                this.setState({ sortChecked: {AZ: false, ZA: true, LS: false, SL: false} });\n                this.props.setSortPreference({AZ: false, ZA: true, LS: false, SL: false}, this.props.user.username);\n                break\n            case 'LS':\n                this.setState({ sortChecked: {AZ: false, ZA: false, LS: true, SL: false} });\n                this.props.setSortPreference({AZ: false, ZA: false, LS: true, SL: false}, this.props.user.username);\n                break\n            case 'SL':\n                this.setState({ sortChecked: {AZ: false, ZA: false, LS: false, SL: true} });\n                this.props.setSortPreference({AZ: false, ZA: false, LS: false, SL: true}, this.props.user.username);\n        }\n    } \n    \n    onLoadChange(e) {\n        switch (e.target.value){\n            case 'recent':\n                this.setState({ recentChecked: true });\n                break\n            case 'edited':\n                this.setState({ recentChecked: false })\n        }\n        this.props.setLoadPreference(e.target.value, this.props.user.username);\n    }\n\n    onPhytoGuideChange(e) {\n        switch (e.target.value){\n            case 'True':\n                this.setState({ phytoGuideChecked: true });\n                break\n            case 'False':\n                this.setState({ phytoGuideChecked: false })\n        }\n        this.props.setPhytoGuidePreference(e.target.value, this.props.user.username);\n    }\n    \n    render() {\n\n        return(\n            <div className=\"preferences-window\" id=\"preferences\">\n                <div className=\"window-close\" onClick={() => this.close()}></div>\n                <h1 className=\"preferences-heading\">Preferences</h1>\n                <div className=\"preferences-container\">\n                    <div className=\"left-pref-col\">\n                        <div className=\"pref-category\">\n                            <p className=\"pref-subheading\">On Website Load</p>\n                            <div className=\"pref-form\">\n                                <div style={{'display':'flex'}}>\n                                    <input \n                                        type=\"radio\" \n                                        name=\"load\" \n                                        id=\"recent\" \n                                        className=\"pref-radio\" \n                                        value=\"recent\"\n                                        checked={this.state.recentChecked}\n                                        onChange={this.onLoadChange}\n                                    />\n                                    <label className=\"pref-radio-label\" for=\"recent\">Load most recent file</label>\n                                </div>\n                                <div style={{'display':'flex'}}>\n                                    <input \n                                        type=\"radio\" \n                                        name=\"load\" \n                                        id=\"edited\" \n                                        className=\"pref-radio\" \n                                        value=\"edited\"\n                                        checked={!this.state.recentChecked}\n                                        onChange={this.onLoadChange}\n                                    />\n                                    <label className=\"pref-radio-label\" for=\"edited\">Load last edited file</label>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"pref-category\" style={{'margin':'2vw 0 0 0'}}>\n                            <p className=\"pref-subheading\">Show PhytoGuide</p>\n                            <div className=\"pref-form\">\n                                <input \n                                    type=\"radio\" \n                                    name=\"phytoguide\" \n                                    id=\"showPhytoGuide\" \n                                    className=\"pref-radio\" \n                                    value=\"True\"\n                                    checked={this.state.phytoGuideChecked}\n                                    onChange={this.onPhytoGuideChange}\n                                />\n                                <label className=\"pref-radio-label\" for=\"recent\">Show guide</label>\n                                </div>\n                                <div style={{'display':'flex'}}>\n                                    <input \n                                        type=\"radio\" \n                                        name=\"phytoguide\" \n                                        id=\"showPhytoGuide\" \n                                        className=\"pref-radio\" \n                                        value=\"False\"\n                                        checked={!this.state.phytoGuideChecked}\n                                        onChange={this.onPhytoGuideChange}\n                                    />\n                                    <label className=\"pref-radio-label\" for=\"edited\">Do not show guide</label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"right-pref-col\">\n                        <div className=\"pref-category\">\n                            <p className=\"pref-subheading\">Sort Targets</p>\n                            <div className=\"pref-form\">\n                                <input \n                                    type=\"radio\" \n                                    name=\"sort\" \n                                    id=\"AZ\" \n                                    className=\"pref-radio\" \n                                    value=\"AZ\"\n                                    checked={this.state.sortChecked.AZ}\n                                    onChange={this.onSortChange}\n                                />\n                                <label className=\"pref-radio-label\" for=\"recent\">By class, from A to Z</label><br></br>\n                                <input \n                                    type=\"radio\" \n                                    name=\"sort\" \n                                    id=\"ZA\" \n                                    className=\"pref-radio\" \n                                    value=\"ZA\"\n                                    checked={this.state.sortChecked.ZA}\n                                    onChange={this.onSortChange} \n                                />\n                                <label className=\"pref-radio-label\" for=\"edited\">By class, from Z to A</label><br></br>\n                                <input \n                                    type=\"radio\" \n                                    name=\"sort\" \n                                    id=\"LS\" \n                                    className=\"pref-radio\" \n                                    value=\"LS\"\n                                    checked={this.state.sortChecked.LS}\n                                    onChange={this.onSortChange}\n                                />\n                                <label className=\"pref-radio-label\" for=\"edited\">By size, from largest to smallest</label><br></br>\n                                <input \n                                    type=\"radio\" \n                                    name=\"sort\" \n                                    id=\"SL\" \n                                    className=\"pref-radio\" \n                                    value=\"SL\"\n                                    checked={this.state.sortChecked.SL}\n                                    onChange={this.onSortChange}\n                                />\n                                <label className=\"pref-radio-label\" for=\"edited\">By size, from smallest to largest</label><br></br>\n                            </div>\n                        </div>\n                        <div className=\"pref-category\" style={{'margin':'2vw 0 0 0'}}>\n                            <p className=\"pref-subheading\">Image Scale</p>\n                            <div className=\"pref-form\">\n                                <input \n                                    type=\"number\" \n                                    name=\"scale\" \n                                    id=\"scale\" \n                                    value={this.state.scaleEntry}\n                                    className=\"target-jump-container scale\"\n                                    step='0.01'\n                                    onChange={this.onScaleChange}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n});\n\nexport default connect(mapStateToProps, {changeScale, setLoadPreference, setScalePreference, setSortPreference, setPhytoGuidePreference})(Preferences)","/Users/jamiewalton/Desktop/Classification_v3/src/actions/preferences.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/ClassMenu.js",["212","213","214","215"],"import React from \"react\";\nimport '../../css/classify-styles.css';\nimport correctIcon from \"../../icons/green-check.png\";\nimport incorrectIcon from \"../../icons/red-x.png\";\n\n\nclass Micrometer extends React.Component {\n    render() {\n        return(\n            <div className=\"drag-box\">\n                <div className=\"micrometer-block\"\n                style={{width: (String(34*this.props.scale) + 'vw')}}></div>\n                <p className=\"micrometer-text\">10µm</p>\n            </div>\n        );\n    }\n}\n\nclass ClassMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            indexSelected: this.props.initial,\n            indexHovered: this.props.initial,\n        }\n    }\n    \n    handleMenuClick(x, i) {\n        this.setState({ \n            indexSelected: i,\n            indexHovered: i,\n         });\n        this.props.onClick(x);\n    }\n\n    handleMouseOver(i) {\n        this.setState({ indexHovered: i });\n    }\n\n    handleMouseOut() {\n        this.setState({ indexHovered: this.state.indexSelected });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.initial !== prevProps.initial) {\n            this.setState({ \n                indexSelected: this.props.initial,\n                indexHovered: this.props.initial,\n             });\n        }\n      }\n  \n    render() {\n      const classes = this.props.categorizeMode ? this.props.categories : this.props.classes\n      const descriptions = this.props.categorizeMode ? this.props.descriptions.filter((n,i) => this.props.categoryIndices.includes(i)) : this.props.descriptions\n      const examples = this.props.categorizeMode ? this.props.examples.filter((n,i) => this.props.categoryIndices.includes(i)) : this.props.examples\n      const nonexamples = this.props.categorizeMode ? this.props.nonexamples.filter((n,i) => this.props.categoryIndices.includes(i)) : this.props.nonexamples\n      \n      const options = classes.map((x, i) => \n      <li key={x}><button id={x} className=\"classmenu-button\"\n            onClick={() => this.handleMenuClick(x, i)} \n            onMouseEnter={() => this.handleMouseOver(i)} \n            onMouseLeave={() => this.handleMouseOut(i)}>{x}</button></li>);\n\n\n      return(\n      <div className=\"sidebar\">\n      <div style={{'display':'flex'}}>\n            <div className={this.props.showPhytoGuide ? \"class-menu with-guide\" : \"class-menu\"}>\n                <div className=\"control-box\">\n                    <div className=\"annotation-control\" onClick={() =>  this.props.handleSelectAllClick()}>\n                        <p className=\"control-text\">Select All</p>\n                    </div>\n                    <div className=\"annotation-control\" onClick={() =>  this.props.handleUndoClick()}>\n                        <p className=\"control-text\">Undo</p>\n                    </div>\n                </div>\n                <ul className=\"class-menu-options\">{options}</ul>\n            </div>\n            {this.props.showPhytoGuide ? \n                    <div className=\"phyto-guide\">\n                        <p className=\"phyto-guide-heading\">{classes[this.state.indexHovered]}</p>\n                        <p className=\"phyto-guide-description\">{descriptions[this.state.indexHovered]}</p>\n                        <div className=\"yes-examples\">\n                            { (examples.length > 0) ?\n                                examples[this.state.indexHovered].map((image) => (\n                                    <div>\n                                        <img src={correctIcon} className='phyto-guide-icon'></img>\n                                        <img src={image} className=\"image\" \n                                            alt={classes[this.state.indexHovered] + ' example'}\n                                            className=\"phyto-guide-image\"\n                                            >\n                                        </img>\n                                    </div>\n                                )) : <div></div>\n                            }\n                        </div>\n                        <div className=\"no-examples\">\n                            { (nonexamples.length) > 0 ? ((nonexamples[this.state.indexHovered].length) ? <p className=\"phyto-guide-nonexample-heading\">Don't confuse with:</p> : <div></div>) : <div></div> }\n                            { (nonexamples.length) > 0 ? \n                                nonexamples[this.state.indexHovered].map((image) => (\n                                    <div>\n                                        <img src={incorrectIcon} className='phyto-guide-icon'></img>\n                                        <img src={image} className=\"image\" \n                                            alt={classes[this.state.indexHovered] + ' non-example'}\n                                            className=\"phyto-guide-image\"\n                                            >\n                                        </img>\n                                    </div>\n                                )) : <div></div>\n                            }\n                        </div>\n                    </div> : <div></div>}\n      </div>\n      <Micrometer scale={this.props.scale}/>\n      </div>\n      );\n  }\n}\n\nexport default ClassMenu","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Landing.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Classify.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/PublicClassify.js",["216"],"import React from \"react\";\nimport axios from \"axios\";\nimport Header from '../layout/Header';\nimport Plankton from './Plankton';\nimport Tutorial from './Tutorial';\nimport ClassMenu from './ClassMenu';\nimport DatePicker from \"react-datepicker\";\nimport '../../css/datepicker.css';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\nimport { List, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\nimport { classifyPublicTarget, classifyRow, classifyAll, save, sync } from \"../../actions/classify\";\nimport { changeScale } from \"../../actions/preferences\";\n\nimport '../../css/classify-styles.css';\nimport loader from \"./loader.GIF\";\n\nclass NavButton extends React.Component {\n    render() {\n        return(\n            <div className={this.props.className} onClick={() => this.props.onClick()}>\n                <p>{this.props.text}</p>\n            </div>\n        )\n    }\n}\n\nclass PublicClassify extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          loading: true,\n          newFile: '',\n          newTimeSeries: '',\n          classes: [],\n          classAbbrs: [],\n          classDescriptions: [],\n          classExamples: [],\n          classNonexamples: [],\n          categories: [],\n          categoryIndices: [],\n          classPicker: 'Unclassified',\n          classMark: 'UNC',\n          initialClassIndex: 0,\n          planktonClickEnabled: true,\n          categorizeMode: true,\n          emptyCategories: false,\n          infoShowing: [],\n          bin: {timeseries:'', ifcb:'', year:'', day:'', file:''},\n          timeSeriesOptions: [],\n          timeSeriesNames: [],\n          yearOptions: [],\n          dayOptions: [],\n          dateOptions: [],\n          fileOptions: [],\n          filledDays: [],\n          targets: [],\n          targetSet: [],\n          targetNumbers: [],\n          history: [],\n          rows: [],\n          scrollToIndex: undefined,\n          jumpEntry: '',\n          jumpSubmit: '',\n          initialTargetJump: '',\n          lastEditBin: '',\n          lastEditTarget: '',\n          scale: 0.056,\n          lastScroll: 0,\n          dayOption: '',\n          categorizationComplete: false,\n          identificationComplete: false,\n      }\n  }\n\n  static propTypes = {\n    preferences: PropTypes.object,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    changeScale: PropTypes.func,\n    classifyTarget: PropTypes.func.isRequired,\n    classifyRow: PropTypes.func.isRequired,\n    classifyAll: PropTypes.func.isRequired,\n    save: PropTypes.func.isRequired,\n    isSaving: PropTypes.bool,\n    sync: PropTypes.func.isRequired,\n    isSyncing: PropTypes.bool,\n    user: PropTypes.object,\n    scaleEntry: PropTypes.number,\n    onNotebook: PropTypes.bool,\n    onAnalysis: PropTypes.bool,\n  };\n\n  getNewTimeSeries(option) {\n    this.setState({ loading: true });\n\n    var k = this.state.timeSeriesOptions.findIndex(t => t === String(option));\n    const timeseries = this.state.timeSeriesNames[k];\n\n    axios\n        .get('/process/public/timeseries/' + timeseries + '/')\n        .then((res) => { this.setState({ \n            newTimeSeries: timeseries,\n            newFile: res.data.bin.file\n        }) })\n        .catch((err) => console.log(err));\n  }\n  \n\n  componentDidMount() {\n    const urlInfo = this.props.location.pathname.split('/')\n\n    axios\n        .get('/api/timeseries/')\n        .then((res) => {\n            this.setState({ \n                timeSeriesOptions: res.data.map((c) => (c.public_name)),\n                timeSeriesNames: res.data.map((c) => (c.name)),\n                });\n            if(urlInfo.length<3) {\n                this.getNewTimeSeries('Santa Cruz Wharf');\n            }\n            })\n        .catch((err) => console.log(err));\n\n    const timeseries = urlInfo[2];\n    const file = urlInfo[3];\n    this.setState({ loading: true });\n\n    axios\n        .get('/classes/SCW/')\n        .then((res) => {\n            this.setState({ \n                classes: res.data.map((c) => (c.display_name.replace('_', ' '))),\n                classAbbrs: res.data.map((c) => (c.abbr)),\n                classDescriptions: res.data.map((c) => (c.description)),\n                classExamples: res.data.map((c) => (c.examples.split(',').filter(n => n.length > 1))),\n                classNonexamples: res.data.map((c) => (c.nonexamples.split(',').filter(n => n.length))),\n            });\n        })\n        .catch((err) => console.log(err));\n\n    if (file !== undefined) {\n        axios\n            .get('/process/public/file/' + timeseries + '/' + file + '/' + this.props.user.username + '/')\n            .then((res) => {\n                this.setState({ \n                    bin: res.data.bin, \n                    yearOptions: res.data.options.year_options.reverse(),\n                    dayOptions: res.data.options.day_options[1],\n                    dateOptions: res.data.options.filled_days.map((date) => (new Date(date))),\n                    fileOptions: res.data.options.file_options,\n                    filledDays: res.data.options.filled_days,\n                    dayOption: res.data.bin.day,\n                })\n                axios\n                    .get('/process/public/targets/' + timeseries + '/' + file + '/' + this.props.user.username + '/')\n                    .then((targetResponse) => {\n                        const initialClass = targetResponse.data[0].class_name;\n                        const initialAbbr = targetResponse.data[0].class_abbr;\n                        var categories = [...new Set(targetResponse.data.map(t => t.class_name))].filter(n => n!=='Unclassified');\n                        this.setState({ \n                            targets: targetResponse.data,\n                            targetSet: targetResponse.data.filter(t => t.class_name === initialClass),\n                            targetNumbers: targetResponse.data.map(t => t.number),\n                            classPicker: initialClass,\n                            classMark: initialAbbr,\n                            initialClassIndex: this.state.classes.findIndex(c => c === initialClass),\n                            history: [JSON.stringify(targetResponse.data)],\n                            categories: categories,\n                            categoryIndices: this.state.classes.map((n,i) => (i)).filter((i) => categories.includes(this.state.classes[i])),\n                            loading: false,\n                        });\n                        if (initialClass === 'Unclassified') {\n                            this.setState({ emptyCategories: true });\n                        }\n                        axios\n                            .get('/process/public/rows/' + timeseries + '/' + file + '/' + initialAbbr + '/' + this.props.user.username + '/')\n                            .then((rowResponse) => {\n                                this.setState({ \n                                    rows: rowResponse.data.options.rows, \n                                    initialClassIndex: this.state.categories.findIndex(c => c === initialClass), \n                                });\n                            });\n                });\n            })\n            .catch((err) => {\n                console.log(err);\n                this.setState({ bin: {timeseries:'', ifcb:'', year:'', day:'', file:'Not Found'} });\n                return;\n            });\n        axios\n            .get('/complete/public/status/' + timeseries + '/' + file + '/' + this.props.user.username + '/')\n            .then((completionStatusResponse) => {\n                this.setState({\n                    categorizationComplete: completionStatusResponse.data.options.categorized,\n                    identificationComplete: completionStatusResponse.data.options.identified,\n                });\n            })\n            .catch((err) => {\n                console.log(err);\n                return;\n            });\n    }\n\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.url !== prevProps.match.url) {\n        this.props.history.go(0);\n    }\n  }\n\n  highlightTarget(targetNum) {\n    const container = document.getElementById(targetNum);\n    const text = document.getElementById(targetNum+'-text');\n    container.style.backgroundColor = '#16609F';\n    text.style.color = '#FFFFFF';\n  }\n\n  unhighlightTarget(targetNum) {\n    const container = document.getElementById(targetNum);\n    const text = document.getElementById(targetNum+'-text');\n    container.style.backgroundColor = '#FFFFFF';\n    text.style.color = '#4E4E4E';\n  }\n\n  getNewYear(option) {\n    this.setState({ loading: true });\n    axios\n        .get('/process/year/' + this.state.bin.timeseries + '/' + option + '/')\n        .then((res) => { this.setState({ \n            newTimeSeries: this.state.bin.timeseries,\n            newFile: res.data.bin.file\n        }) })\n        .catch((err) => console.log(err));\n  }\n\n  handleBarHover(option) {\n      this.setState({ dayOption: this.state.dayOptions[option] });\n  }\n\n  handleBar(option) {\n    const histogram = document.getElementById('histogram_dropdown').classList;\n    if (histogram.contains('show-day')) {\n        histogram.toggle('show-day');\n    }\n\n    this.setState({ loading: true });\n    axios\n        .get('/process/day/' + this.state.bin.timeseries + '/' + this.state.bin.year + '/'  + option + '/')\n        .then((res) => { this.setState({ \n            newTimeSeries: this.state.bin.timeseries,\n            newFile: res.data.bin.file\n        }) })\n        .catch((err) => console.log(err));\n  }\n\n  onDateChange(day) {\n    axios\n        .get('/process/public/day/' + this.state.bin.timeseries + '/' + String(day).split(' ').slice(1,4).join('') + '/')\n        .then((res) => { this.setState({ \n            newTimeSeries: this.state.bin.timeseries,\n            newFile: res.data.bin.file\n        }) })\n        .catch((err) => console.log(err));\n  }\n\n  handleNewFile(option) {\n\n    document.body.scrollTop = 0; // For Safari\n    document.documentElement.scrollTop = 0;\n    \n    const file = 'D' + this.state.bin.year + this.state.bin.day.slice(0,2) + this.state.bin.day.slice(3,5) + \n    option.slice(0,3) + option.slice(4,6) + option.slice(7,9);\n    \n    this.setState({ \n        newTimeSeries: this.state.bin.timeseries,\n        newFile: file\n    })\n  }\n\n  handleMouseOver(element) {\n    element.style.backgroundColor = '#16609F';\n  }\n\n  handleMouseOut(element) {\n    element.style.backgroundColor = '#079CCC';\n  }\n\n  handleMenuClick(name) {\n      const prevMenu = document.getElementById(this.state.classPicker);\n      if (prevMenu.classList.contains('select-menu')) {\n        prevMenu.classList.remove('select-menu');\n      }\n\n      const nameAbbr = (element) => element === name;\n      const classMark = this.state.classAbbrs[this.state.classes.findIndex(nameAbbr)]\n      this.setState({ \n          classPicker: name,\n          classMark: classMark,\n        });\n      if (this.state.categorizeMode) {\n        this.setState({ \n            rows: [],\n            targetSet: this.state.targets.filter(t => t.class_name === name) \n        });\n        axios\n            .get('/process/public/rows/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + classMark + '/' + this.props.user.username + '/')\n            .then((rowResponse) => {\n                this.setState({ rows: rowResponse.data.options.rows });\n            });\n      }\n      const menu = document.getElementById(name);\n      menu.classList.add('select-menu');\n  }\n\n  handleUndoClick() {\n    if (this.state.history.length > 1) {\n      const newHistory = this.state.history.slice(0, this.state.history.length-1);\n      const targets = JSON.parse(newHistory[newHistory.length-1]);\n      const rows = this.state.rows;\n      this.setState({ rows: [] });\n      this.setState({\n          targets: targets,\n          history: newHistory,\n      });\n      this.setState({ rows: rows });\n      this.props.save(targets, this.state.bin.timeseries, this.state.bin.file, this.props.preferences.sort);\n    }\n  }\n\n  handleHistogramClick() {\n    const histogram = document.getElementById('histogram');\n    const histogram_dropdown = document.getElementById('histogram_dropdown');\n    histogram_dropdown.classList.toggle('show-day');\n    histogram.scrollTop = histogram.scrollHeight;\n  }\n\n  handleModeToggle() {\n    this.setState({ loading: true, rows: [] });\n    document.getElementById('mode-left').classList.toggle('mode-selected');\n    document.getElementById('mode-right').classList.toggle('mode-selected');\n    document.getElementById('mode-left-text').classList.toggle('mode-text-selected');\n    document.getElementById('mode-right-text').classList.toggle('mode-text-selected');\n    axios\n        .get('/process/public/targets/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.props.user.username + '/')\n        .then((targetResponse) => {\n            const initialClass = targetResponse.data[0].class_name;\n            const initialAbbr = targetResponse.data[0].class_abbr;\n            var categories = [...new Set(targetResponse.data.map(t => t.class_name))].filter(n => n!=='Unclassified');\n            var classAbbr;\n            var classPicker;\n            var classMark; \n            this.state.categorizeMode ? classAbbr = 'UNCL' : classAbbr = initialAbbr;\n            this.state.categorizeMode ? classPicker = this.state.classes[0]: classPicker = initialClass;\n            this.state.categorizeMode ? classMark = this.state.classAbbrs[0]: classMark = initialAbbr;\n            this.setState({ \n                targets: targetResponse.data,\n                targetSet: targetResponse.data.filter(t => t.class_abbr === classAbbr),\n                targetNumbers: targetResponse.data.map(t => t.number),\n                classPicker: classPicker,\n                classMark: classMark,\n                history: [JSON.stringify(targetResponse.data)],\n                categories: categories,\n                categoryIndices: this.state.classes.map((n,i) => (i)).filter((i) => categories.includes(this.state.classes[i])),\n                categorizeMode: !this.state.categorizeMode,\n            });\n            if (initialClass === 'Unclassified') {\n                this.setState({ emptyCategories: true });\n            } // add catch for no UNCL\n            axios\n                .get('/process/public/rows/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + classAbbr + '/' + this.props.user.username + '/')\n                .then((rowResponse) => {\n                    this.setState({ \n                        rows: rowResponse.data.options.rows,\n                        // initialClassIndex: this.state.categories.findIndex(c => c === initialClass), \n                        loading: false,\n                     });\n                });\n    });\n  }\n\n  handlePlanktonClick(i) {\n    if (this.state.planktonClickEnabled) {\n        var targets = this.state.targets;\n        const k = targets.findIndex(target => target.number === i);\n        const classAbbr = (element) => element === this.state.classPicker;\n        targets[k].class_name = this.state.classPicker;\n        targets[k].class_abbr = this.state.classAbbrs[this.state.classes.findIndex(classAbbr)];\n        targets[k].editor = this.props.user.username;\n        const history = this.state.history;\n        this.setState({\n            history: history.concat([JSON.stringify(targets)]),\n            targets: targets,\n        });\n        const container = document.getElementById(targets[k].number);\n        const text = document.getElementById(targets[k].number+'-text');\n        container.style.backgroundColor = '#16609F';\n        text.style.color = '#FFFFFF';\n\n        this.props.classifyPublicTarget(targets[k], this.state.bin.timeseries, this.state.bin.file, targets[k].number, this.props.user.username);\n    }\n  }\n\n  handlePlanktonCheck(i) {\n    if (this.state.planktonClickEnabled) {\n        var targets = this.state.targets;\n        const k = targets.findIndex(target => target.number === i);\n        const classAbbr = (element) => element === this.state.classPicker;\n        if (targets[k].class_name === this.state.classPicker) {\n            targets[k].class_name = 'Unclassified';\n            targets[k].class_abbr = 'UNCL';\n        } else {\n            targets[k].class_name = this.state.classPicker;\n            targets[k].class_abbr = this.state.classAbbrs[this.state.classes.findIndex(classAbbr)];\n        }\n        targets[k].editor = this.props.user.username;\n        const history = this.state.history;\n        this.setState({\n            history: history.concat([JSON.stringify(targets)]),\n            targets: targets,\n        });\n        const check = document.getElementById(targets[k].number+'-check');\n        check.classList.toggle('checked');\n\n        this.props.classifyPublicTarget(targets[k], this.state.bin.timeseries, this.state.bin.file, targets[k].number, this.props.user.username);\n    }\n  }\n\n  handleDoneClick() {\n    var url\n    if(this.state.categorizeMode) {\n        url = '/complete/public/categorization/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.props.user.username + '/';\n        this.setState({ categorizationComplete: !this.state.categorizationComplete });\n    } else {\n        url = '/complete/public/identification/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.props.user.username + '/';\n        this.setState({ identfiicationComplete: !this.state.identfiicationComplete });\n    }\n    axios.get(url).catch((err) => console.log(err));\n\n  }\n\n  renderClassMenu() {\n    return <ClassMenu \n          classes={this.state.classes}\n          categories={this.state.categories}\n          descriptions={this.state.classDescriptions}\n          examples={this.state.classExamples}\n          nonexamples={this.state.classNonexamples}\n          initial={this.state.initialClassIndex}\n          onClick={(name) => this.handleMenuClick(name)}\n          handleSelectAllClick={() => this.handleSelectAllClick()}\n          handleUndoClick={() => this.handleUndoClick()}\n          scale={this.state.scale}\n          showPhytoGuide={this.props.preferences.phytoguide}\n          categorizeMode={this.state.categorizeMode}\n          categoryIndices={this.state.categoryIndices}\n      />;\n  }\n\n  renderModeToggle() {\n      return( \n        <div className=\"mode-toggle\">\n            <div className=\"mode-left mode-selected\" id=\"mode-left\" onClick={() => this.handleModeToggle()}>\n                <p className=\"mode-text mode-text-selected\" id=\"mode-left-text\">Categorize</p>\n            </div>\n            <div className=\"mode-right\" id=\"mode-right\" onClick={() => this.handleModeToggle()}>\n                <p className=\"mode-text\" id=\"mode-right-text\">Identify</p>\n            </div>\n        </div>\n      );\n  }\n\n  renderDoneButton() {\n    var message\n    var appearance\n\n    if(this.state.categorizeMode) {\n        if(this.state.categorizationComplete) {\n            message = 'Categorization Complete';\n            appearance = 'complete-done-button';\n        } else {\n            message = 'Finished Categorizing?';\n            appearance = 'incomplete-done-button';\n        }\n    } else {\n        if(this.state.identificationComplete) {\n            message = 'Identification Complete';\n            appearance = 'complete-done-button';\n        } else {\n            message = 'Finished Identifying?';\n            appearance = 'incomplete-done-button';\n        }\n    }\n    \n    return(\n        <div className={\"done-button \" + appearance} onClick={() => this.handleDoneClick()}>\n            <div className={\"done-check\"}></div>\n            <p className=\"done-text\">{message}</p>\n        </div>\n      )\n  }\n\n  renderLoader() {\n    return <img src={loader} alt=\"Loading targets...\" width=\"80\" loop=\"infinite\" style={{'margin':'0 0 3vw 0'}}></img>\n  }\n\n  returnToClassify() {\n    this.setState({ newFile: 'blank' });\n  }\n\n  renderNotFound() {\n      return(\n        <div className='main'>\n            <div className=\"page\">\n                <div className=\"content\">\n                    <div className=\"inner-content\">\n                        <h1>File Not Found</h1>\n                        <p className=\"not-found-message\">The IFCB file you're looking for doesn't exist. There may be a typo in the time series, file number, or sort code in the URL.</p>\n                        <div className=\"return-button\" onClick={() => this.returnToClassify()}>Return to Classify</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n      );\n  }\n\n  renderPage() {\n    const cache = new CellMeasurerCache({\n        defaultHeight: 10,\n        minHeight: 10,\n        fixedWidth: true\n      });\n\n    const scrollToIndex = this.state.scrollToIndex;\n\n    const selectedDate = (this.state.bin.day === '') ? new Date() : new Date(this.state.bin.day + '-' + this.state.bin.year);\n\n    const rowRenderer = ({index, key, parent, style}) => (\n        \n        (this.state.targets.length < 1) ? <div/> : \n\n            <CellMeasurer\n                cache={cache}\n                key={key}\n                parent={parent}\n                rowIndex={index}\n            >\n            {({ measure, registerChild }) => (\n            <div ref={registerChild} key={key} style={style}>\n                <div onLoad={measure} className=\"row\">\n                    <div className=\"image-row\">\n                        {this.state.rows[index].map((i) => \n                            <Plankton \n                                timeseries={this.state.bin.timeseries}\n                                file={this.state.bin.file}\n                                timestamp={this.state.bin.file}\n                                id={i}\n                                targetNum={this.state.targetSet[i].number}\n                                class_name={this.state.targetSet[i].class_name}\n                                class_abbr={this.state.targetSet[i].class_abbr}\n                                height={this.state.targetSet[i].height}\n                                width={this.state.targetSet[i].width}\n                                scale={this.props.scaleEntry / 10}\n                                ifcb={this.state.bin.ifcb}\n                                editor={'jamiewalton'}\n                                date={this.state.targetSet[i].date}\n                                onClick={(i) => this.handlePlanktonClick(i)}\n                                onCheck={(i) => this.handlePlanktonCheck(i)}\n                                infoChange={(targetNum, bool, infoShowing) => this.disablePlanktonClick(targetNum, bool, infoShowing)}\n                                infoShowing={this.state.infoShowing}\n                                public={true}\n                                categorizeMode={this.state.categorizeMode}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n            )}\n            </CellMeasurer>\n        )\n      return(\n        \n        <div className='main'>\n            <div className=\"page\">\n            <div className=\"content\">\n                    <div className=\"inner-content\">\n                        <h1>Classify Phytoplankton</h1>\n                        <div style={{'display':'flex'}}>\n                            <div style={{'display':'flex'}}>\n                                <div className=\"public-time-controls\">\n                                    <DatePicker \n                                        onChange={(day) => this.onDateChange(day)}\n                                        value={selectedDate}\n                                        selected={selectedDate}\n                                        includeDates={this.state.dateOptions}\n                                        placeholderText={this.state.bin.day + '-' + this.state.bin.year}\n                                        className='datepicker'\n                                        inline\n                                    />\n                                    <div className=\"timeseries-box\">\n                                        <p className=\"tutorial-title sample-title\">Sample</p>\n                                        {this.state.timeSeriesOptions.filter(n => n!=='').map((option, i) => \n                                            <li key={i} className=\"tutorial-button\" onClick={() => this.getNewTimeSeries(option)}>{option}</li>)}\n                                    </div>\n                                </div>\n                            </div>\n                            <Tutorial/>\n                        </div>\n                        <div className=\"annotations\">\n                            {this.renderClassMenu()}\n                            <div>\n                                <div className=\"status-buttons\">\n                                    {this.renderModeToggle()}\n                                    {this.renderDoneButton()}\n                                </div>\n                                <div className=\"image-grid remove-top-margin\" id=\"image-grid\">\n                                    {\n                                    (this.state.loading || this.props.isSaving) ? this.renderLoader() : console.log()\n                                    }\n                                    {\n                                    (this.state.emptyCategories && this.state.categorizeMode) ? <p className=\"empty-categories-text\">Nothing to categorize! Switch over to Identify mode to start classifying.</p> :\n                                        <List\n                                            height={800} // fix later\n                                            rowCount={this.state.rows.length}\n                                            rowHeight={cache.rowHeight}\n                                            rowRenderer={rowRenderer}\n                                            scrollToAlignment=\"start\"\n                                            scrollToIndex={scrollToIndex}\n                                            width={document.documentElement.clientWidth*0.72}\n                                        />\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n      );\n  }\n\n  render() {\n\n    if(this.props.onHome) {\n        return <Redirect to=\"/\" />\n    }\n\n    if(this.props.onLearn) {\n        return <Redirect to=\"/learn\" />\n    }\n    \n    if(this.props.onNotebook) {\n        return <Redirect to=\"/notebook/\" />\n    }\n\n    if(this.props.onAnalysis) {\n        return <Redirect to=\"/analysis/\" />\n    }\n\n    if(this.state.newFile.length !== 0) {\n        if (this.state.newFile === 'blank') {\n            return <Redirect to='/classify' />\n        }\n        const newURL = '/classify/' + this.state.newTimeSeries + '/' + this.state.newFile;\n        return <Redirect to={newURL} />\n    }\n\n    if (this.state.rows !== [] && this.state.initialTargetJump === '' && !this.state.loading) {\n        const urlInfo = this.props.location.pathname.split('/');\n        if (urlInfo.length > 4) {\n            const targetNum = urlInfo[4];\n            var k = this.state.targets.findIndex(target => target.number === targetNum);\n            var scrollToIndex = this.state.rows.findIndex(row => row.includes(k));\n\n            if (isNaN(scrollToIndex) || scrollToIndex<0) {\n                scrollToIndex = undefined;\n            }\n\n            this.setState({\n                jumpEntry: targetNum,\n                jumpSubmit: targetNum,\n                initialTargetJump: targetNum,\n                scrollToIndex: scrollToIndex\n            });\n        }\n    }\n\n    return(\n        <div className='body'>\n        <title>{'IFCB | ' + this.state.bin.file}</title>\n        <Header />\n        {(this.state.bin.file === 'Not Found') ? this.renderNotFound() : this.renderPage()}\n        \n        <script>{document.addEventListener(\"scroll\", this.flipBackToTop)}</script>\n    </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => ({\n    preferences: state.auth.preferences,\n    isSaving: state.classify.isSaving,\n    user: state.auth.user,\n    scaleEntry: state.classify.scaleEntry,\n    onHome: state.menu.onHome,\n    onLearn: state.menu.onLearn,\n    onNotebook: state.menu.onNotebook,\n    onAnalysis: state.menu.onAnalysis,\n });\n\nexport default connect(mapStateToProps, { classifyPublicTarget, classifyRow, classifyAll, save, sync, changeScale })(PublicClassify);","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/HomeHeader.js",["217"],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Tutorial.js",["218"],"import React from \"react\";\nimport { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from \"react-dom\";\nimport akashiwo from \"../../assets/akashiwo-character.png\";\nimport \"../../css/classify-styles.css\";\n\nclass Tutorial extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toc: [\n                {id: 0, title: \"Welcome!\", text: \"Let's get started classifying phytoplankton.\", buttons: null},\n                {id: 1, title: \"Select a sample\", text: \"Each IFCB collects samples throughout the day full of phytoplankton images it captured. Right now, you’re seeing the latest sample. If you would like to load a new one, use the menu on the left to select a day and an IFCB location.\", buttons: null},\n                {id: 2, title: \"The AutoClassifier\", text: \"Each sample is run through an auto-clasification algorithm, which identifies each phytoplankton image. But the algorithm isn’t always right: that’s where you come in!\", buttons: null},\n                {id: 3, title: \"Start categorizing\", text: \"Your first task is to find the images that the AutoClassifier misidentified. Use the menu on the left to navigate to the classifications. In each one, click on the images that don’t belong, using the guide to determine what qualifies and what doesn’t.\", buttons: null},\n                {id: 4, title: \"What if you're unsure?\", text: \"If you’re ever torn on whether an image belongs or not, just leave it in its original category. But also remember that our scientists check over your classifications before using them, so you will never ruin data if you misidentify an image.\", buttons: null},\n                {id: 5, title: \"Switch modes\", text: \"When you finish all the categories, hit the 'Finished Categorizing' button so we know the file is complete. If you’re up for a challenge, switch over to identify mode using the toggle bar above the images.\", buttons: null},\n                {id: 6, title: \"Start identifying\", text: \"Now you’ll see all the images that you marked as misidentified or that the AutoClassifier couldn’t figure out in the first place. Select a classification in the left menu, then click on all the images that match it. Make sure to hit the finish button when you're done!\", buttons: null},\n                {id: 7, title: \"Try another method\", text: \"You can also work the other way: choose an image, then hover over the classifications in the left menu until you find the one that matches it. Select on the classification, then click on the image to classify it. Either method is a good way to identify phytoplankton: find which one works best for you!\", buttons: null},\n                {id: 8, title: \"What if you're unsure?\", text: \"Again, if you’re not sure where an image belongs, just leave it unclassified. If you’re finding that identify mode is too challenging, you can always stick to just categorizing.\", buttons: null},\n                {id: 9, title: 'Congrats!', text: \"You’re ready to dive in. When you finish a sample, load up a new one! You can always revisit this tutorial if you need any help.\", buttons: null},\n            ],\n            tracks: [\n                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n            ],\n            slide: 0,\n            track: 0,\n        }\n    }\n\n    back() {\n        const i = this.state.tracks[this.state.track].findIndex(slide => slide === this.state.slide);\n        const slide = this.state.tracks[this.state.track][i-1];\n        this.setState({ slide: slide });\n    }\n\n    next() {\n        const i = this.state.tracks[this.state.track].findIndex(slide => slide === this.state.slide);\n        const slide = this.state.tracks[this.state.track][i+1];\n        this.setState({ slide: slide });\n    }\n\n    handleButton(track) {\n        const prevTrack = this.state.track;\n        this.setState({ track: track });\n        const i = this.state.tracks[prevTrack].findIndex(slide => slide === this.state.slide);\n        const slide = this.state.tracks[track][i+1];\n        this.setState({ slide: slide });\n    }\n\n    render() {\n\n        const slide = this.state.toc[this.state.slide];\n\n        return (\n            <div className=\"public-time-controls\">\n                <img src={akashiwo} alt=\"Drawing of a celebratory phytoplankton\" className=\"akashiwo-character\"></img>\n                <div id={\"tutorial-1\"} className=\"visible-tutorial-text\">\n                    <p className=\"tutorial-title\">{slide.title}</p>\n                    <p className=\"tutorial-body\">{slide.text}</p>\n                    {slide.buttons ? <div className='tutorial-button-container'>{slide.buttons.map((button) => <div key={button.track} className='tutorial-button' onClick={() => this.handleButton(button.track)}>{button.text}</div>)}</div> : <div/>}\n                    <div className='tutorial-nav-container'>\n                        {this.state.slide > 0 ? <p className=\"tutorial-back\" onClick={() => this.back()}>{'< Back'}</p> : <div/>}\n                        {this.state.slide < this.state.toc.length - 1 && !slide.buttons ? <p className=\"tutorial-next\" onClick={() => this.next()}>{'Next >'}</p> : <div/>}\n                    </div>\n                </div>\n            </div>\n        );\n\n\n    }\n}\n\nexport default (Tutorial);","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Learn.js",["219","220","221","222"],"import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../layout/Header';\nimport ceratium from \"../../assets/ceratium.jpg\";\nimport ditylum from \"../../assets/ditylum-gradient.png\";\nimport chaetoceros from \"../../assets/chaetoceros-gradient.png\";\nimport lithodesmium from \"../../assets/lithodesmium-gradient.png\";\n\nexport class Landing extends Component {\n    // TODO: Make hero into img and add alt text\n    // media query smaller version when width is less than 950px\n\n    static propTypes = {\n        onHome: PropTypes.bool,\n        onClassify: PropTypes.bool,\n        onLearn: PropTypes.bool,\n        onNotebook: PropTypes.bool,\n        onAnalysis: PropTypes.bool,\n      };\n\n    render() {\n\n        if(this.props.onClassify) {\n            return <Redirect to=\"/classify\" />\n        }\n        if(this.props.onHome) {\n            return <Redirect to=\"/\" />\n        }\n        if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook/\" />\n        }\n        if(this.props.onAnalysis) {\n            return <Redirect to=\"/analysis/\" />\n        }\n\n        return (\n            <main>\n                <Header location={this.props.location} />\n                <div style={{'background-color':'#7bb224'}}>\n                    <div className='learn-hero'>\n                        <h2 className='learn-title'>Learn</h2>\n                    </div>\n                </div>\n                <div className='main'>\n                    <div className='learn-page'>\n                        <h3 className='learn-heading'>Phytoplankton</h3>\n                        <br/>\n                        <p className='learn-body'>Phytoplankton are tiny, single-celled organisms that drift with the ocean currents. Like plants, many species of phytoplankton convert sunlight to energy through photosynthesis, though some types can consume prey.</p>\n                        <h3 className='learn-heading'>IFCBs</h3>\n                        <br/>\n                        <p className='learn-body'>The phytoplankton images on this site are taken by an Imaging FlowCytobot, or IFCB. An IFCB is an automated microscope with a built-in camera. It collects a small sample of seawater, which flows through a tiny tube inside the instrument. Images of the phytoplankton cells are taken as they pass one at a time in front of the camera. <br/><br/> The IFCB is a valuable tool because it runs by itself, around the clock, for weeks at a time. The IFCB collects a seawater sample every 20 minutes, and can produce as many as 20,000 images an hour! All of the images are sent over the internet to a computer.</p>\n                        <h3 className='learn-heading'>The Lab</h3>\n                        <br/>\n                        <p className='learn-body'>In the Kudela Lab at UC Santa Cruz, we use microscopes, satellites, robots, and good old fashioned chemistry to understand phytoplankton. Phytoplankton are the unsung heroes of our planet, providing food for everything from krill to whales, and producing much of the oxygen in our atmosphere. The dynamic and ever-changing phytoplankton community is made up of thousands of different species, and we use an array of tools to examine what kinds are in the water at different times and under different conditions. This</p>\n                    </div>\n                </div>\n            </main>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    onClassify: state.menu.onClassify,\n    onHome: state.menu.onHome,\n    onNotebook: state.menu.onNotebook,\n    onAnalysis: state.menu.onAnalysis,\n });\n\n export default connect(mapStateToProps)(Landing);","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/CommunityReview.js",["223","224","225"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect, Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport Header from '../layout/Header';\nimport { Grid, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\nimport { goto_communityfile } from \"../../actions/menu\";\nimport '../../css/analysis-styles.css';\nimport '../../css/notebook-styles.css';\nimport '../../css/classify-styles.css';\nimport loader from \"../annotations/loader.GIF\";\n\n\nclass CommunityFilePreview extends Component {\n    getDate(file) {\n        const timestamp = file.slice(1,5) + '-' + file.slice(5,7) + '-' + file.slice(7,12) + ':' + \n            file.slice(12,14) + ':' + file.slice(14,16);\n        const date = new Date(timestamp);\n        const dateString = date.toDateString().slice(4,10) + ',' + date.toDateString().slice(10,);\n        \n        return dateString\n    }\n\n    handleDownload() {\n        document.getElementById('download-src').src = 'http://odontella.oceandatacenter.ucsc.edu:8000/mat/' + this.props.ifcb + '/' + this.props.file + '/'\n    }\n\n    render() {\n        var appearance = ''\n        if(this.props.categorized) {\n            appearance = 'community-file-preview-categorized';\n        } else if(this.props.identified) {\n            appearance = 'community-file-preview-identified';\n        }\n        return (\n            <div className={\"community-file-preview-container \" + appearance}>\n                <div>\n                    <p className=\"community-file-date\">{this.getDate(this.props.file)}</p>\n                    <p className=\"community-file-file\">{this.props.file}</p>\n                    <p className=\"community-file-classifier\">{this.props.classifier}</p>\n                </div>\n                <div className=\"community-file-preview-buttons\">\n                    <div className=\"round-button download community-download\" onClick={() => this.handleDownload()}>\n                        <div style={{display: 'none'}}>\n                        <iframe id=\"download-src\" />\n                        </div>\n                    </div>\n                    <div className=\"round-button right-arrow community-download\" onClick={() => this.props.onClick(this.props.timeseries, this.props.file, this.props.classifier)}></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass CommunityReview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n            selectedTimeseries: '',\n            selectedFile: '',\n            selectedUser: '',\n        }\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        onClassify: PropTypes.bool,\n        onNotebook: PropTypes.bool,\n        onAnalysis: PropTypes.bool,\n        onCommunityFile: PropTypes.bool,\n        goto_communityfile: PropTypes.func,\n    }\n\n    componentDidMount() {\n        axios\n            .get('/communityfiles/')\n            .then((res) => {\n                this.setState({ files: res.data.reverse() })\n            })\n            .catch((err) => console.log(err));\n    }\n\n    handleFileClick(timeseries, file, user) {\n        this.setState({ \n            selectedTimeseries: timeseries,\n            selectedFile: file,\n            selectedUser: user\n         });\n         this.props.goto_communityfile();\n    }\n\n    renderLegend() {\n        return(\n            <div className='community-review-legend'>\n                <div className='legend-entry'>\n                    <div className='legend-bubble identified-bubble' />\n                    <p className='legend-text'>Identification Complete</p>\n                </div>\n                <div className='legend-entry'>\n                    <div className='legend-bubble categorized-bubble' />\n                    <p className='legend-text'>Categorization Complete</p>\n                </div>\n                <div className='legend-entry'>\n                    <div className='legend-bubble incomplete-bubble' />\n                    <p className='legend-text'>Incomplete</p>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        if(this.props.onClassify) {\n            return <Redirect to=\"/classify\" />\n        }\n\n        if(this.props.onHome) {\n            return <Redirect to=\"/\" />\n        }\n    \n        if(this.props.onLearn) {\n            return <Redirect to=\"/learn\" />\n        }\n\n        if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook/\" />\n        }\n\n        if(this.props.onAnalysis) {\n            return <Redirect to=\"/analysis\" />\n        }\n\n        if(this.props.onCommunityFile) {\n            return <Redirect to={\"/analysis/communityreview/\" + this.state.selectedTimeseries + \"/\" + this.state.selectedFile + \"/\" + this.state.selectedUser} />\n        }\n\n        const cache = new CellMeasurerCache({\n            defaultHeight: 10,\n            minHeight: 10,\n            fixedWidth: true\n          });\n\n        const files = this.state.files;\n\n        const cellRenderer = ({columnIndex, key, rowIndex, parent, style}) => ( \n\n            <CellMeasurer\n                cache={cache}\n                key={key}\n                parent={parent}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n            >\n            {({ measure, registerChild }) => (\n            \n                <div ref={registerChild} key={key} style={style}>\n                    <div onLoad={measure}>\n                        {files[(rowIndex*4)+columnIndex] ?\n                            <CommunityFilePreview\n                                timeseries={files[(rowIndex*4)+columnIndex].bin.timeseries}\n                                file={files[(rowIndex*4)+columnIndex].bin.file}\n                                ifcb={files[(rowIndex*4)+columnIndex].bin.ifcb}\n                                classifier={files[(rowIndex*4)+columnIndex].classifier}\n                                categorized={files[(rowIndex*4)+columnIndex].bin.categorized}\n                                identified={files[(rowIndex*4)+columnIndex].bin.identified}\n                                onClick={() => this.handleFileClick(files[(rowIndex*4)+columnIndex].bin.timeseries, files[(rowIndex*4)+columnIndex].bin.file, files[(rowIndex*4)+columnIndex].classifier)}\n                            /> : \n                            <div/> }\n                        </div>\n                </div>\n            )}\n            </CellMeasurer>\n        )\n        \n           return(\n            <div>\n                <Header />\n                <title>IFCB | Community Review</title>\n                <div className='main'>\n                    <div className=\"page\">\n                        <div>\n                            <div className=\"notebook-heading\">\n                                <h1 className=\"notebook-header\">Analysis</h1>\n                            </div>\n                            <h2 className=\"analysis-option-heading page-heading community-review-heading\">Community Review</h2>\n                            {this.renderLegend()}\n                            <div>\n                                {this.state.files.length > 1 ?\n                                    <Grid\n                                        width={document.documentElement.clientWidth*0.8}\n                                        height={800}\n                                        columnWidth={document.documentElement.clientWidth*0.8/4}\n                                        rowHeight={document.documentElement.clientWidth*0.11}\n                                        rowCount={Math.floor(this.state.files.length/4)+1}\n                                        columnCount={4}\n                                        cellRenderer={cellRenderer}\n                                        scrollToAlignment=\"start\"\n                                        className=\"community-review-grid\"\n                                    /> :\n                                    <div/>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    onHome: state.menu.onHome,\n    onLearn: state.menu.onLearn,\n    onClassify: state.menu.onClassify,\n    onNotebook: state.menu.onClassify,\n    onAnalysis: state.menu.onAnalysis,\n    onCommunityFile: state.menu.onCommunityFile,\n });\n\nexport default connect(mapStateToProps, { goto_communityfile })(CommunityReview);","/Users/jamiewalton/Desktop/Classification_v3/src/components/features/CommunityFile.js",["226","227"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Header from '../layout/Header';\nimport Plankton from '../annotations/Plankton';\nimport '../../css/datepicker.css';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\nimport { List, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\nimport { goto_communityreview } from \"../../actions/menu\";\n\nimport '../../css/classify-styles.css';\nimport loader from \"../annotations/loader.GIF\";\n\nclass CommunityFilePreview extends Component {\n    getDate(file) {\n        const timestamp = file.slice(1,5) + '-' + file.slice(5,7) + '-' + file.slice(7,12) + ':' + \n            file.slice(12,14) + ':' + file.slice(14,16);\n        const date = new Date(timestamp);\n        const dateString = date.toDateString().slice(4,10) + ',' + date.toDateString().slice(10,);\n        \n        return dateString\n    }\n\n    handleDownload() {\n        document.getElementById('download-src').src = 'http://odontella.oceandatacenter.ucsc.edu:8000/mat/' + this.props.ifcb + '/' + this.props.file + '/'\n    }\n\n    render() {\n        var appearance = ''\n        var status = 'This file is incomplete.'\n        if(this.props.categorized) {\n            appearance = 'community-file-preview-categorized';\n            status = 'This file is fully categorized, but not fully identified.';\n        } else if(this.props.identified) {\n            appearance = 'community-file-preview-identified';\n            status = 'This file is fully categorized and identified.';\n        }\n        return (\n            <div className=\"community-file-info-container\">\n                <div className={\"community-file-preview-container community-file-info \" + appearance}>\n                    <div>\n                        <p className=\"community-file-date community-file-heading\">{this.getDate(this.props.file)}</p>\n                        <p className=\"community-file-file\">{this.props.file}</p>\n                        <p className=\"community-file-classifier\">{this.props.classifier}</p>\n                    </div>\n                    <div className=\"community-file-preview-buttons\">\n                        <div className=\"round-button download community-download\" onClick={() => this.handleDownload()}>\n                            <div style={{display: 'none'}}>\n                            <iframe id=\"download-src\" />\n                            </div>\n                        </div>\n                        <div className=\"round-button right-arrow community-download flip-right-arrow\" onClick={() => this.props.onClick()}></div>\n                    </div>\n                </div>\n                <div className=\"community-file-status-container\">\n                    <p className={\"community-file-status \" + appearance + '-text'}>{status}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass CommunityFile extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          loading: true,\n          newFile: '',\n          newTimeSeries: '',\n          planktonClickEnabled: true,\n          infoShowing: [],\n          bin: {timeseries:'', ifcb:'', year:'', day:'', file:''},\n          user: '',\n          targets: [],\n          targetNumbers: [],\n          rows: [],\n          scrollToIndex: undefined,\n          jumpEntry: '',\n          jumpSubmit: '',\n          initialTargetJump: '',\n          lastEditBin: '',\n          lastEditTarget: '',\n          lastScroll: 0,\n          categorized: false,\n          identified: false,\n      }\n  }\n\n  static propTypes = {\n    preferences: PropTypes.object,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    changeScale: PropTypes.func,\n    save: PropTypes.func.isRequired,\n    isSaving: PropTypes.bool,\n    sync: PropTypes.func.isRequired,\n    isSyncing: PropTypes.bool,\n    user: PropTypes.object,\n    scaleEntry: PropTypes.number,\n    onNotebook: PropTypes.bool,\n    onAnalysis: PropTypes.bool,\n    goto_communityreview: PropTypes.func,\n  };\n\n  getNewTimeSeries(option) {\n    this.setState({ loading: true });\n\n    var k = this.state.timeSeriesOptions.findIndex(timeseries => timeseries === option);\n    const timeseries = this.state.timeSeriesNames[k];\n\n    axios\n        .get('/process/public/timeseries/' + timeseries + '/')\n        .then((res) => { this.setState({ \n            newTimeSeries: timeseries,\n            newFile: res.data.bin.file\n        }) })\n        .catch((err) => console.log(err));\n  }\n  \n\n  componentDidMount() {\n    const urlInfo = this.props.location.pathname.split('/')\n    const timeseries = urlInfo[3];\n    const file = urlInfo[4];\n    const user = urlInfo[5];\n    this.setState({ loading: true, user: user });\n\n    if (file !== undefined) {\n        axios\n            .get('/process/public/file/' + timeseries + '/' + file + '/' + user + '/')\n            .then((res) => {\n                this.setState({ \n                    bin: res.data.bin, \n                    yearOptions: res.data.options.year_options.reverse(),\n                    dayOptions: res.data.options.day_options[1],\n                    dateOptions: res.data.options.filled_days.map((date) => (new Date(date))),\n                    fileOptions: res.data.options.file_options,\n                    filledDays: res.data.options.filled_days,\n                    dayOption: res.data.bin.day,\n                })\n                axios\n                    .get('/process/public/targets/' + timeseries + '/' + file + '/' + user + '/')\n                    .then((targetResponse) => {\n                        this.setState({ \n                            targets: targetResponse.data,\n                            targetNumbers: targetResponse.data.map(t => t.number),\n                            loading: false,\n                        });\n                        axios\n                            .get('/process/rows/community/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + user + '/')\n                            .then((rowResponse) => {\n                                this.setState({ \n                                    rows: rowResponse.data.options.rows,\n                                });\n                            });\n                });\n            })\n            .catch((err) => {\n                console.log(err);\n                this.setState({ bin: {timeseries:'', ifcb:'', year:'', day:'', file:'Not Found'} });\n                return;\n            });\n        axios\n            .get('/complete/public/status/' + timeseries + '/' + file + '/' + user + '/')\n            .then((completionStatusResponse) => {\n                this.setState({\n                    categorized: completionStatusResponse.data.options.categorized,\n                    identified: completionStatusResponse.data.options.identified,\n                });\n            })\n    }\n\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.url !== prevProps.match.url) {\n        this.props.history.go(0);\n    }\n  }\n\n  disablePlanktonClick(targetNum, bool, infoShowing) {\n    const infoClassList = document.getElementById(targetNum + '-info').classList;\n    if ((infoShowing) || (infoClassList.contains('show-info'))) {\n        if (!this.state.infoShowing.includes(targetNum)) {\n            this.setState({ infoShowing: this.state.infoShowing.concat([targetNum]) });\n        }\n        this.setState({ planktonClickEnabled: false });\n    } else {\n        const newInfoShowing = this.state.infoShowing.filter(function(item) {\n            return item !== targetNum\n        })\n        this.setState({ planktonClickEnabled: bool, infoShowing: newInfoShowing });\n    }\n  }\n\n  renderLoader() {\n    return <img src={loader} alt=\"Loading targets...\" width=\"80\" loop=\"infinite\" style={{'margin':'0 0 3vw 0'}}></img>\n  }\n\n  returnToClassify() {\n    this.setState({ newFile: 'blank' });\n  }\n\n  renderNotFound() {\n      return(\n        <div className='main'>\n            <div className=\"page\">\n                <div className=\"content\">\n                    <div className=\"inner-content\">\n                        <h1>File Not Found</h1>\n                        <p className=\"not-found-message\">The IFCB file you're looking for doesn't exist. There may be a typo in the time series, file number, or sort code in the URL.</p>\n                        <div className=\"return-button\" onClick={() => this.returnToClassify()}>Return to Classify</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n      );\n  }\n\n  renderPage() {\n    const cache = new CellMeasurerCache({\n        defaultHeight: 10,\n        minHeight: 10,\n        fixedWidth: true\n      });\n\n    const scrollToIndex = this.state.scrollToIndex;\n\n    const selectedDate = (this.state.bin.day === '') ? new Date() : new Date(this.state.bin.day + '-' + this.state.bin.year);\n\n    const rowRenderer = ({index, key, parent, style}) => (\n        \n        (this.state.targets.length < 1) ? <div/> : \n\n            <CellMeasurer\n                cache={cache}\n                key={key}\n                parent={parent}\n                rowIndex={index}\n            >\n            {({ measure, registerChild }) => (\n            <div ref={registerChild} key={key} style={style}>\n                <div onLoad={measure} className=\"row\">\n                    <div className=\"image-row\">\n                        {this.state.rows[index].map((i) => \n                            <Plankton \n                                timeseries={this.state.bin.timeseries}\n                                file={this.state.bin.file}\n                                timestamp={this.state.bin.file}\n                                id={i}\n                                targetNum={this.state.targets[i].number}\n                                class_name={this.state.targets[i].class_name}\n                                class_abbr={this.state.targets[i].class_abbr}\n                                height={this.state.targets[i].height}\n                                width={this.state.targets[i].width}\n                                scale={this.props.scaleEntry / 10}\n                                ifcb={this.state.bin.ifcb}\n                                editor={'jamiewalton'}\n                                date={this.state.targets[i].date}\n                                onClick={() => console.log()}\n                                onCheck={() => console.log()}\n                                infoChange={(targetNum, bool, infoShowing) => this.disablePlanktonClick(targetNum, bool, infoShowing)}\n                                infoShowing={this.state.infoShowing}\n                                public={false}\n                                categorizeMode={false}\n                                noteOption={false}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n            )}\n            </CellMeasurer>\n        )\n      return(\n        \n        <div className='main'>\n            <div className=\"page\">\n            <div className=\"content\">\n                    <div className=\"inner-content\">\n                    <div className=\"notebook-heading\">\n                        <h1 className=\"notebook-header\">Analysis</h1>\n                    </div>\n                    <h2 className=\"analysis-option-heading page-heading community-review-heading\">Community Review</h2>\n                        {this.state.bin.file ? \n                            <CommunityFilePreview \n                                timeseries={this.state.bin.timeseries}\n                                file={this.state.bin.file}\n                                ifcb={this.state.bin.ifcb}\n                                classifier={this.state.user}\n                                categorized={this.state.categorized}\n                                identified={this.state.identified}\n                                onClick={() => this.props.goto_communityreview()}\n                            /> : <div/>}\n                        <div className=\"annotations\">\n                            <div>\n                                <div className=\"image-grid remove-top-margin\" id=\"image-grid\">\n                                    {\n                                    (this.state.loading || this.props.isSaving) ? this.renderLoader() : console.log()\n                                    }\n                                    {\n                                    (this.state.emptyCategories && this.state.categorizeMode) ? <p className=\"empty-categories-text\">Nothing to categorize! Switch over to Identify mode to start classifying.</p> :\n                                        <List\n                                            height={800} // fix later\n                                            rowCount={this.state.rows.length}\n                                            rowHeight={cache.rowHeight}\n                                            rowRenderer={rowRenderer}\n                                            scrollToAlignment=\"start\"\n                                            scrollToIndex={scrollToIndex}\n                                            width={document.documentElement.clientWidth*0.72}\n                                        />\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n      );\n  }\n\n  render() {\n\n    if(this.props.onHome) {\n        return <Redirect to=\"/\" />\n    }\n\n    if(this.props.onLearn) {\n        return <Redirect to=\"/learn\" />\n    }\n    \n    if(this.props.onNotebook) {\n        return <Redirect to=\"/notebook/\" />\n    }\n\n    if(this.props.onAnalysis) {\n        return <Redirect to=\"/analysis/\" />\n    }\n\n    if(this.props.onCommunityReview) {\n        return <Redirect to=\"/analysis/communityreview/\" />\n    }\n\n    if(this.state.newFile.length !== 0) {\n        if (this.state.newFile === 'blank') {\n            return <Redirect to='/classify' />\n        }\n        const newURL = '/classify/' + this.state.newTimeSeries + '/' + this.state.newFile;\n        return <Redirect to={newURL} />\n    }\n\n    if (this.state.rows !== [] && this.state.initialTargetJump === '' && !this.state.loading) {\n        const urlInfo = this.props.location.pathname.split('/');\n        if (urlInfo.length > 4) {\n            const targetNum = urlInfo[4];\n            var k = this.state.targets.findIndex(target => target.number === targetNum);\n            var scrollToIndex = this.state.rows.findIndex(row => row.includes(k));\n\n            if (isNaN(scrollToIndex) || scrollToIndex<0) {\n                scrollToIndex = undefined;\n            }\n\n            this.setState({\n                jumpEntry: targetNum,\n                jumpSubmit: targetNum,\n                initialTargetJump: targetNum,\n                scrollToIndex: scrollToIndex\n            });\n        }\n    }\n\n    return(\n        <div className='body'>\n        <title>{'IFCB | ' + this.state.bin.file}</title>\n        <Header />\n        {(this.state.bin.file === 'Not Found') ? this.renderNotFound() : this.renderPage()}\n        \n        <script>{document.addEventListener(\"scroll\", this.flipBackToTop)}</script>\n    </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => ({\n    preferences: state.auth.preferences,\n    isSaving: state.classify.isSaving,\n    user: state.auth.user,\n    scaleEntry: state.classify.scaleEntry,\n    onHome: state.menu.onHome,\n    onLearn: state.menu.onLearn,\n    onNotebook: state.menu.onNotebook,\n    onAnalysis: state.menu.onAnalysis,\n    onCommunityReview: state.menu.onCommunityReview,\n });\n\nexport default connect(mapStateToProps, {goto_communityreview })(CommunityFile);",{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":25,"column":9,"nodeType":"234","messageId":"235","endLine":25,"endColumn":90},{"ruleId":"236","severity":1,"message":"237","line":588,"column":16,"nodeType":"238","endLine":588,"endColumn":44},{"ruleId":"239","severity":1,"message":"240","line":29,"column":1,"nodeType":"241","endLine":106,"endColumn":2},{"ruleId":"242","severity":1,"message":"243","line":71,"column":9,"nodeType":"244","messageId":"245","endLine":71,"endColumn":25},{"ruleId":"246","severity":1,"message":"247","line":83,"column":9,"nodeType":"244","messageId":"248","endLine":91,"endColumn":14},{"ruleId":"239","severity":1,"message":"240","line":27,"column":1,"nodeType":"241","endLine":92,"endColumn":2},{"ruleId":"249","severity":1,"message":"250","line":39,"column":34,"nodeType":"251","messageId":"252","endLine":39,"endColumn":74},{"ruleId":"253","severity":1,"message":"254","line":40,"column":21,"nodeType":"255","messageId":"256","endLine":40,"endColumn":26},{"ruleId":"239","severity":1,"message":"240","line":29,"column":1,"nodeType":"241","endLine":205,"endColumn":2},{"ruleId":"228","replacedBy":"257"},{"ruleId":"230","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":55,"column":42,"nodeType":"255","messageId":"261","endLine":55,"endColumn":48},{"ruleId":"259","severity":1,"message":"262","line":55,"column":50,"nodeType":"255","messageId":"261","endLine":55,"endColumn":57},{"ruleId":"259","severity":1,"message":"263","line":55,"column":59,"nodeType":"255","messageId":"261","endLine":55,"endColumn":69},{"ruleId":"259","severity":1,"message":"264","line":55,"column":71,"nodeType":"255","messageId":"261","endLine":55,"endColumn":75},{"ruleId":"259","severity":1,"message":"265","line":55,"column":77,"nodeType":"255","messageId":"261","endLine":55,"endColumn":82},{"ruleId":"259","severity":1,"message":"266","line":5,"column":8,"nodeType":"255","messageId":"261","endLine":5,"endColumn":13},{"ruleId":"259","severity":1,"message":"266","line":2,"column":8,"nodeType":"255","messageId":"261","endLine":2,"endColumn":13},{"ruleId":"267","severity":1,"message":"268","line":34,"column":9,"nodeType":"269","messageId":"270","endLine":54,"endColumn":10},{"ruleId":"267","severity":1,"message":"268","line":75,"column":9,"nodeType":"269","messageId":"270","endLine":91,"endColumn":10},{"ruleId":"267","severity":1,"message":"268","line":95,"column":9,"nodeType":"269","messageId":"270","endLine":101,"endColumn":10},{"ruleId":"267","severity":1,"message":"268","line":106,"column":9,"nodeType":"269","messageId":"270","endLine":112,"endColumn":10},{"ruleId":"271","severity":1,"message":"272","line":88,"column":41,"nodeType":"238","endLine":88,"endColumn":93},{"ruleId":"273","severity":1,"message":"274","line":91,"column":45,"nodeType":"275","messageId":"276","endLine":91,"endColumn":74},{"ruleId":"271","severity":1,"message":"272","line":103,"column":41,"nodeType":"238","endLine":103,"endColumn":95},{"ruleId":"273","severity":1,"message":"274","line":106,"column":45,"nodeType":"275","messageId":"276","endLine":106,"endColumn":74},{"ruleId":"259","severity":1,"message":"277","line":20,"column":7,"nodeType":"255","messageId":"261","endLine":20,"endColumn":16},{"ruleId":"259","severity":1,"message":"278","line":19,"column":13,"nodeType":"255","messageId":"261","endLine":19,"endColumn":18},{"ruleId":"259","severity":1,"message":"279","line":2,"column":10,"nodeType":"255","messageId":"261","endLine":2,"endColumn":60},{"ruleId":"259","severity":1,"message":"280","line":6,"column":8,"nodeType":"255","messageId":"261","endLine":6,"endColumn":16},{"ruleId":"259","severity":1,"message":"281","line":7,"column":8,"nodeType":"255","messageId":"261","endLine":7,"endColumn":15},{"ruleId":"259","severity":1,"message":"282","line":8,"column":8,"nodeType":"255","messageId":"261","endLine":8,"endColumn":19},{"ruleId":"259","severity":1,"message":"283","line":9,"column":8,"nodeType":"255","messageId":"261","endLine":9,"endColumn":20},{"ruleId":"259","severity":1,"message":"284","line":4,"column":20,"nodeType":"255","messageId":"261","endLine":4,"endColumn":24},{"ruleId":"259","severity":1,"message":"285","line":13,"column":8,"nodeType":"255","messageId":"261","endLine":13,"endColumn":14},{"ruleId":"236","severity":1,"message":"237","line":47,"column":25,"nodeType":"238","endLine":47,"endColumn":53},{"ruleId":"236","severity":1,"message":"237","line":51,"column":29,"nodeType":"238","endLine":51,"endColumn":57},{"ruleId":"259","severity":1,"message":"286","line":231,"column":11,"nodeType":"255","messageId":"261","endLine":231,"endColumn":23},"no-native-reassign",["287"],"no-negated-in-lhs",["288"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-duplicate-case","Duplicate case label.","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'reply'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'reply' is already defined.","Identifier","redeclared",["287"],["288"],"no-unused-vars","'parent' is assigned a value but never used.","unusedVar","'replies' is assigned a value but never used.","'timeseries' is assigned a value but never used.","'file' is assigned a value but never used.","'image' is assigned a value but never used.","'axios' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'NavButton' is defined but never used.","'title' is defined but never used.","'__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED' is defined but never used.","'ceratium' is defined but never used.","'ditylum' is defined but never used.","'chaetoceros' is defined but never used.","'lithodesmium' is defined but never used.","'Link' is defined but never used.","'loader' is defined but never used.","'selectedDate' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]