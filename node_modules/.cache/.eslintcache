[{"/Users/jamiewalton/Desktop/Classification_v3/src/index.js":"1","/Users/jamiewalton/Desktop/Classification_v3/src/App.js":"2","/Users/jamiewalton/Desktop/Classification_v3/src/reportWebVitals.js":"3","/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Register.js":"4","/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Login.js":"5","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Header.js":"6","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Annotations.js":"7","/Users/jamiewalton/Desktop/Classification_v3/src/components/common/PrivateRoute.js":"8","/Users/jamiewalton/Desktop/Classification_v3/src/store.js":"9","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/index.js":"10","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/auth.js":"11","/Users/jamiewalton/Desktop/Classification_v3/src/actions/types.js":"12","/Users/jamiewalton/Desktop/Classification_v3/src/actions/auth.js":"13","/Users/jamiewalton/Desktop/Classification_v3/src/actions/classify.js":"14","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/classify.js":"15","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Notebook.js":"16","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/BinNote.js":"17","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Note.js":"18","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/menu.js":"19","/Users/jamiewalton/Desktop/Classification_v3/src/actions/menu.js":"20","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Analysis.js":"21","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/ClassDownload.js":"22","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Search.js":"23"},{"size":461,"mtime":1626905198221,"results":"24","hashOfConfig":"25"},{"size":1630,"mtime":1631224654630,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1626233027000,"results":"27","hashOfConfig":"25"},{"size":4308,"mtime":1631224654634,"results":"28","hashOfConfig":"25"},{"size":3065,"mtime":1631224654633,"results":"29","hashOfConfig":"25"},{"size":3364,"mtime":1629429596856,"results":"30","hashOfConfig":"25"},{"size":44853,"mtime":1636418705221,"results":"31","hashOfConfig":"25"},{"size":757,"mtime":1627067540186,"results":"32","hashOfConfig":"25"},{"size":382,"mtime":1626905198223,"results":"33","hashOfConfig":"25"},{"size":195,"mtime":1627676355016,"results":"34","hashOfConfig":"25"},{"size":1418,"mtime":1627676373779,"results":"35","hashOfConfig":"25"},{"size":1221,"mtime":1629597252152,"results":"36","hashOfConfig":"25"},{"size":2564,"mtime":1627317963366,"results":"37","hashOfConfig":"25"},{"size":4934,"mtime":1630538597957,"results":"38","hashOfConfig":"25"},{"size":2128,"mtime":1630523486570,"results":"39","hashOfConfig":"25"},{"size":14163,"mtime":1631224654644,"results":"40","hashOfConfig":"25"},{"size":4612,"mtime":1628613401795,"results":"41","hashOfConfig":"25"},{"size":3705,"mtime":1628613401797,"results":"42","hashOfConfig":"25"},{"size":1770,"mtime":1629511021219,"results":"43","hashOfConfig":"25"},{"size":745,"mtime":1635008068852,"results":"44","hashOfConfig":"25"},{"size":3656,"mtime":1635008408943,"results":"45","hashOfConfig":"25"},{"size":10970,"mtime":1631224654643,"results":"46","hashOfConfig":"25"},{"size":9155,"mtime":1631224654646,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"q77g26",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"50"},"/Users/jamiewalton/Desktop/Classification_v3/src/index.js",[],["105","106"],"/Users/jamiewalton/Desktop/Classification_v3/src/App.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reportWebVitals.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Register.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Login.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Header.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Annotations.js",["107","108","109","110"],"/Users/jamiewalton/Desktop/Classification_v3/src/components/common/PrivateRoute.js",["111"],"import React from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport loader from \"./loader.GIF\";\n\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n    <Route \n        {...rest}\n        render={props => {\n            if(auth.isLoading) {\n                return <img src={loader} alt=\"Loading...\" width=\"80\" loop=\"infinite\"></img>\n            } else if(!auth.isAuthenticated) {\n                return <Redirect to=\"/login\" />\n            } else {\n                return <Component {...props} />;\n            }\n        }}\n    />\n);\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);","/Users/jamiewalton/Desktop/Classification_v3/src/store.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/index.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/auth.js",["112"],"import {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n} from '../actions/types';\n\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            }\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload\n            };\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n            localStorage.setItem('token', action.payload.token);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false\n            }\n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false\n            }\n            \n        default:\n            return state;\n    }\n}\n\n","/Users/jamiewalton/Desktop/Classification_v3/src/actions/types.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/auth.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/classify.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/classify.js",["113"],"import {\n    SAVE_PROGRESS,\n    SAVE_SUCCESS,\n    SYNC_PROGRESS,\n    SYNC_SUCCESS,\n    NOTES_CHANGED,\n    NOTES_RECORDED,\n    NOTEBOOK_FILTERED,\n    REPLY_RESOLVED,\n    REPLY_OPEN,\n    TARGETS_BASIC_SEARCHED,\n    BINS_BASIC_SEARCHED\n} from '../actions/types';\n\nconst initialState = {\n    isSaving: false,\n    isSyncing: false,\n    noteChangeFlag: true,\n    replyChangeFlag: false,\n    notes: [],\n    targetSearchResults: [[]],\n    binsSearchResults: [[]],\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case SAVE_PROGRESS:\n            return {\n                ...state,\n                isSaving: true\n            }\n        case SAVE_SUCCESS:\n            return {\n                ...state,\n                isSaving: false\n            }\n        case SYNC_PROGRESS:\n            return {\n                ...state,\n                isSyncing: true\n            }\n        case SYNC_SUCCESS:\n            return {\n                ...state,\n                isSyncing: false\n            }\n        case NOTES_CHANGED:\n            return {\n                ...state,\n                noteChangeFlag: true\n            }\n        case NOTES_RECORDED:\n            return {\n                ...state,\n                noteChangeFlag: false\n            }\n        case REPLY_OPEN:\n            return {\n                ...state,\n                noteChangeFlag: true\n            }\n        case REPLY_RESOLVED:\n            return {\n                ...state,\n                noteChangeFlag: false\n            }\n        case NOTEBOOK_FILTERED:\n            return {\n                ...state,\n                notes: action.payload\n            }\n        case TARGETS_BASIC_SEARCHED:\n            return {\n                ...state,\n                targetSearchResults: ((typeof(action.payload) === Array) ? (action.payload) : ([action.payload]))\n            }\n        case BINS_BASIC_SEARCHED:\n            return {\n                ...state,\n                binsSearchResults: ((typeof(action.payload) === Array) ? (action.payload) : ([action.payload]))\n            }\n        default:\n            return state;\n    }\n}","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Notebook.js",["114","115","116"],"import React, { Component } from 'react';\nimport { Grid, AutoSizer, CellMeasurerCache, CellMeasurer } from 'react-virtualized';\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport { filterNotebook, receiveNotesChange } from \"../../actions/classify\";\nimport Header from '../layout/Header';\nimport Note from \"./Note\";\nimport '../../css/notebook-styles.css';\nimport loader from \"./loader.GIF\";\n\nclass Filter extends Component {\n    renderOption(option) {\n        return(\n            <div className=\"filter-option\" onClick={() => this.props.applyFilter(this.props.filter, option)}>{option}</div>\n        );\n    }\n    \n    render() {\n        return(\n            <div>\n                <div className=\"filter-choice\" onClick={() => this.props.onClick(this.props.filter)}>\n                    <p className=\"filter-choice-text\">{this.props.filter}</p>\n                    <p className=\"filter-choice-plus\" id={this.props.filter + \"-plus\"}>+</p>\n                </div>\n                <div className=\"filter-dropdown\" id={this.props.filter + \"-dropdown\"}>\n                    {this.props.options.map((option) => (this.renderOption(option[this.props.filter])))}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Notebook extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            notes: [{\n                \"id\": \"\",\n                \"author\": \"\",\n                \"date\": \"\",\n                \"entry\": \"\",\n                \"parent\": null,\n                \"replies\": [],\n                \"timeseries\": \"\",\n                \"ifcb\": \"\",\n                \"file\": \"\",\n                \"image\": \"\"\n            }],\n            flags: [],\n            classes: [],\n            searchTerms: \"\",\n            authors: [{author: ''}],\n            bins: [{bin: ''}],\n            timeseries: [{timeseries: ''}],\n            ifcbs: [{ifcb: ''}],\n            types: [\n                {type: 'Bin Note'}, \n                {type: 'Target Note'}\n            ],\n            appliedFilters: [],\n        }\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        onClassify: PropTypes.bool,\n        onAnalysis: PropTypes.bool,\n        notes: PropTypes.array,\n        filterNotebook: PropTypes.func,\n        receiveNotesChange: PropTypes.func,\n        noteChangeFlag: PropTypes.bool\n    }\n\n    getNotebook(filters) {\n        if (filters.length === 0) {\n            axios\n                .get('/notebook/')\n                .then((res) => {\n                    this.setState({ \n                        notes: res.data,\n                        flags: Array(res.data.length).fill(''),\n                    });\n                })\n                .catch((err) => console.log(err));\n        } else {\n            this.props.filterNotebook(filters);\n        }\n    }\n\n    componentDidMount() {\n        this.getNotebook([]);\n        axios\n            .get('/notebook/filters/')\n            .then((res) => {\n                this.setState({ \n                    authors: res.data.options.authors,\n                    bins: res.data.options.bins,\n                    timeseries: res.data.options.timeseries,\n                    ifcbs: res.data.options.ifcbs,\n                });\n            })\n            .catch((err) => console.log(err));\n    }\n\n    componentDidUpdate() {\n        if (this.props.noteChangeFlag) {\n            this.getNotebook(this.state.appliedFilters);\n            this.props.receiveNotesChange();\n        }\n    }\n\n    handleFilterClick() {\n        document.getElementById('filter_dropdown').classList.toggle('show');\n    }\n\n    onChange = e => this.setState({ searchTerms: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        const newAppliedFilters = this.state.appliedFilters.concat([ {category: \"search\", choice: this.state.searchTerms} ]);\n        this.setState({ appliedFilters: newAppliedFilters })\n        this.props.filterNotebook(newAppliedFilters);\n    }\n\n    handleFilterChoiceClick(option) {\n        document.getElementById(option + '-plus').classList.toggle('rotate-plus');\n        document.getElementById(option + '-dropdown').classList.toggle('show');\n    }\n\n    handleApplyFilter(category, choice) {\n        const duplicates = this.state.appliedFilters.filter(entry => (entry['category'] === category) && (entry['choice'] === choice))\n        if (duplicates.length === 0) {\n            const newAppliedFilters = this.state.appliedFilters.concat([ {category: category, choice: choice} ])\n            this.getNotebook(newAppliedFilters);\n            this.setState({ appliedFilters: newAppliedFilters });\n        }\n    }\n\n    handleRemoveFilter(filter) {\n        const applied = this.state.appliedFilters;\n        const index = applied.findIndex(entry => entry === filter);\n        const newAppliedFilters = applied.slice(0, index).concat(applied.slice(index+1,applied.length));\n        this.setState({ appliedFilters: newAppliedFilters });\n        this.getNotebook(newAppliedFilters);\n    }\n\n    renderFilterChoice(filter, options) {\n        return(\n            <Filter\n                filter={filter}\n                options={options}\n                onClick={(option) => this.handleFilterChoiceClick(option)}\n                applyFilter={(category, choice) => this.handleApplyFilter(category, choice)}\n            />\n        );\n    }\n\n    renderAppliedFilters(filter) {\n        return (\n            <div className=\"filter-choice applied\" onClick={() => this.handleRemoveFilter(filter)}>\n                <p className=\"filter-choice-text applied-text\">{filter.category.toUpperCase() + ': ' + filter.choice}</p>\n                <p className=\"filter-choice-plus applied-text rotate-plus\" id={this.props.filter + \"-plus\"}>+</p>\n            </div>\n        );\n    }\n\n\n  render() {\n    if(this.props.onClassify) {\n        return <Redirect to=\"/\" />\n    }\n\n    if(this.props.onAnalysis) {\n        return <Redirect to=\"/analysis/\" />\n    }\n\n    const cache = new CellMeasurerCache({\n        defaultHeight: 200,\n        minHeight: 200,\n        fixedWidth: true\n      });\n\n    // Grid data as an array of arrays\n    const notes = this.state.notes;\n    const username = this.props.user.username;\n    const flags = this.state.flags\n    var skips = 0;\n    var rendered = [];\n\n    function renderReply(note, count) {\n        return(\n            <div className=\"reply\" style={{margin: \"0 0 0 \" + String(count) + \"vw\"}}>\n                <Note\n                    note={note}\n                    user={username}\n                    timeseries={note.timeseries}\n                    ifcb={note.ifcb}\n                    file={note.file}\n                    type='bin'\n                    image={note.image}\n                />\n                <div className=\"reply\" style={{margin: \"0 0 0 \" + String((count+1)) + \"vw\"}}>\n                {(note.replies.length !== 0) ?\n                    note.replies.map((reply) => renderReply(reply, count+1)) :\n                    <div></div>\n                }\n                </div>\n            </div>\n        );\n    }\n    \n    function cellRenderer({columnIndex, key, parent, rowIndex, style}) {\n        if ((rowIndex === 0) && (columnIndex === 0)) {\n            skips = 0;\n            rendered = [];\n        }\n        var noteIndex = (3*rowIndex) + columnIndex + skips;\n        if ((noteIndex) < notes.length) {\n            if ((notes[noteIndex].parent !== null) || (rendered.includes(noteIndex))) {\n                while (notes[noteIndex].parent !== null || (rendered.includes(noteIndex))) {\n                    noteIndex = noteIndex + 1;\n                    skips = skips + 1;\n                    if (noteIndex >= notes.length) {\n                        return\n                    }\n                }\n            }\n            rendered = rendered.concat([noteIndex]);\n            const note = notes[noteIndex];\n            const count = 0;\n            var url = '';\n            if (note.image !== 'None') {\n                url = 'http://128.114.25.154:8888/' + note.timeseries + '/' + note.file + '_' + note.ifcb + '_' + note.image + '.jpg';\n            }\n            const flatNote = JSON.stringify(note);\n            const includesFlag = flatNote.includes('true');\n            return (\n                <CellMeasurer\n                    cache={cache}\n                    columnIndex={columnIndex}\n                    key={key}\n                    parent={parent}\n                    rowIndex={rowIndex}\n                >\n                {({ measure, registerChild }) => (\n                    <div ref={registerChild} key={key} style={style}>\n                        <div className=\"notebook-note\" onLoad={measure}>\n                            {(url === '') ? <div></div> : \n                            <img src={url} className=\"notebook-image\" alt={'Target ' + note.image}></img>}\n                            {(includesFlag) ? <div className=\"flag\"></div> : <div></div>}\n                            <div className=\"notebook-entry\"> \n                                <div>\n                                    {(note.image === 'None') ? \n                                    <div className=\"notebook-entry\">\n                                        <p className=\"notebook-entry-heading\">{note.timeseries + ', ' + note.file}</p>\n                                    </div> :\n                                    <div className=\"notebook-entry\">\n                                        <p className=\"notebook-entry-heading\">{'Target ' + note.image}</p>\n                                        <p className=\"notebook-entry-subtitle\">{note.timeseries + ', ' + note.file}</p>\n                                    </div>\n                                    }\n                                    <Note\n                                        note={note}\n                                        user={username}\n                                        timeseries={note.timeseries}\n                                        ifcb={note.ifcb}\n                                        file={note.file}\n                                        type='bin'\n                                        image={note.image}\n                                    />\n                                    {(note.replies.length !== 0) ?\n                                        note.replies.map((reply) => renderReply(reply, count+1)) :\n                                        <div></div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n                </CellMeasurer>\n            );\n            } else {return}\n      }\n\n    return (\n            <div>\n                <Header />\n                <div className='main'>\n                    <div className=\"page\">\n                        <div>\n                            <div className=\"notebook-heading\">\n                                <h1 className=\"notebook-header\">Notebook</h1>\n                                <div className=\"filter-button\" onClick={() => this.handleFilterClick()}>Filter</div>\n                            </div>\n                            <div className=\"day-dropdown withmargin\" id='filter_dropdown'>\n                                <form className=\"search-form\" id=\"search-form\" onSubmit={this.onSubmit}>\n                                    <div className=\"search-bar\">\n                                        <div className=\"search-icon\"></div>\n                                        <input\n                                            type=\"text\"\n                                            className=\"search-input\"\n                                            name=\"searchTerms\"\n                                            onChange={this.onChange}\n                                            value={this.state.searchTerms}\n                                        />\n                                    </div>\n                                    <div className=\"applied-filters\">{this.state.appliedFilters.map((filter) => (this.renderAppliedFilters(filter)))}</div>\n                                    <div className=\"filter-buttons\">\n                                        {this.renderFilterChoice('author', this.state.authors)}\n                                        {this.renderFilterChoice('file', this.state.bins)}\n                                        {this.renderFilterChoice('timeseries', this.state.timeseries)}\n                                        {this.renderFilterChoice('ifcb', this.state.ifcbs)}\n                                    </div>\n                                </form>\n                            </div>\n                            <div className=\"notebook-content\">\n                                <AutoSizer>\n                                {({ width, height }) => (\n                                    <Grid\n                                        cellRenderer={cellRenderer}\n                                        columnCount={3}\n                                        columnWidth={document.documentElement.clientWidth*0.29}\n                                        rowHeight={cache.rowHeight}\n                                        deferredMeasurementCache={cache}\n                                        cellRenderer={cellRenderer}\n                                        rowCount={Math.ceil(this.state.notes.length/3)}\n                                        height={height}\n                                        width={width}\n                                        notes={this.props.notes}\n                                    />\n                                )}\n                                </AutoSizer>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    onClassify: state.menu.onClassify,\n    onAnalysis: state.menu.onAnalysis,\n    noteChangeFlag: state.classify.noteChangeFlag\n });\n\nexport default connect(mapStateToProps, {filterNotebook, receiveNotesChange})(Notebook);\n","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/BinNote.js",["117","118"],"import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport { PropTypes } from \"prop-types\";\n\nimport { addBinNote, sendNotesChange, receiveNotesChange, receiveReplyOpen } from \"../../actions/classify\";\nimport Note from \"./Note\";\n\nexport class BinNote extends React.Component {\n    state = {\n        entry: '',\n        parents: [],\n        notes: [],\n    }\n    \n    static propTypes = {\n        addBinNote: PropTypes.func,\n        receiveNotesChange: PropTypes.func,\n        noteChangeFlag: PropTypes.bool,\n        receiveReplyOpen: PropTypes.func,\n        replyChangeFlag: PropTypes.bool,\n        user: PropTypes.object,\n    };\n\n    getNotes() {\n        axios\n            .get('/process/note/' + this.props.timeseries + '/' + this.props.file + '/' + this.props.image + '/')\n            .then((res) => {\n                this.setState({ notes: res.data });\n            })\n            .catch((err) => console.log(err));\n    }\n\n    renderNote(note, count) {\n        if (note.parent !== null) {\n            var reply = note;\n            var iters = 0;\n            while (reply.parent !== null) {\n                var parentFunc = (element) => element.id === reply.parent;\n                var reply = this.state.notes[this.state.notes.findIndex(parentFunc)];\n                iters = iters + 1;\n            }\n            if (count!==iters) {\n                return;\n            }\n        }\n        return(\n            <div>\n                <Note\n                    note={note}\n                    user={this.props.user.username}\n                    timeseries={this.props.timeseries}\n                    ifcb={this.props.ifcb}\n                    file={this.props.file}\n                    type={this.props.type}\n                    image={this.props.image}\n                />\n                <div className=\"reply\" style={{margin: \"0 0 0 \" + String((count+1)) + \"vw\"}}>\n                {(note.replies.length !== 0) ?\n                    note.replies.map((reply) => this.renderNote(reply, count+1)) :\n                    <div></div>\n                }\n                </div>\n            </div>\n        \n        );\n    }\n\n    componentDidMount() {\n        this.getNotes();\n    }\n\n    componentDidUpdate() {\n        if(this.props.noteChangeFlag) {\n            this.props.receiveNotesChange();\n            this.getNotes();\n        }\n        if(this.props.replyChangeFlag) {\n            this.props.receiveReplyOpen();\n            this.getNotes();\n        }\n    }\n\n    onChange = e => this.setState({ entry: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addBinNote(this.props.user.username, this.state.entry, null, [], this.props.timeseries, this.props.ifcb, this.props.file, this.props.image);\n        this.props.sendNotesChange();\n        this.getNotes();\n        const noteForm = document.getElementById(\"note-form\");\n        noteForm.reset()\n    }\n    \n    render() {\n        return(\n            <div className={this.props.type + \"-notes-content\"}>\n                {(this.props.type === 'bin') ? <div className=\"refresh\" onClick={() => this.getNotes()}></div> : <div></div>}\n                <div id=\"note-container\">\n                    {this.state.notes.map((note) => this.renderNote(note, 0))}\n                </div>\n                    <div className={this.props.type + \"-note-form\"}>\n                        <form onSubmit={this.onSubmit} id=\"note-form\">\n                            <div className={this.props.type + \"-new-note\"}>\n                            <input\n                                type=\"textarea\"\n                                rows=\"10\"\n                                className={this.props.type + \"-note-input\"}\n                                name={this.props.type + \"-note-entry\"}\n                                id=\"note-entry\"\n                                onChange={this.onChange}\n                                value={this.entry}\n                            />\n                            <button type=\"submit\" className={this.props.type + \"-note-submit\"}></button>\n                            </div>\n                            {(this.state.notes === []) ? <p className=\"bin-note-label\">Add a Note</p> : <div></div>}\n                        </form>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    noteChangeFlag: state.classify.noteChangeFlag,\n    replyChangeFlag: state.classify.replyChangeFlag,\n    user: state.auth.user\n });\n\nexport default connect(mapStateToProps, {addBinNote, sendNotesChange, receiveNotesChange, receiveReplyOpen})(BinNote);","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Note.js",["119","120","121","122","123"],"import React from \"react\";\nimport { connect } from 'react-redux';\nimport { PropTypes } from \"prop-types\";\n\nimport { addBinNote, deleteBinNote, flagBinNote, sendNotesChange, sendReplyOpen } from \"../../actions/classify\";\n\nclass Note extends React.Component {\n    state = {\n        entry: '',\n    }\n\n    static propTypes = {\n        addBinNote: PropTypes.func,\n        deleteBinNote: PropTypes.func,\n        sendNotesChange: PropTypes.func,\n        sendReplyOpenChange: PropTypes.func,\n        notes: PropTypes.array,\n    };\n    \n    reply(id) {\n        document.getElementById('reply-form' + id).classList.toggle('show');\n        this.props.sendReplyOpen();\n    }\n\n    delete(id) {\n        this.props.deleteBinNote(id);\n        this.props.sendNotesChange();\n    }\n\n    flag(id) {\n        this.props.flagBinNote(id);\n        this.props.sendNotesChange();\n    }\n\n    getFlagButton(isFlagged) {\n        if (isFlagged) {\n            return 'Unflag'\n        } else {\n            return 'Flag'\n        }\n    }\n\n    onChange = e => this.setState({ entry: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addBinNote(this.props.user, this.state.entry, this.props.note.id, [], this.props.timeseries, this.props.ifcb, this.props.file, this.props.image);\n        this.props.sendNotesChange();\n        const replyForm = document.getElementById(\"note-form\");\n        replyForm.reset()\n        document.getElementById('reply-form' + this.props.note.id).classList.toggle('show');\n    }\n    \n    render() {\n        const { id, author, date, entry, parent, replies, timeseries, file, image, flag } = this.props.note;\n        return (\n            <div className={this.props.type + \"-note\"} id={id}>\n                <div className={this.props.type + \"-note-header\"}>\n                    <p className=\"note-author\">{author}</p>\n                    <p className=\"note-date\">{date.slice(0,10)}</p>\n                    {(flag) ? <div className=\"flag-small\"></div> : <div></div>}\n                </div>\n                <p className={this.props.type + \"-note-entry\"}>{entry}</p>\n                {(this.props.type === 'bin') ? \n                    <button className=\"reply-button\" onClick={() => this.reply(id)}>Reply</button> :\n                    <div></div>}\n                {(author === this.props.user) ? \n                    <button className=\"reply-button\" onClick={() => this.delete(id)}>Delete</button> :\n                    <div></div>}\n                {(author === this.props.user) ? \n                    <button className=\"reply-button\" onClick={() => this.flag(id)}>{this.getFlagButton(flag)}</button> :\n                    <div></div>}\n                <div className=\"reply-form\" id={\"reply-form\" + id}>\n                        <form onSubmit={this.onSubmit} id=\"note-form\">\n                            <div className=\"new-note\">\n                            <input\n                                type=\"textarea\"\n                                rows=\"10\"\n                                className=\"note-input\"\n                                name=\"note-entry\"\n                                id=\"note-entry\"\n                                onChange={this.onChange}\n                                value={this.entry}\n                            />\n                            <button type=\"submit\" className={this.props.type + \"-note-submit\"}></button>\n                            </div>\n                        </form>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    notes: state.classify.notes,\n });\n\nexport default connect(mapStateToProps, {addBinNote, deleteBinNote, flagBinNote, sendNotesChange, sendReplyOpen})(Note);","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/menu.js",["124"],"import {\n    CLASSIFY_PAGE,\n    NOTEBOOK_PAGE,\n    ANALYSIS_PAGE,\n    CLASSDOWNLOAD_PAGE,\n    SEARCH_PAGE,\n} from '../actions/types';\n\n\nconst initialState = {\n    onClassify: true,\n    onNotebook: false,\n    onAnalysis: false,\n    onClassDownload: false,\n    onSearch: false,\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case CLASSIFY_PAGE:\n            return {\n                ...state,\n                onClassify: true,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n            }\n        case NOTEBOOK_PAGE:\n            return {\n                ...state,\n                onClassify: false,\n                onNotebook: true,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: false,\n            }\n        \n        case ANALYSIS_PAGE:\n            return {\n                ...state,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: true,\n                onClassDownload: false,\n                onSearch: false,\n            }\n\n        case CLASSDOWNLOAD_PAGE:\n            return {\n                ...state,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: true,\n                onSearch: false,\n            }\n\n        case SEARCH_PAGE:\n            return {\n                ...state,\n                onClassify: false,\n                onNotebook: false,\n                onAnalysis: false,\n                onClassDownload: false,\n                onSearch: true,\n            }\n            \n        default:\n            return state;\n    }\n}\n\n","/Users/jamiewalton/Desktop/Classification_v3/src/actions/menu.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Analysis.js",["125","126","127","128"],"import React, { Component } from 'react';\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport Header from '../layout/Header';\nimport { goto_classdownload, goto_search, searchTargets } from \"../../actions/menu\";\nimport '../../css/analysis-styles.css';\n\nclass AnalysisOption extends Component {\n    render() {\n        return(\n            <div className=\"analysis-option-container\">\n                <h2 className=\"analysis-option-heading\">{this.props.heading}</h2>\n                <p className=\"analysis-option-description\">{this.props.description}</p>\n                <div className=\"analysis-option-button\" onClick={this.props.handleClick}>Start</div>\n            </div>\n        );\n    }\n}\n\nclass Analysis extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            analysisOptions: [\n                {heading: 'Search', description: \"Find any image or collection of images with the help \\\n                    of classification filtering, file look-up, and more.\"},\n                {heading: 'Download by Class', description: \"Download a ZIP file containing all, or a \\\n                    desired subset of, images classified as a particular species.\"}\n            ]\n        }\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        onClassify: PropTypes.bool,\n        onNotebook: PropTypes.bool,\n        onClassDownload: PropTypes.bool,\n        onSearch: PropTypes.bool,\n        goto_classdownload: PropTypes.func,\n        goto_search: PropTypes.func,\n    }\n\n    renderAnalysisOption(option) {\n        var handleClick\n        console.log(option);\n        if (option.heading === 'Search') {\n            handleClick = this.props.goto_search;\n            console.log('Search');\n        } else if (option.heading === 'Download by Class') {\n            handleClick = this.props.goto_classdownload;\n            console.log('Download');\n        }\n        return (\n            <AnalysisOption\n                key={option.heading}\n                heading={option.heading}\n                description={option.description}\n                handleClick={handleClick}\n            />\n        );\n    }\n\n    render() {\n        if(this.props.onClassify) {\n            return <Redirect to=\"/\" />\n        }\n\n        if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook\" />\n        }\n\n        if(this.props.onClassDownload) {\n            return <Redirect to=\"/analysis/classdownload\" />\n        }\n\n        if(this.props.onSearch) {\n            return <Redirect to=\"/analysis/search\" />\n        }\n\n        return(\n            <div>\n                <Header />\n                <div className='main'>\n                    <div className=\"page\">\n                        <div>\n                            <div className=\"notebook-heading\">\n                                <h1 className=\"notebook-header\">Analysis</h1>\n                            </div>\n                            <div className=\"analysis-options\">\n                                {this.state.analysisOptions.map((option) => (this.renderAnalysisOption(option)))}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    onClassify: state.menu.onClassify,\n    onNotebook: state.menu.onClassify,\n    onClassDownload: state.menu.onClassDownload,\n    onSearch: state.menu.onSearch,\n });\n\nexport default connect(mapStateToProps, { goto_classdownload, goto_search })(Analysis);","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/ClassDownload.js",["129"],"import React, { Component } from 'react';\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport Header from '../layout/Header';\nimport '../../css/analysis-styles.css';\nimport '../../css/notebook-styles.css';\nimport loader from \"./loader.GIF\";\n\nclass ClassDownload extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classes: [],\n            classifiers: [],\n            classChoice: '',\n            optionalChoices: {\n                include: [],\n                exclude: [],\n                number: 'all',\n            },\n            loading: false,\n        }\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        onClassify: PropTypes.bool,\n        onNotebook: PropTypes.bool,\n        onAnalysis: PropTypes.bool,\n    }\n\n    componentDidMount() {\n        axios\n            .get('/classes/IFCB104/')\n            .then((res) => {\n                this.setState({ \n                    classes: res.data.map((c) => (c.display_name)),\n                });\n            })\n            .catch((err) => console.log(err));\n        axios\n            .get('/classdownload/classifiers/')\n            .then((res) => {\n                this.setState({ \n                    classifiers: res.data.options.classifiers,\n                });\n            })\n            .catch((err) => console.log(err));\n    }\n\n    handleClassOptionClick(option) {\n        if (this.state.classChoice !== '') {\n            document.getElementById(this.state.classChoice + '-text').style.color = '#707070';\n            document.getElementById(this.state.classChoice + '-cont').style.backgroundColor = '#F8F7F7';\n        }\n        this.setState({ classChoice: option });\n        document.getElementById(option + '-text').style.color = '#FFFFFF';\n        document.getElementById(option + '-cont').style.backgroundColor = '#16609F';\n    }\n\n    handleClassifierOptionClick(option) {\n        const classifierIncludes = this.state.optionalChoices.include;\n        const classifierExcludes = this.state.optionalChoices.exclude;\n        document.getElementById(option + '-text').style.color = '#707070';\n        document.getElementById(option + '-cont').style.backgroundColor = '#F8F7F7';\n        if (classifierIncludes.includes(option)) {\n            const index = classifierIncludes.indexOf(option);\n            classifierIncludes.splice(index, 1);\n            const newExcludes = classifierExcludes.concat([option]);\n            this.setState({ optionalChoices: {\n                include: classifierIncludes,\n                exclude: newExcludes,\n                number: this.state.optionalChoices.number\n            } });\n            document.getElementById(option + '-cont').style.backgroundColor = '#7dad0b';\n            document.getElementById(option + '-text').style.color = '#FFFFFF';\n        } else if (classifierExcludes.includes(option)) {\n            const index = classifierExcludes.indexOf(option);\n            classifierExcludes.splice(index, 1);\n            this.setState({ optionalChoices: {\n                include: classifierIncludes,\n                exclude: classifierExcludes,\n                number: this.state.optionalChoices.number\n            } });\n            document.getElementById(option + '-cont').style.backgroundColor = '#F8F7F7';\n            document.getElementById(option + '-text').style.color = '#707070';\n        } else {\n            const newIncludes = classifierIncludes.concat([option]);\n            this.setState({ optionalChoices: {\n                include: newIncludes,\n                exclude: classifierExcludes,\n                number: this.state.optionalChoices.number\n            } });\n            document.getElementById(option + '-cont').style.backgroundColor = '#16609F';\n            document.getElementById(option + '-text').style.color = '#FFFFFF';\n        }\n    }\n\n    handleAllClick() {\n        document.getElementById('all-cont').style.backgroundColor = '#16609F';\n        document.getElementById('all-text').style.color = '#FFFFFF';\n        this.setState({ optionalChoices: {\n            include: this.state.optionalChoices.include,\n            exclude: this.state.optionalChoices.exclude,\n            number: 'all'\n        } })\n    }\n\n    handleNumberChange(e) {\n        this.setState({ optionalChoices: {\n            include: this.state.optionalChoices.include,\n            exclude: this.state.optionalChoices.exclude,\n            number: e.target.value\n        } });\n        document.getElementById('all-cont').style.backgroundColor = '#F8F7F7';\n        document.getElementById('all-text').style.color = '#707070';\n    }\n\n    onChange = e => (this.handleNumberChange(e))\n\n    download() {\n        this.setState({ loading: true });\n        const include = (this.state.optionalChoices.include.length < 1) ? ('None') : (this.state.optionalChoices.include.join('-'));\n        const exclude = (this.state.optionalChoices.exclude.length < 1) ? ('None') : (this.state.optionalChoices.exclude.join('-'));\n        const number = this.state.optionalChoices.number\n        document.getElementById('download-src').src = 'http://ifcb-classification.herokuapp.com/classdownload/' + this.state.classChoice + '/' + include + '/' + exclude + '/' + number + '/'\n    }\n\n    loadFrame() {\n        this.setState({ loading: false });\n        console.log('Loaded')\n    }\n\n    renderClassOption(option) {\n        return(\n            <div className=\"filter-choice download-option\" id={option + '-cont'} onClick={() => this.handleClassOptionClick(option)}>\n                <p className=\"filter-choice-text\" id={option + '-text'}>{option}</p>\n            </div>\n        );\n    }\n\n    renderClassifierOption(option) {\n        return(\n            <div className=\"filter-choice download-option\" id={option + '-cont'} onClick={() => this.handleClassifierOptionClick(option)}>\n                <p className=\"filter-choice-text\" id={option + '-text'}>{option}</p>\n            </div>\n        );\n    }\n\n    renderLoader() {\n        return <img src={loader} alt=\"Loading targets...\" width=\"50\" loop=\"infinite\" style={{margin:'2vw 0 0 0'}}></img>\n      }\n\n    render() {\n        if(this.props.onClassify) {\n            return <Redirect to=\"/\" />\n        }\n\n        if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook\" />\n        }\n\n        if(this.props.onAnalysis) {\n            return <Redirect to=\"/analysis\" />\n        }\n\n        return(\n            <div>\n                <Header />\n                <div className='main'>\n                    <div className=\"page\">\n                        <div>\n                            <div className=\"notebook-heading\">\n                                <h1 className=\"notebook-header\">Analysis</h1>\n                            </div>\n                            <h2 className=\"analysis-option-heading page-heading\">Download by Class</h2>\n                            <div className=\"download-steps\">\n                                <div className=\"download-step-container\">\n                                    <div className=\"download-step-heading\">\n                                        <div className=\"step-icon\">1</div>\n                                        <p className=\"download-step-text\">Choose a classification</p>\n                                    </div>\n                                    <p className=\"download-step-subtext\">Select one classification name.</p>\n                                    <div className=\"class-options\">\n                                        {this.state.classes.map((option) => (this.renderClassOption(option)))}\n                                    </div>\n                                </div>\n                                <div>\n                                    <div className=\"download-step-container classifiers\">\n                                        <div className=\"download-step-heading\">\n                                            <div className=\"step-icon\">2</div>\n                                            <p className=\"download-step-text\">Choose classifiers (optional)</p>\n                                        </div>\n                                        <p className=\"download-step-subtext\">Click an option once to include it or twice to exclude it.</p>\n                                        <div className=\"class-options\">\n                                            {this.state.classifiers.map((option) => (this.renderClassifierOption(option.editor)))}\n                                        </div>\n                                    </div>\n                                    <div className=\"download-step-container\">\n                                    <div className=\"download-step-heading\">\n                                        <div className=\"step-icon\">3</div>\n                                        <p className=\"download-step-text\">Choose number (optional)</p>\n                                    </div>\n                                    <p className=\"download-step-subtext\">Enter in the number of images to include.</p>\n                                    <div className=\"class-options\">\n                                        <form>\n                                        <input \n                                            type=\"number\" \n                                            id=\"number\" \n                                            name=\"number\" \n                                            min=\"1\"\n                                            onChange={this.onChange}\n                                            value={this.state.optionalChoices.number}\n                                        />\n                                        </form>\n                                        <div className=\"filter-choice download-option\" id={'all-cont'}>\n                                            <p className=\"filter-choice-text\" id={'all-text'} onClick={() => this.handleAllClick()}>All</p>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"download-button\" onClick={() => this.download()}>Download</div>\n                                <div style={{display: 'none'}}>\n                                    <iframe id=\"download-src\" onload={() => this.loadFrame()} />\n                                </div>\n                                <div>{ (this.state.loading) ? this.renderLoader() : <div/> }</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    onClassify: state.menu.onClassify,\n    onNotebook: state.menu.onClassify,\n    onAnalysis: state.menu.onAnalysis,\n });\n\nexport default connect(mapStateToProps)(ClassDownload);","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Search.js",["130"],"import React, { Component } from 'react';\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport Header from '../layout/Header';\nimport { searchTargets, getBins } from \"../../actions/classify\";\nimport '../../css/analysis-styles.css';\nimport '../../css/notebook-styles.css';\nimport '../../css/classify-styles.css';\nimport loader from \"./loader.GIF\";\n\nclass Target extends Component {\n    \n    showMore() {\n        document.getElementById(this.props.target.id + '-info').style.display = 'block';\n        document.getElementById(this.props.target.id + '-preview').style.display = 'none';\n        \n        const initialWidth = Number(this.props.target.height);\n        const idWidth = document.getElementById(this.props.target.id + '-info').style.width;\n        const scale = idWidth / initialWidth;\n        const style = {height: String(Number(this.props.target.height)*0.056*scale)+'vw'}\n        document.getElementById(this.props.target.id + '-image').style = style;\n\n    }\n\n    showLess() {\n        document.getElementById(this.props.target.id + '-info').style.display = 'none';\n        document.getElementById(this.props.target.id + '-preview').style.display = 'flex';\n        const style = String(Number(this.props.target.height)*0.056)+'vw'\n        document.getElementById(this.props.target.id + '-image').style.height = style;\n    }\n    \n    render() {\n        if (this.props.bins !== []) {\n            \n            const desiredBin = (element) => element.id === this.props.target.bin;\n            const binIndex = this.props.bins.findIndex(desiredBin);\n            const bin = this.props.bins[binIndex];\n            const url = 'http://128.114.25.154:8888/' + bin.timeseries + '/' + bin.file + '_' + bin.ifcb + '_' + this.props.target.number + '.jpg';\n            \n            return(\n                <div className=\"search-result\">\n                    <img src={url} className=\"image searh-result-image\"\n                        alt={this.props.target.class_name}\n                        id={this.props.target.id + '-image'}\n                        style={{height: String(Number(this.props.target.height)*0.056)+'vw'}}>\n                    </img>\n                    <div className='id' id={this.props.target.id + '-preview'}>\n                        <div className='search-result-plus' id={this.props.target.id + '-plus'} onClick={() => this.showMore()}><p className=\"plus\">+</p></div>\n                    </div>\n                    <div className='id description' style={{display: 'none'}} id={this.props.target.id + '-info'}>\n                        <div className='search-result-plus exit' onClick={() => this.showLess()}>\n                            <p className=\"plus x\">X</p>\n                        </div>\n                        <p className=\"description-heading\">{this.props.target.class_name}</p>\n                        <div style={{display: 'flex'}}>\n                            <p className=\"description-label\">{'File: '}</p>\n                            <p>{bin.file}</p>\n                        </div>\n                        <div style={{display: 'flex'}}>\n                            <p className=\"description-label\">{'IFCB: '}</p>\n                            <p>{bin.ifcb}</p>\n                        </div>\n                        <div style={{display: 'flex'}}>\n                            <p className=\"description-label\">{'Target: '}</p>\n                            <p>{this.props.target.number}</p>\n                        </div>\n                        <div style={{display: 'flex'}}>\n                            <p className=\"description-label\">{'Classifer: '}</p>\n                            <p>{this.props.target.editor}</p>\n                        </div>\n                        <div style={{display: 'flex'}}>\n                            <p className=\"description-label\">{'Date: '}</p>\n                            <p>{this.props.target.date}</p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return <div/>\n        }\n    }\n}\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            targets: [[]],\n            bins: [[]],\n            basicSearch: '',\n            loading: false,\n            renderable: false,\n        }\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        onClassify: PropTypes.bool,\n        onNotebook: PropTypes.bool,\n        onAnalysis: PropTypes.bool,\n        searchTargets: PropTypes.func,\n        targetSearchResults: PropTypes.array,\n        binsSearchResults: PropTypes.array,\n    }\n\n    onChange = e => this.setState({ basicSearch: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.setState({ renderable: false });\n        document.getElementById(\"no-results\").style.display = 'none';\n        this.props.searchTargets(this.state.basicSearch);\n        this.setState({ \n            targets: this.props.targetSearchResults\n        });\n        if (this.props.targetSearchResults === [[]]) {\n            document.getElementById(\"no-results\").style.display = 'flex';\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.targetSearchResults !== this.props.targetSearchResults) {\n            var targets;\n            if (this.props.targetSearchResults[0].length !== undefined) {\n                targets = this.props.targetSearchResults[0];\n            } else {\n                targets = this.props.targetSearchResults;\n            }\n            this.props.getBins(targets.map(target => target.bin));\n        }\n\n        if (prevProps.binsSearchResults !== this.props.binsSearchResults) {\n            this.setState({\n                renderable: true,\n            });\n        }\n    }\n\n    renderTarget(target) {\n        return( \n            <Target\n                target={target}\n                bins={this.props.binsSearchResults[0]}\n                key={target.id}\n            />\n        );\n    }\n\n    renderLoader() {\n        return <img src={loader} alt=\"Loading targets...\" width=\"80\" loop=\"infinite\"></img>\n    }\n\n    render() {\n        if(this.props.onClassify) {\n            return <Redirect to=\"/\" />\n        }\n\n        if(this.props.onNotebook) {\n            return <Redirect to=\"/notebook\" />\n        }\n\n        if(this.props.onAnalysis) {\n            return <Redirect to=\"/analysis\" />\n        }\n\n        var targets;\n        var resultsDisplay;\n        ((typeof this.props.targetSearchResults[0].length !== \"undefined\")) \n           ? (targets = this.props.targetSearchResults[0]) : (targets = this.props.targetSearchResults);\n        (targets.length === 0) ? (resultsDisplay = {display: 'flex'}) : (resultsDisplay = {display: 'none'})\n        \n           return(\n            <div>\n                <Header />\n                <div className='main'>\n                    <div className=\"page\">\n                        <div>\n                            <div className=\"notebook-heading\">\n                                <h1 className=\"notebook-header\">Analysis</h1>\n                            </div>\n                            <h2 className=\"analysis-option-heading page-heading\">Search</h2>\n                            <div>\n                                <form className=\"search-form\" id=\"search-form\" onSubmit={this.onSubmit}>\n                                    <div className=\"search-bar\">\n                                        <div className=\"search-icon\"></div>\n                                        <input\n                                            type=\"text\"\n                                            className=\"search-input\"\n                                            name=\"basicSearch\"\n                                            onChange={this.onChange}\n                                            value={this.state.basicSearch}\n                                        />\n                                    </div>\n                                </form>\n                            </div>\n                            <div>\n                                <p className=\"no-results\" id=\"no-results\" style={resultsDisplay}>No results</p>\n                                <div className=\"image-grid\">\n                                    {\n                                    (this.state.loading) ? this.renderLoader() :\n                                    (this.state.renderable) ? (targets.map((target) => this.renderTarget(target))) : (<div/>)\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    onClassify: state.menu.onClassify,\n    onNotebook: state.menu.onClassify,\n    onAnalysis: state.menu.onAnalysis,\n    targetSearchResults: state.classify.targetSearchResults,\n    binsSearchResults: state.classify.binsSearchResults,\n });\n\nexport default connect(mapStateToProps, { searchTargets, getBins })(Search);",{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":939,"column":16,"nodeType":"137","endLine":939,"endColumn":44},{"ruleId":"138","severity":1,"message":"139","line":1079,"column":9,"nodeType":"140","messageId":"141","endLine":1079,"endColumn":17},{"ruleId":"138","severity":1,"message":"142","line":1080,"column":9,"nodeType":"140","messageId":"141","endLine":1080,"endColumn":13},{"ruleId":"143","severity":1,"message":"144","line":1089,"column":13,"nodeType":"137","endLine":1089,"endColumn":78},{"ruleId":"138","severity":1,"message":"145","line":4,"column":8,"nodeType":"140","messageId":"141","endLine":4,"endColumn":17},{"ruleId":"146","severity":1,"message":"147","line":20,"column":1,"nodeType":"148","endLine":59,"endColumn":2},{"ruleId":"146","severity":1,"message":"147","line":25,"column":1,"nodeType":"148","endLine":85,"endColumn":2},{"ruleId":"138","severity":1,"message":"149","line":12,"column":8,"nodeType":"140","messageId":"141","endLine":12,"endColumn":14},{"ruleId":"138","severity":1,"message":"150","line":189,"column":11,"nodeType":"140","messageId":"141","endLine":189,"endColumn":16},{"ruleId":"151","severity":1,"message":"152","line":328,"column":41,"nodeType":"153","messageId":"154","endLine":328,"endColumn":68},{"ruleId":"155","severity":1,"message":"156","line":39,"column":34,"nodeType":"157","messageId":"158","endLine":39,"endColumn":74},{"ruleId":"159","severity":1,"message":"160","line":40,"column":21,"nodeType":"140","messageId":"161","endLine":40,"endColumn":26},{"ruleId":"138","severity":1,"message":"162","line":55,"column":42,"nodeType":"140","messageId":"141","endLine":55,"endColumn":48},{"ruleId":"138","severity":1,"message":"163","line":55,"column":50,"nodeType":"140","messageId":"141","endLine":55,"endColumn":57},{"ruleId":"138","severity":1,"message":"164","line":55,"column":59,"nodeType":"140","messageId":"141","endLine":55,"endColumn":69},{"ruleId":"138","severity":1,"message":"165","line":55,"column":71,"nodeType":"140","messageId":"141","endLine":55,"endColumn":75},{"ruleId":"138","severity":1,"message":"166","line":55,"column":77,"nodeType":"140","messageId":"141","endLine":55,"endColumn":82},{"ruleId":"146","severity":1,"message":"147","line":18,"column":1,"nodeType":"148","endLine":72,"endColumn":2},{"ruleId":"138","severity":1,"message":"167","line":2,"column":8,"nodeType":"140","messageId":"141","endLine":2,"endColumn":13},{"ruleId":"138","severity":1,"message":"168","line":8,"column":43,"nodeType":"140","messageId":"141","endLine":8,"endColumn":56},{"ruleId":"169","severity":1,"message":"170","line":28,"column":50,"nodeType":"171","messageId":"172","endLine":29,"endColumn":74},{"ruleId":"169","severity":1,"message":"170","line":30,"column":61,"nodeType":"171","messageId":"172","endLine":31,"endColumn":83},{"ruleId":"135","severity":1,"message":"136","line":226,"column":37,"nodeType":"137","endLine":226,"endColumn":97},{"ruleId":"138","severity":1,"message":"167","line":2,"column":8,"nodeType":"140","messageId":"141","endLine":2,"endColumn":13},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-unused-vars","'previous' is assigned a value but never used.","Identifier","unusedVar","'next' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","'PropTypes' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'loader' is defined but never used.","'flags' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'reply'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'reply' is already defined.","redeclared","'parent' is assigned a value but never used.","'replies' is assigned a value but never used.","'timeseries' is assigned a value but never used.","'file' is assigned a value but never used.","'image' is assigned a value but never used.","'axios' is defined but never used.","'searchTargets' is defined but never used.","no-multi-str","Multiline support is limited to browsers supporting ES5 only.","Literal","multilineString","no-global-assign","no-unsafe-negation"]