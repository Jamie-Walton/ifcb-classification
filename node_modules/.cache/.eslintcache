[{"/Users/jamiewalton/Desktop/Classification_v3/src/index.js":"1","/Users/jamiewalton/Desktop/Classification_v3/src/App.js":"2","/Users/jamiewalton/Desktop/Classification_v3/src/reportWebVitals.js":"3","/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Register.js":"4","/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Login.js":"5","/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Header.js":"6","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Annotations.js":"7","/Users/jamiewalton/Desktop/Classification_v3/src/components/common/PrivateRoute.js":"8","/Users/jamiewalton/Desktop/Classification_v3/src/store.js":"9","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/index.js":"10","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/auth.js":"11","/Users/jamiewalton/Desktop/Classification_v3/src/actions/types.js":"12","/Users/jamiewalton/Desktop/Classification_v3/src/actions/auth.js":"13","/Users/jamiewalton/Desktop/Classification_v3/src/actions/classify.js":"14","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/classify.js":"15","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Notebook.js":"16","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/BinNote.js":"17","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Note.js":"18","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/menu.js":"19","/Users/jamiewalton/Desktop/Classification_v3/src/actions/menu.js":"20","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Analysis.js":"21","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/ClassDownload.js":"22"},{"size":461,"mtime":1626905198221,"results":"23","hashOfConfig":"24"},{"size":1486,"mtime":1629423772417,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1626233027000,"results":"26","hashOfConfig":"24"},{"size":4308,"mtime":1626905198206,"results":"27","hashOfConfig":"24"},{"size":3065,"mtime":1626905198206,"results":"28","hashOfConfig":"24"},{"size":3364,"mtime":1629429596856,"results":"29","hashOfConfig":"24"},{"size":38516,"mtime":1629391026785,"results":"30","hashOfConfig":"24"},{"size":757,"mtime":1627067540186,"results":"31","hashOfConfig":"24"},{"size":382,"mtime":1626905198223,"results":"32","hashOfConfig":"24"},{"size":195,"mtime":1627676355016,"results":"33","hashOfConfig":"24"},{"size":1418,"mtime":1627676373779,"results":"34","hashOfConfig":"24"},{"size":1057,"mtime":1629423835248,"results":"35","hashOfConfig":"24"},{"size":2564,"mtime":1627317963366,"results":"36","hashOfConfig":"24"},{"size":3848,"mtime":1628613401793,"results":"37","hashOfConfig":"24"},{"size":1595,"mtime":1628613401802,"results":"38","hashOfConfig":"24"},{"size":14163,"mtime":1629338037095,"results":"39","hashOfConfig":"24"},{"size":4612,"mtime":1628613401795,"results":"40","hashOfConfig":"24"},{"size":3705,"mtime":1628613401797,"results":"41","hashOfConfig":"24"},{"size":1334,"mtime":1629424380861,"results":"42","hashOfConfig":"24"},{"size":550,"mtime":1629423818790,"results":"43","hashOfConfig":"24"},{"size":3408,"mtime":1629430732926,"results":"44","hashOfConfig":"24"},{"size":6919,"mtime":1629435528701,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"q77g26",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jamiewalton/Desktop/Classification_v3/src/index.js",[],["98","99"],"/Users/jamiewalton/Desktop/Classification_v3/src/App.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reportWebVitals.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Register.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/accounts/Login.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/layout/Header.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Annotations.js",["100","101"],"import React from \"react\";\nimport axios from \"axios\";\nimport Header from '../layout/Header';\nimport BinNote from './BinNote';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\nimport { classifyTarget, classifyRow, classifyAll, save, sync } from \"../../actions/classify\";\n\nimport '../../css/classify-styles.css';\nimport loader from \"./loader.GIF\";\nimport toTop from \"../../icons/to-top.png\";\nimport dropdown from \"../../icons/dropdown.png\";\n\nclass TimeSeriesControl extends React.Component {\n    handleDropdown() {\n        document.getElementById('timeseries_dropdown').classList.toggle('show');\n        document.getElementById('timeseries_label').classList.toggle('hide');\n        document.getElementById('timeseries_bar').classList.toggle('accommodate-dropdown');\n    }\n    \n    render() {\n        const options = this.props.options.map((x) => \n        <li key={x} onClick={() => this.props.onClick(x)}><button id={x}>{x}</button></li>)\n        return (\n            <div>\n                <div className=\"time time-series\" id='timeseries_bar'>\n                    <p className=\"time-selection\">{this.props.timeseries}</p>\n                    <img src={dropdown} className=\"time-icon\" \n                    alt={'Select time series'} onClick={() => this.handleDropdown()}></img>\n                </div>\n                <div className=\"time-dropdown time-series\" id='timeseries_dropdown'>\n                    <ul className=\"timeseries-option\">{options}</ul>\n                </div>\n                <p className=\"time-label\" id='timeseries_label'>Time Series</p>\n            </div>\n        );\n    }\n}\n\nclass YearControl extends React.Component {\n    handleDropdown() {\n        document.getElementById('year_dropdown').classList.toggle('show');\n        document.getElementById('year_label').classList.toggle('hide');\n        document.getElementById('year_bar').classList.toggle('accommodate-dropdown');\n    }\n    \n    render() {\n        const options = this.props.options.map((x) => \n        <li key={x} onClick={() => this.props.onClick(x)}><button id={x}>{x}</button></li>)\n        return(\n            <div>\n                <div className=\"time\" id='year_bar'>\n                    <p className=\"time-selection\">{this.props.year}</p>\n                    <img src={dropdown} className=\"time-icon\" \n                    alt={'Select Year'} onClick={() => this.handleDropdown()}></img>\n                </div>\n                <div className=\"time-dropdown\" id='year_dropdown'>\n                    <ul className=\"year-option\">{options}</ul>\n                </div>\n                <p className=\"time-label\" id='year_label'>Year</p>\n            </div>\n        );\n    }\n}\n\nclass Bar extends React.Component {\n    handleHover() {\n        document.getElementById('day' + this.props.number).classList.toggle('show');\n    }\n    render() {\n        return(\n            <div className=\"bar-container\">\n                <div className=\"day\" id={'day' + this.props.number}>{this.props.day}</div>\n                <div className=\"bar\" id={'bar' + this.props.number} \n                    onClick={() => this.props.onClick(this.props.number)}\n                    onMouseEnter={() => this.handleHover()}\n                    onMouseLeave={() => this.handleHover()}\n                    style={{height: String(this.props.height*8) + 'vw'}}></div>\n            </div>\n        );}\n  }\n\nclass DayControl extends React.Component {\n    handleDropdown() {\n        document.getElementById('day_dropdown').classList.toggle('show-day');\n    }\n    \n    render() {\n        return(\n            <div>\n                <div className=\"time\" id='day_bar'>\n                    <p className=\"time-selection\" id=\"day_text\">{this.props.day}</p>\n                    <img src={dropdown} className=\"time-icon\" \n                    alt={'Select Day'} onClick={() => this.handleDropdown()}></img>\n                </div>\n                <p className=\"time-label\" id='day_label'>Day</p>\n            </div>\n        );\n    }\n}\n\nclass FileControl extends React.Component {\n    handleDropdown() {\n        document.getElementById('file_dropdown').classList.toggle('show');\n        document.getElementById('file_label').classList.toggle('hide');\n        document.getElementById('file_bar').classList.toggle('accommodate-dropdown');\n    }\n    \n    render() {\n        const options = this.props.options.map((x) => \n        <li key={x} onClick={() => this.props.onClick(x)}><button id={x}>{x}</button></li>)\n        var fileName = this.props.file;\n        const file = fileName.slice(9,12) + ':' + fileName.slice(12,14) + ':' + fileName.slice(14,16) + 'Z';\n        return(\n            <div>\n                <div className=\"time\" id='file_bar'>\n                    <p className=\"time-selection\">{file}</p>\n                    <img src={dropdown} className=\"time-icon\" \n                    alt={'Select File'} onClick={() => this.handleDropdown()}></img>\n                </div>\n                <div className=\"time-dropdown\" id='file_dropdown'>\n                    <ul className=\"file-option\">{options}</ul>\n                </div>\n                <p className=\"time-label\" id='file_label'>File</p>\n            </div>\n        );\n    }\n}\n\nclass SetControl extends React.Component {\n    handleDropdown() {\n        document.getElementById('set_dropdown').classList.toggle('show');\n        document.getElementById('set_label').classList.toggle('hide');\n        document.getElementById('set_bar').classList.toggle('accommodate-dropdown');\n    }\n    \n    render() {\n        const classList = this.props.options;\n        const options = classList.map((x) => \n        <li key={x} onClick={() => this.props.onClick(x)}><button id={x}>{x}</button></li>)\n        return(\n            <div>\n                <div className=\"set\" id=\"set_bar\">\n                <p className=\"time-selection\">{this.props.set}</p>\n                <img src={dropdown} className=\"time-icon\"\n                alt={'Select Set'} onClick={() => this.handleDropdown()}></img>\n                </div>\n                <div className=\"set-dropdown\" id='set_dropdown'>\n                    <ul className=\"set-option\">{options}</ul>\n                </div>\n                <p className=\"time-label\" id=\"set_label\">Set</p>\n            </div>\n        );\n    }\n}\n\nclass Group extends React.Component {  \n    render() {\n        return(\n            <div>\n                <div className=\"set\" id=\"group_bar\" onClick={() => this.props.onClick(this.props.group)}>\n                    <p className=\"time-selection\">{this.props.group}</p>\n                </div>\n                <p className=\"time-label\" id=\"group_label\">Group</p>\n            </div>\n        );\n    }\n}\n\nclass Sort extends React.Component {  \n    render() {\n        return(\n            <div>\n                <div className=\"set\" id=\"sort_bar\" onClick={() => this.props.onClick(this.props.sort)}>\n                    <p className=\"time-selection\">{this.props.sort}</p>\n                </div>\n                <p className=\"time-label\" id=\"sort_label\">Sort</p>\n            </div>\n        );\n    }\n}\n\nclass PlanktonImage extends React.Component {\n\n  render() {\n  const url = this.props.nameSpace + this.props.timestamp + '_' + this.props.ifcb + '_' + this.props.targetNum + '.jpg';\n      return(\n          <img src={url} className=\"image\" \n          alt={this.props.classification} \n          id={this.props.targetNum + '-image'}\n          style={{height: String(Number(this.props.height)*this.props.scale)+'vw'}}></img>\n      );\n  }\n}\n\nclass Plankton extends React.Component {\n  \n  renderImage() {  \n    return (\n        <PlanktonImage \n            nameSpace={'http://128.114.25.154:8888/' + this.props.timeseries + '/'}\n            timestamp={this.props.timestamp}\n            timeseries={this.props.timeseries}\n            ifcb={this.props.ifcb}\n            targetNum={this.props.targetNum}\n            classification={this.props.class_name}\n            height={this.props.height}\n            scale={this.props.scale}\n        />\n      );\n  }\n\n  getHeight() {\n    if (this.props.height < 0) {\n      return '5'\n    } else {\n        return String((Number(this.props.height) * this.props.scale) + 2.25)\n    }\n  }\n\n  getWidth() {\n    if (this.props.width < 0) {\n      return '5'\n    } else {\n        return String(Number(this.props.width)*this.props.scale)\n    }\n  }\n\n  handleInfoClick() {\n    this.props.infoChange(this.props.targetNum, false, true);\n    document.getElementById(this.props.targetNum + '-info').classList.toggle('show-info');\n    document.getElementById(this.props.targetNum + '-image').classList.toggle('hide');\n    document.getElementById(this.props.targetNum).classList.toggle('hide');\n  }\n\n  render() {\n    const infoStyle = {\n        height: this.getHeight() + 'vw',\n        width: this.getWidth() + 'vw'\n    };\n    \n    return(\n          <div>\n            <div className=\"plankton-button\" id=\"plankton-button\" onClick={() => this.props.onClick(this.props.targetNum)}>\n                <div className=\"plankton\">\n                    {this.renderImage()}\n                    <div className=\"info\" onMouseEnter={() => this.props.infoChange(this.props.targetNum, false, false)} \n                        onMouseLeave={() => this.props.infoChange(this.props.targetNum, true, false)}\n                        onClick={() => this.handleInfoClick()}></div>\n                    <div className=\"info-div\" id={this.props.targetNum + '-info'} style={infoStyle}>\n                        <p className=\"classification-info\">{this.props.class_name}</p>\n                        <p className=\"target-num-info\">{'Target ' + this.props.targetNum}</p>\n                        <p className=\"editor-info\">{'Classified by ' + this.props.editor + ',\\n' + this.props.date}</p>\n                        {(this.props.infoShowing.includes(this.props.targetNum)) ? \n                        <BinNote\n                            timeseries={this.props.timeseries}\n                            ifcb={this.props.ifcb}\n                            file={this.props.file}\n                            type='target'\n                            image={this.props.targetNum}\n                        /> :\n                        <div></div>\n                        }\n                    </div>\n                    <div className='id' id={this.props.targetNum}>\n                        <p className='id-text' id={this.props.targetNum + '-text'}>{this.props.class_abbr}</p>\n                    </div>\n                </div>\n            </div>\n          </div>\n      );\n  }\n}\n\nclass Micrometer extends React.Component {\n    render() {\n        return(\n            <div className=\"drag-box\">\n                <div className=\"micrometer-block\"\n                style={{width: (String(34*this.props.scale) + 'vw')}}></div>\n                <p className=\"micrometer-text\">10µm</p>\n            </div>\n        );\n    }\n}\n\nclass ClassMenu extends React.Component {\n  render() {\n      const options = this.props.classes.map((x) => \n      <li key={x}><button id={x} onClick={() => this.props.onClick(x)}>{x}</button></li>);\n      return(\n      <div className=\"sidebar\">\n      <div className=\"class-menu\">\n          <div className=\"control-box\">\n            <div className=\"annotation-control\" onClick={() =>  this.props.handleSelectAllClick()}>\n                <p className=\"control-text\">Select All</p>\n            </div>\n            <div className=\"annotation-control\" onClick={() =>  this.props.handleUndoClick()}>\n                <p className=\"control-text\">Undo</p>\n            </div>\n          </div>\n          <ul className=\"class-menu-options\">{options}</ul>\n      </div>\n      <Micrometer scale={this.props.scale}/>\n      </div>\n      );\n  }\n}\n\nclass Annotations extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          loading: true,\n          classes: [],\n          classAbbrs: [],\n          classPicker: 'Unclassified',\n          classMark: 'UNC',\n          planktonClickEnabled: true,\n          infoShowing: [],\n          bin: {timeseries:'', ifcb:'', year:'', day:'', file:''},\n          timeSeriesOptions: [],\n          yearOptions: [],\n          dayOptions: [],\n          barHeights: [],\n          fileOptions: [],\n          setOptions: [],\n          targets: [],\n          history: [],\n          rows: [],\n          scale: 0.056,\n          set: 1,\n          group: 'Class',\n          sort: 'A to Z',\n          sortCode: 'AZ',\n          lastScroll: 0,\n      }\n  }\n\n  static propTypes = {\n    classifyTarget: PropTypes.func.isRequired,\n    classifyRow: PropTypes.func.isRequired,\n    classifyAll: PropTypes.func.isRequired,\n    save: PropTypes.func.isRequired,\n    isSaving: PropTypes.bool,\n    sync: PropTypes.func.isRequired,\n    isSyncing: PropTypes.bool,\n    user: PropTypes.object,\n    onNotebook: PropTypes.bool,\n    onAnalysis: PropTypes.bool,\n  };\n\n  getNewTimeSeries(option) {\n    this.setState({\n        loading: true,\n        bin: {\n            timeseries: option,\n            ifcb: this.state.bin.ifcb,\n            year: this.state.bin.year,\n            day: this.state.bin.day,\n            file: this.state.bin.file,\n            edited: false\n        }\n    });\n    axios\n      .get('/classes/' + option + '/')\n      .then((res) => {\n        this.setState({ \n          classes: res.data.map((c) => (c.display_name.replace('_', ' '))),\n          classAbbrs: res.data.map((c) => (c.abbr))\n        });\n      })\n      .catch((err) => console.log(err));\n    axios\n        .get('/process/timeseries/' + option + '/' + this.state.sortCode + '/' + Math.round(this.state.scale * 10000) + '/')\n        .then((binResponse) => {\n            this.setState({ \n                bin: binResponse.data.bin,\n                yearOptions: binResponse.data.options.year_options.reverse(),\n                barHeights: binResponse.data.options.day_options[0],\n                dayOptions: binResponse.data.options.day_options[1],\n                fileOptions: binResponse.data.options.file_options,\n                setOptions: binResponse.data.options.set_options,\n                rows: binResponse.data.options.rows,\n                set: 1\n            });\n            axios\n                .get('/process/targets/' + option + '/' + binResponse.data.bin.file + '/1/' + this.state.sortCode + '/')\n                .then((targetResponse) => {\n                    this.setState({ \n                        targets: targetResponse.data,\n                        history: [JSON.stringify(targetResponse.data)],\n                        loading: false,\n                     });\n                });\n\n    });\n  };\n\n  componentDidMount() {\n    axios\n      .get('/api/timeseries/')\n      .then((res) => {this.setState({ timeSeriesOptions: res.data.map((c) => (c.name)) })})\n      .catch((err) => console.log(err));\n\n    this.getNewTimeSeries('IFCB104');\n  }\n  \n  getNewYear(option) {\n    this.setState({ \n        loading: true, \n        rows: [], \n        targets: [] });  \n    axios\n        .get('/process/year/' + this.state.bin.timeseries + '/' + option + '/' + this.state.sortCode + '/' + Math.round(this.state.scale * 10000) + '/')\n        .then((yearResponse) => {\n            this.setState({ \n                bin: yearResponse.data.bin,\n                barHeights: yearResponse.data.options.day_options[0],\n                dayOptions: yearResponse.data.options.day_options[1],\n                fileOptions: yearResponse.data.options.file_options,\n                setOptions: yearResponse.data.options.set_options,\n                set: 1,\n             });\n             axios\n                .get('/process/targets/' + this.state.bin.timeseries + '/' + yearResponse.data.bin.file + '/1/' + this.state.sortCode + '/')\n                .then((targetResponse) => {\n                    this.setState({ \n                        targets: targetResponse.data,\n                        rows: yearResponse.data.options.rows,\n                        history: [JSON.stringify(targetResponse.data)],\n                        loading: false,\n                     });\n                });\n        })\n        .catch((err) => console.log(err));\n  }\n\n  handleBar(option) {\n    document.getElementById('day_dropdown').classList.toggle('show-day');\n\n    this.setState({\n        loading: true,\n        rows: [],\n        targets: [],\n    });\n    axios\n        .get('/process/day/' + this.state.bin.timeseries + '/' + this.state.bin.year + '/' + option + '/' + this.state.sortCode + '/' + Math.round(this.state.scale * 10000) + '/')\n        .then((dayResponse) => {\n            this.setState({ \n                bin: dayResponse.data.bin,\n                fileOptions: dayResponse.data.options.file_options,\n                setOptions: dayResponse.data.options.set_options,\n                set: 1\n            });\n            axios\n                .get('/process/targets/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/1/' + this.state.sortCode + '/')\n                .then((targetResponse) => {\n                    this.setState({ \n                        targets: targetResponse.data,\n                        rows: dayResponse.data.options.rows,\n                        history: [JSON.stringify(targetResponse.data)],\n                        loading: false,\n                    });\n                });\n    })\n        .catch((err) => console.log(err));\n  }\n\n  handleNewFile(option) {\n    document.getElementById('file_dropdown').classList.toggle('show');\n    document.getElementById('file_label').classList.toggle('hide');\n    document.getElementById('file_bar').classList.toggle('accommodate-dropdown');\n    \n    const file = 'D' + this.state.bin.year + this.state.bin.day.slice(0,2) + this.state.bin.day.slice(3,5) + \n    option.slice(0,3) + option.slice(4,6) + option.slice(7,9);\n    this.setState({\n        loading: true,\n        bin: {\n            timeseries: this.state.bin.timeseries,\n            ifcb: this.state.bin.ifcb,\n            year: this.state.bin.year,\n            day: this.state.bin.day,\n            file: file,\n            edited: false\n        },\n        set: 1,\n    });\n    axios\n        .get('/process/file/' + this.state.bin.timeseries + '/' + file + '/' + this.state.sortCode + '/' + Math.round(this.state.scale * 10000) + '/')\n        .then((res) => {\n            this.setState({ \n                bin: res.data.bin, \n                setOptions: res.data.options.set_options,\n                rows: res.data.options.rows\n            })\n            axios\n                .get('/process/targets/' + this.state.bin.timeseries + '/' + file + '/1/' + this.state.sortCode + '/')\n                .then((targetResponse) => {\n                    this.setState({ \n                        targets: targetResponse.data,\n                        history: [JSON.stringify(targetResponse.data)],\n                        loading: false,\n                    });\n            });\n        })\n        .catch((err) => console.log(err));\n  }\n\n  handleNewSet(option) {\n    this.setState({\n        loading: true,\n        set: option,\n        rows: [],\n    });\n    axios\n      .get('process/rows/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + option + '/' + this.state.sortCode + '/' + Math.round(this.state.scale * 10000) + '/')\n      .then((rowResponse) => {\n          axios\n            .get('process/targets/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + option + '/' + this.state.sortCode + '/')\n            .then((res) => this.setState({ targets: res.data }))\n            .catch((err) => console.log(err));\n          this.setState({ rows: rowResponse.data.options.rows });\n      })\n      .catch((err) => console.log(err));\n    this.setState({loading: false});\n  }\n\n  handleNewGroup(option) {\n    const group = (this.state.group === 'Class') ? 'Size' : 'Class';\n    const sort = (this.state.group === 'Class') ? 'L to S' : 'A to Z';\n    const code = (this.state.group === 'Class') ? 'LS' : 'AZ';\n    this.setState({\n        loading: true,\n        group: group,\n        sort: sort,\n        sortCode: code,\n    });\n    axios\n      .get('process/targets/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.state.set + '/' + code + '/')\n      .then((res) => {this.setState({ \n          targets: res.data,\n        })})\n      .catch((err) => console.log(err));\n    axios\n      .get('process/rows/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.state.set + '/' + code + '/' + Math.round(this.state.scale * 10000) + '/')\n      .then((res) => {this.setState({ \n          rows: res.data.options.rows,\n        })})\n      .catch((err) => console.log(err));\n    this.setState({loading: false});\n  }\n\n  handleNewSort(option) {\n    const sort = (this.state.group === 'Class') \n        ? (this.state.sort === 'A to Z') ? 'Z to A' : 'A to Z' \n        : (this.state.sort === 'L to S') ? 'S to L' : 'L to S';\n    const code = (this.state.group === 'Class') \n        ? (this.state.sort === 'A to Z') ? 'ZA' : 'AZ' \n        : (this.state.sort === 'L to S') ? 'SL' : 'LS';\n    this.setState({\n        loading: true,\n        sort: sort,\n        sortCode: code,\n    });\n    axios\n      .get('process/targets/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.state.set + '/' + code + '/')\n      .then((res) => {this.setState({ \n          targets: res.data,\n        })})\n      .catch((err) => console.log(err));\n    axios\n      .get('process/rows/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.state.set + '/' + code + '/' + Math.round(this.state.scale * 10000) + '/')\n      .then((res) => {this.setState({ \n          rows: res.data.options.rows,\n        })})\n      .catch((err) => console.log(err));\n    this.setState({loading: false});\n  }\n\n\n  handleMouseOver(element) {\n    element.style.backgroundColor = '#16609F';\n  }\n\n  handleMouseOut(element) {\n    element.style.backgroundColor = '#079CCC';\n  }\n\n  handleMenuClick(name) {\n      const prevMenu = document.getElementById(this.state.classPicker);\n      prevMenu.style.backgroundColor = '#079CCC';\n      prevMenu.addEventListener('mouseover', this.handleMouseOver(prevMenu));\n      prevMenu.addEventListener('mouseout', this.handleMouseOut(prevMenu));\n\n      const ids = document.getElementsByClassName('id');\n      const idTexts = document.getElementsByClassName('id-text');\n      for (let i=0; i<ids.length; i++) {\n          if (ids[i].style.backgroundColor !== '#FFFFFF') {\n            ids[i].style.backgroundColor = '#FFFFFF';\n            idTexts[i].style.color = '#4E4E4E';\n        }\n      }\n\n      const nameAbbr = (element) => element === name;\n      this.setState({ \n          classPicker: name,\n          classMark: this.state.classAbbrs[this.state.classes.findIndex(nameAbbr)],\n        });\n      const menu = document.getElementById(name);\n      menu.removeEventListener('mouseout', this.handleMouseOut(menu));\n      menu.style.backgroundColor = '#16609F';\n      \n      for (const target of this.state.targets) {\n          if (target.class_name === name) {\n              const container = document.getElementById(target.number);\n              const text = document.getElementById(target.number+'-text');\n              container.style.backgroundColor = '#16609F';\n              text.style.color = '#FFFFFF';\n          }\n      }\n  }\n\n  backToTop() {\n    if(document.body.scrollTop > 0 || document.documentElement.scrollTop > 0) {\n        if(document.body.scrollTop !== 0) {\n            this.setState({ lastScroll: document.body.scrollTop });\n        } else {\n            this.setState({ lastScroll: document.documentElement.scrollTop });\n        }\n        document.body.scrollTop = 0; // For Safari\n        document.documentElement.scrollTop = 0;\n    } else {\n        document.body.scrollTop = this.state.lastScroll;\n        document.documentElement.scrollTop = this.state.lastScroll;\n    }\n  }\n\n  flipBackToTop() {\n    if (document.getElementById('to-top') !== null) {\n        if(document.body.scrollTop > 0 || document.documentElement.scrollTop > 0) {\n            document.getElementById('to-top').classList.remove('flip');\n        } else if (!document.getElementById('to-top').classList.contains('flip')) {\n            document.getElementById('to-top').classList.add('flip');\n        }\n    }\n  }\n\n  handleSelectAllClick() {\n      var targets = this.state.targets;\n      const className = this.state.classPicker;\n      const classAbbrFunc = (element) => element === this.state.classPicker;\n      const classAbbr = this.state.classAbbrs[this.state.classes.findIndex(classAbbrFunc)];\n      for (let i = 0; i < targets.length; i++) {\n          targets[i].class_name = className;\n          targets[i].class_abbr = classAbbr;\n          targets[i].editor = this.props.user.username;\n          const container = document.getElementById(targets[i].number);\n          const text = document.getElementById(targets[i].number+'-text');\n          container.style.backgroundColor = '#16609F';\n          text.style.color = '#FFFFFF';\n      }\n      this.setState({ \n          targets: targets,\n          history: this.state.history.concat([JSON.stringify(targets)])\n     });\n     this.props.save(targets, this.state.bin.timeseries, this.state.bin.file, this.state.set, this.state.sortCode);\n  }\n\n  handleUndoClick() {\n    if (this.state.history.length > 1) {\n      const newHistory = this.state.history.slice(0, this.state.history.length-1);\n      const targets = JSON.parse(newHistory[newHistory.length-1]);\n      const rows = this.state.rows;\n      this.setState({ rows: [] });\n      this.setState({\n          targets: targets,\n          history: newHistory,\n      });\n      this.setState({ rows: rows });\n      this.props.save(targets, this.state.bin.timeseries, this.state.bin.file, this.state.set, this.state.sortCode);\n    }\n  }\n\n  handleSyncClick() {\n    document.getElementById('sync').classList.toggle('syncing');\n    this.setState({ rows: [] });\n    this.props.sync(this.state.bin.timeseries, this.state.bin.year, this.state.bin.day, this.state.bin.file);\n    axios\n        .get('/process/targets/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.state.set + '/' + this.state.sortCode + '/')\n        .then((targetResponse) => {\n            this.setState({ \n                targets: targetResponse.data,\n                history: this.state.history.concat([JSON.stringify(targetResponse.data)]),\n             });\n        });\n    axios\n        .get('process/rows/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.state.set + '/' + this.state.sortCode + '/' + Math.round(this.state.scale * 10000) + '/')\n        .then((res) => {this.setState({ \n            rows: res.data.options.rows,\n            loading: false,\n          })})\n        .catch((err) => console.log(err));\n    document.getElementById('sync').classList.toggle('syncing');\n  }\n\n  handleRowClick(j) {\n    var targets = this.state.targets;\n    const row = this.state.rows[j];\n    for (var i in row) {\n        var k = row[i]\n        const classAbbr = (element) => element === this.state.classPicker;\n        targets[k].class_name = this.state.classPicker;\n        targets[k].class_abbr = this.state.classAbbrs[this.state.classes.findIndex(classAbbr)];\n        targets[k].editor = this.props.user.username;\n        const container = document.getElementById(targets[k].number);\n        const text = document.getElementById(targets[k].number+'-text');\n        container.style.backgroundColor = '#16609F';\n        text.style.color = '#FFFFFF';\n    }\n    this.setState({ \n        targets: targets,\n        history: this.state.history.concat([JSON.stringify(targets)])\n    });\n    const start = row[0]\n    const end = row[i];\n    const targetRow = targets.slice(start, end+1);\n\n    this.props.classifyRow(targetRow, this.state.bin.timeseries, this.state.bin.file, this.state.sortCode, start, end);\n  }\n\n  disablePlanktonClick(targetNum, bool, infoShowing) {\n    const infoClassList = document.getElementById(targetNum + '-info').classList;\n    if ((infoShowing) || (infoClassList.contains('show-info'))) {\n        if (!this.state.infoShowing.includes(targetNum)) {\n            this.setState({ infoShowing: this.state.infoShowing.concat([targetNum]) });\n        }\n        this.setState({ planktonClickEnabled: false });\n    } else {\n        const newInfoShowing = this.state.infoShowing.filter(function(item) {\n            return item !== targetNum\n        })\n        this.setState({ planktonClickEnabled: bool, infoShowing: newInfoShowing });\n    }\n  }\n\n  handlePlanktonClick(i) {\n    if (this.state.planktonClickEnabled) {\n        var targets = this.state.targets;\n        const k = targets.findIndex(target => target.number === i);\n        const classAbbr = (element) => element === this.state.classPicker;\n        targets[k].class_name = this.state.classPicker;\n        targets[k].class_abbr = this.state.classAbbrs[this.state.classes.findIndex(classAbbr)];\n        targets[k].editor = this.props.user.username;\n        const history = this.state.history;\n        this.setState({\n            history: history.concat([JSON.stringify(targets)]),\n            targets: targets,\n        });\n        const container = document.getElementById(targets[k].number);\n        const text = document.getElementById(targets[k].number+'-text');\n        container.style.backgroundColor = '#16609F';\n        text.style.color = '#FFFFFF';\n\n        this.props.classifyTarget(targets[k], this.state.bin.timeseries, this.state.bin.file, targets[k].number);\n    }\n  }\n\n  showNotes() {\n      const noteDropdown = document.getElementById(\"note-dropdown\");\n      noteDropdown.classList.toggle('show');\n      const showButton = document.getElementById(\"show-notes-button\");\n      (showButton.innerHTML === \"Show Notes\") ? showButton.innerHTML = \"Hide Notes\" : showButton.innerHTML = \"Show Notes\";\n\n  }\n\n  hideInfo() {\n    const showButton = document.getElementById(\"hide-info-button\");\n    (showButton.innerHTML === \"Hide Info\") ? showButton.innerHTML = \"Show Info\" : showButton.innerHTML = \"Hide Info\";\n    const infoButtons = document.getElementsByClassName('info');\n      for (let i = 0; i < infoButtons.length; i++) {\n          infoButtons[i].classList.toggle('hide');\n      }\n  }\n\n  handleScale(dir) {\n    const initialScale = this.state.scale\n    var  newScale = 0;\n    if (dir === 'up') {\n        newScale = initialScale + 0.01;\n    } else if  (dir === 'down') {\n        newScale = initialScale - 0.01;\n    }\n    axios\n      .get('process/rows/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + this.state.set + '/' + this.state.sortCode + '/' + Math.round((newScale) * 10000) + '/')\n      .then((rowResponse) => { this.setState({ \n          scale: newScale,\n          rows: rowResponse.data.options.rows \n        }); });\n  }\n\n  handleDownload() {\n    document.getElementById('download-src').src = 'http://ifcb-classification.herokuapp.com/mat/' + this.state.bin.ifcb + '/' + this.state.bin.file + '/'\n  }\n\n  renderTimeSeriesControl() {\n    return <TimeSeriesControl\n        timeseries={this.state.bin.timeseries}\n        options={this.state.timeSeriesOptions}\n        onClick={(option) => this.getNewTimeSeries(option)}\n    />;\n  }\n\n  renderYearControl() {\n    return <YearControl\n        year={this.state.bin.year}\n        options={this.state.yearOptions}\n        onClick={(option) => this.getNewYear(option)} \n    />;\n  }\n\n  renderDayControl() {\n    return <DayControl\n        day={this.state.bin.day} \n        options={this.state.barHeights}\n        onClick={(option) => this.handleNewDay(option)}\n    />;\n  }\n\n  renderFileControl() {\n    return <FileControl\n        file={this.state.bin.file} \n        options={this.state.fileOptions}\n        onClick={(option) => this.handleNewFile(option)} \n    />;\n  }\n\n  renderSetControl() {\n    return <SetControl\n        set={this.state.set} \n        options={this.state.setOptions}\n        onClick={(option) => this.handleNewSet(option)} \n    />;\n  }\n\n  renderSort() {\n    return <Sort\n        sort={this.state.sort}\n        onClick={(option) => this.handleNewSort(option)}\n    />;\n  }\n\n  renderGroup() {\n    return <Group\n        group={this.state.group}\n        onClick={(option) => this.handleNewGroup(option)}\n    />;\n  }\n\n  renderSync() {\n    return(\n        <div className=\"round-button sync\" id=\"sync-button\" onClick={() => this.handleSyncClick()}></div>\n    );\n  }\n\n  renderDownload() {\n      return(\n        <div className=\"round-button download\" onClick={() => this.handleDownload()}>\n            <div style={{display: 'none'}}>\n               <iframe id=\"download-src\" />\n            </div>\n        </div>\n      );\n  }\n  \n  renderPlankton(i) {\n      return <Plankton \n              timeseries={this.state.bin.timeseries}\n              file={this.state.bin.file}\n              timestamp={this.state.bin.file}\n              id={i}\n              targetNum={this.state.targets[i].number}\n              class_name={this.state.targets[i].class_name}\n              class_abbr={this.state.targets[i].class_abbr}\n              height={this.state.targets[i].height}\n              width={this.state.targets[i].width}\n              scale={this.state.scale}\n              ifcb={this.state.bin.ifcb}\n              editor={this.state.targets[i].editor}\n              date={this.state.targets[i].date}\n              onClick={(i) => this.handlePlanktonClick(i)}\n              infoChange={(targetNum, bool, infoShowing) => this.disablePlanktonClick(targetNum, bool, infoShowing)}\n              infoShowing={this.state.infoShowing}\n          />;\n  }\n\n  renderRow(row, j) {\n    return(\n        <div className=\"row\">\n            <div className=\"row-select\" \n                alt={'Select row'} onClick={() => this.handleRowClick(j)}>\n            </div>\n            <div className=\"image-row\">\n                {row.map((i) => this.renderPlankton(i))}\n            </div>\n        </div>\n      );\n  }\n\n  renderClassMenu() {\n    return <ClassMenu \n          classes={this.state.classes}\n          onClick={(name) => this.handleMenuClick(name)}\n          handleSelectAllClick={() => this.handleSelectAllClick()}\n          handleUndoClick={() => this.handleUndoClick()}\n          scale={this.state.scale}\n      />;\n  }\n\n  renderBar(gb, i) {\n    return <Bar \n        onClick={(i) => this.handleBar(i)}\n        number={i}\n        height={gb}\n        day={this.state.dayOptions[i]}\n    />;\n  }\n\n  renderLoader() {\n    return <img src={loader} alt=\"Loading targets...\" width=\"80\" loop=\"infinite\"></img>\n  }\n\n  render() { \n    if(this.props.onNotebook) {\n        return <Redirect to=\"/notebook/\" />\n    }\n\n    if(this.props.onAnalysis) {\n        return <Redirect to=\"/analysis/\" />\n    }\n\n    return(\n        <div className='body'>\n        <Header />\n        <div className='main'>\n            <div className=\"page\">\n\n            <div class=\"content\">\n            <a id=\"download\" href=\"../../assets/login-plankton.png\" download></a>\n            <div className=\"inner-content\">\n                <h1>Manual Classifications</h1>\n                <div className=\"time-controls\">\n                    {this.renderTimeSeriesControl()}\n                    {this.renderYearControl()}\n                    {this.renderDayControl()}\n                    {this.renderFileControl()}\n                    {this.renderSetControl()}\n                    {this.renderGroup()}\n                    {this.renderSort()}\n                    <div className=\"show-notes-button\" id=\"show-notes-button\" onClick={() => this.showNotes()}>Show Notes</div>\n                    <div className=\"hide-info-button\" id=\"hide-info-button\" onClick={() => this.hideInfo()}>Hide Info</div>\n                    {this.renderSync()}\n                    {this.renderDownload()}\n                    <div className=\"scale-down\" onClick={() => this.handleScale('down')}></div>\n                    <div className=\"scale-up\" onClick={() => this.handleScale('up')}></div>\n                </div>\n                <div className=\"day-dropdown\" id='day_dropdown'>\n                    <div className=\"timeline\">\n                        <div className=\"bars\">\n                            {this.state.barHeights.map((gb, i) => this.renderBar(gb, i))}\n                        </div>\n                        <div className=\"axis\">\n                            <p className=\"month\">Jan</p>\n                            <p className=\"month\">Feb</p>\n                            <p className=\"month\">Mar</p>\n                            <p className=\"month\">Apr</p>\n                            <p className=\"month\">May</p>\n                            <p className=\"month\">Jun</p>\n                            <p className=\"month\">Jul</p>\n                            <p className=\"month\">Aug</p>\n                            <p className=\"month\">Sep</p>\n                            <p className=\"month\">Oct</p>\n                            <p className=\"month\">Nov</p>\n                            <p className=\"month\">Dec</p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"note-container\" id=\"note-dropdown\">\n                    {((this.state.bin.timeseries) === '' || this.state.bin.file === '') ? \n                    <div></div> :\n                    <BinNote \n                        timeseries={this.state.bin.timeseries}\n                        ifcb={this.state.bin.ifcb}\n                        file={this.state.bin.file}\n                        type='bin'\n                        image='None'\n                    /> }\n                </div>\n                <div className=\"annotations\">\n                    {this.renderClassMenu()}\n                    <div className=\"image-grid\">\n                        {\n                        (this.state.loading || this.props.isSaving) ? this.renderLoader() :\n                        this.state.rows.map((row, j) => this.renderRow(row, j))\n                        }\n                        <img src={toTop} alt=\"Back to Top\" className=\"to-top\" id=\"to-top\" onClick={() => this.backToTop()}></img>\n                    </div>\n                </div>\n            </div>\n            </div>\n\n            </div>\n        </div>\n        <script>{document.addEventListener(\"scroll\", this.flipBackToTop)}</script>\n    </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => ({\n    isSaving: state.classify.isSaving,\n    user: state.auth.user,\n    onNotebook: state.menu.onNotebook,\n    onAnalysis: state.menu.onAnalysis,\n });\n\nexport default connect(mapStateToProps, { classifyTarget, classifyRow, classifyAll, save, sync })(Annotations);","/Users/jamiewalton/Desktop/Classification_v3/src/components/common/PrivateRoute.js",["102"],"import React from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport loader from \"./loader.GIF\";\n\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n    <Route \n        {...rest}\n        render={props => {\n            if(auth.isLoading) {\n                return <img src={loader} alt=\"Loading...\" width=\"80\" loop=\"infinite\"></img>\n            } else if(!auth.isAuthenticated) {\n                return <Redirect to=\"/login\" />\n            } else {\n                return <Component {...props} />;\n            }\n        }}\n    />\n);\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);","/Users/jamiewalton/Desktop/Classification_v3/src/store.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/index.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/auth.js",["103"],"import {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n} from '../actions/types';\n\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            }\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload\n            };\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n            localStorage.setItem('token', action.payload.token);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false\n            }\n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false\n            }\n            \n        default:\n            return state;\n    }\n}\n\n","/Users/jamiewalton/Desktop/Classification_v3/src/actions/types.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/auth.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/classify.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/reducers/classify.js",["104"],"import {\n    SAVE_PROGRESS,\n    SAVE_SUCCESS,\n    SYNC_PROGRESS,\n    SYNC_SUCCESS,\n    NOTES_CHANGED,\n    NOTES_RECORDED,\n    NOTEBOOK_FILTERED,\n    REPLY_RESOLVED,\n    REPLY_OPEN\n} from '../actions/types';\n\nconst initialState = {\n    isSaving: false,\n    isSyncing: false,\n    noteChangeFlag: true,\n    replyChangeFlag: false,\n    notes: []\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case SAVE_PROGRESS:\n            return {\n                ...state,\n                isSaving: true\n            }\n        case SAVE_SUCCESS:\n            return {\n                ...state,\n                isSaving: false\n            }\n        case SYNC_PROGRESS:\n            return {\n                ...state,\n                isSyncing: true\n            }\n        case SYNC_SUCCESS:\n            return {\n                ...state,\n                isSyncing: false\n            }\n        case NOTES_CHANGED:\n            return {\n                ...state,\n                noteChangeFlag: true\n            }\n        case NOTES_RECORDED:\n            return {\n                ...state,\n                noteChangeFlag: false\n            }\n        case REPLY_OPEN:\n            return {\n                ...state,\n                noteChangeFlag: true\n            }\n        case REPLY_RESOLVED:\n            return {\n                ...state,\n                noteChangeFlag: false\n            }\n        case NOTEBOOK_FILTERED:\n            return {\n                ...state,\n                notes: action.payload\n            }\n        default:\n            return state;\n    }\n}","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Notebook.js",["105","106","107"],"import React, { Component } from 'react';\nimport { Grid, AutoSizer, CellMeasurerCache, CellMeasurer } from 'react-virtualized';\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport { filterNotebook, receiveNotesChange } from \"../../actions/classify\";\nimport Header from '../layout/Header';\nimport Note from \"./Note\";\nimport '../../css/notebook-styles.css';\nimport loader from \"./loader.GIF\";\n\nclass Filter extends Component {\n    renderOption(option) {\n        return(\n            <div className=\"filter-option\" onClick={() => this.props.applyFilter(this.props.filter, option)}>{option}</div>\n        );\n    }\n    \n    render() {\n        return(\n            <div>\n                <div className=\"filter-choice\" onClick={() => this.props.onClick(this.props.filter)}>\n                    <p className=\"filter-choice-text\">{this.props.filter}</p>\n                    <p className=\"filter-choice-plus\" id={this.props.filter + \"-plus\"}>+</p>\n                </div>\n                <div className=\"filter-dropdown\" id={this.props.filter + \"-dropdown\"}>\n                    {this.props.options.map((option) => (this.renderOption(option[this.props.filter])))}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Notebook extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            notes: [{\n                \"id\": \"\",\n                \"author\": \"\",\n                \"date\": \"\",\n                \"entry\": \"\",\n                \"parent\": null,\n                \"replies\": [],\n                \"timeseries\": \"\",\n                \"ifcb\": \"\",\n                \"file\": \"\",\n                \"image\": \"\"\n            }],\n            flags: [],\n            classes: [],\n            searchTerms: \"\",\n            authors: [{author: ''}],\n            bins: [{bin: ''}],\n            timeseries: [{timeseries: ''}],\n            ifcbs: [{ifcb: ''}],\n            types: [\n                {type: 'Bin Note'}, \n                {type: 'Target Note'}\n            ],\n            appliedFilters: [],\n        }\n    }\n\n    static propTypes = {\n        user: PropTypes.object,\n        onClassify: PropTypes.bool,\n        onAnalysis: PropTypes.bool,\n        notes: PropTypes.array,\n        filterNotebook: PropTypes.func,\n        receiveNotesChange: PropTypes.func,\n        noteChangeFlag: PropTypes.bool\n    }\n\n    getNotebook(filters) {\n        if (filters.length === 0) {\n            axios\n                .get('/notebook/')\n                .then((res) => {\n                    this.setState({ \n                        notes: res.data,\n                        flags: Array(res.data.length).fill(''),\n                    });\n                })\n                .catch((err) => console.log(err));\n        } else {\n            this.props.filterNotebook(filters);\n        }\n    }\n\n    componentDidMount() {\n        this.getNotebook([]);\n        axios\n            .get('/notebook/filters/')\n            .then((res) => {\n                this.setState({ \n                    authors: res.data.options.authors,\n                    bins: res.data.options.bins,\n                    timeseries: res.data.options.timeseries,\n                    ifcbs: res.data.options.ifcbs,\n                });\n            })\n            .catch((err) => console.log(err));\n    }\n\n    componentDidUpdate() {\n        if (this.props.noteChangeFlag) {\n            this.getNotebook(this.state.appliedFilters);\n            this.props.receiveNotesChange();\n        }\n    }\n\n    handleFilterClick() {\n        document.getElementById('filter_dropdown').classList.toggle('show');\n    }\n\n    onChange = e => this.setState({ searchTerms: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        const newAppliedFilters = this.state.appliedFilters.concat([ {category: \"search\", choice: this.state.searchTerms} ]);\n        this.setState({ appliedFilters: newAppliedFilters })\n        this.props.filterNotebook(newAppliedFilters);\n    }\n\n    handleFilterChoiceClick(option) {\n        document.getElementById(option + '-plus').classList.toggle('rotate-plus');\n        document.getElementById(option + '-dropdown').classList.toggle('show');\n    }\n\n    handleApplyFilter(category, choice) {\n        const duplicates = this.state.appliedFilters.filter(entry => (entry['category'] === category) && (entry['choice'] === choice))\n        if (duplicates.length === 0) {\n            const newAppliedFilters = this.state.appliedFilters.concat([ {category: category, choice: choice} ])\n            this.getNotebook(newAppliedFilters);\n            this.setState({ appliedFilters: newAppliedFilters });\n        }\n    }\n\n    handleRemoveFilter(filter) {\n        const applied = this.state.appliedFilters;\n        const index = applied.findIndex(entry => entry === filter);\n        const newAppliedFilters = applied.slice(0, index).concat(applied.slice(index+1,applied.length));\n        this.setState({ appliedFilters: newAppliedFilters });\n        this.getNotebook(newAppliedFilters);\n    }\n\n    renderFilterChoice(filter, options) {\n        return(\n            <Filter\n                filter={filter}\n                options={options}\n                onClick={(option) => this.handleFilterChoiceClick(option)}\n                applyFilter={(category, choice) => this.handleApplyFilter(category, choice)}\n            />\n        );\n    }\n\n    renderAppliedFilters(filter) {\n        return (\n            <div className=\"filter-choice applied\" onClick={() => this.handleRemoveFilter(filter)}>\n                <p className=\"filter-choice-text applied-text\">{filter.category.toUpperCase() + ': ' + filter.choice}</p>\n                <p className=\"filter-choice-plus applied-text rotate-plus\" id={this.props.filter + \"-plus\"}>+</p>\n            </div>\n        );\n    }\n\n\n  render() {\n    if(this.props.onClassify) {\n        return <Redirect to=\"/\" />\n    }\n\n    if(this.props.onAnalysis) {\n        return <Redirect to=\"/analysis/\" />\n    }\n\n    const cache = new CellMeasurerCache({\n        defaultHeight: 200,\n        minHeight: 200,\n        fixedWidth: true\n      });\n\n    // Grid data as an array of arrays\n    const notes = this.state.notes;\n    const username = this.props.user.username;\n    const flags = this.state.flags\n    var skips = 0;\n    var rendered = [];\n\n    function renderReply(note, count) {\n        return(\n            <div className=\"reply\" style={{margin: \"0 0 0 \" + String(count) + \"vw\"}}>\n                <Note\n                    note={note}\n                    user={username}\n                    timeseries={note.timeseries}\n                    ifcb={note.ifcb}\n                    file={note.file}\n                    type='bin'\n                    image={note.image}\n                />\n                <div className=\"reply\" style={{margin: \"0 0 0 \" + String((count+1)) + \"vw\"}}>\n                {(note.replies.length !== 0) ?\n                    note.replies.map((reply) => renderReply(reply, count+1)) :\n                    <div></div>\n                }\n                </div>\n            </div>\n        );\n    }\n    \n    function cellRenderer({columnIndex, key, parent, rowIndex, style}) {\n        if ((rowIndex === 0) && (columnIndex === 0)) {\n            skips = 0;\n            rendered = [];\n        }\n        var noteIndex = (3*rowIndex) + columnIndex + skips;\n        if ((noteIndex) < notes.length) {\n            if ((notes[noteIndex].parent !== null) || (rendered.includes(noteIndex))) {\n                while (notes[noteIndex].parent !== null || (rendered.includes(noteIndex))) {\n                    noteIndex = noteIndex + 1;\n                    skips = skips + 1;\n                    if (noteIndex >= notes.length) {\n                        return\n                    }\n                }\n            }\n            rendered = rendered.concat([noteIndex]);\n            const note = notes[noteIndex];\n            const count = 0;\n            var url = '';\n            if (note.image !== 'None') {\n                url = 'http://128.114.25.154:8888/' + note.timeseries + '/' + note.file + '_' + note.ifcb + '_' + note.image + '.jpg';\n            }\n            const flatNote = JSON.stringify(note);\n            const includesFlag = flatNote.includes('true');\n            return (\n                <CellMeasurer\n                    cache={cache}\n                    columnIndex={columnIndex}\n                    key={key}\n                    parent={parent}\n                    rowIndex={rowIndex}\n                >\n                {({ measure, registerChild }) => (\n                    <div ref={registerChild} key={key} style={style}>\n                        <div className=\"notebook-note\" onLoad={measure}>\n                            {(url === '') ? <div></div> : \n                            <img src={url} className=\"notebook-image\" alt={'Target ' + note.image}></img>}\n                            {(includesFlag) ? <div className=\"flag\"></div> : <div></div>}\n                            <div className=\"notebook-entry\"> \n                                <div>\n                                    {(note.image === 'None') ? \n                                    <div className=\"notebook-entry\">\n                                        <p className=\"notebook-entry-heading\">{note.timeseries + ', ' + note.file}</p>\n                                    </div> :\n                                    <div className=\"notebook-entry\">\n                                        <p className=\"notebook-entry-heading\">{'Target ' + note.image}</p>\n                                        <p className=\"notebook-entry-subtitle\">{note.timeseries + ', ' + note.file}</p>\n                                    </div>\n                                    }\n                                    <Note\n                                        note={note}\n                                        user={username}\n                                        timeseries={note.timeseries}\n                                        ifcb={note.ifcb}\n                                        file={note.file}\n                                        type='bin'\n                                        image={note.image}\n                                    />\n                                    {(note.replies.length !== 0) ?\n                                        note.replies.map((reply) => renderReply(reply, count+1)) :\n                                        <div></div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n                </CellMeasurer>\n            );\n            } else {return}\n      }\n\n    return (\n            <div>\n                <Header />\n                <div className='main'>\n                    <div className=\"page\">\n                        <div>\n                            <div className=\"notebook-heading\">\n                                <h1 className=\"notebook-header\">Notebook</h1>\n                                <div className=\"filter-button\" onClick={() => this.handleFilterClick()}>Filter</div>\n                            </div>\n                            <div className=\"day-dropdown withmargin\" id='filter_dropdown'>\n                                <form className=\"search-form\" id=\"search-form\" onSubmit={this.onSubmit}>\n                                    <div className=\"search-bar\">\n                                        <div className=\"search-icon\"></div>\n                                        <input\n                                            type=\"text\"\n                                            className=\"search-input\"\n                                            name=\"searchTerms\"\n                                            onChange={this.onChange}\n                                            value={this.state.searchTerms}\n                                        />\n                                    </div>\n                                    <div className=\"applied-filters\">{this.state.appliedFilters.map((filter) => (this.renderAppliedFilters(filter)))}</div>\n                                    <div className=\"filter-buttons\">\n                                        {this.renderFilterChoice('author', this.state.authors)}\n                                        {this.renderFilterChoice('file', this.state.bins)}\n                                        {this.renderFilterChoice('timeseries', this.state.timeseries)}\n                                        {this.renderFilterChoice('ifcb', this.state.ifcbs)}\n                                    </div>\n                                </form>\n                            </div>\n                            <div className=\"notebook-content\">\n                                <AutoSizer>\n                                {({ width, height }) => (\n                                    <Grid\n                                        cellRenderer={cellRenderer}\n                                        columnCount={3}\n                                        columnWidth={document.documentElement.clientWidth*0.29}\n                                        rowHeight={cache.rowHeight}\n                                        deferredMeasurementCache={cache}\n                                        cellRenderer={cellRenderer}\n                                        rowCount={Math.ceil(this.state.notes.length/3)}\n                                        height={height}\n                                        width={width}\n                                        notes={this.props.notes}\n                                    />\n                                )}\n                                </AutoSizer>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    onClassify: state.menu.onClassify,\n    onAnalysis: state.menu.onAnalysis,\n    noteChangeFlag: state.classify.noteChangeFlag\n });\n\nexport default connect(mapStateToProps, {filterNotebook, receiveNotesChange})(Notebook);\n","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/BinNote.js",["108","109"],"import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport { PropTypes } from \"prop-types\";\n\nimport { addBinNote, sendNotesChange, receiveNotesChange, receiveReplyOpen } from \"../../actions/classify\";\nimport Note from \"./Note\";\n\nexport class BinNote extends React.Component {\n    state = {\n        entry: '',\n        parents: [],\n        notes: [],\n    }\n    \n    static propTypes = {\n        addBinNote: PropTypes.func,\n        receiveNotesChange: PropTypes.func,\n        noteChangeFlag: PropTypes.bool,\n        receiveReplyOpen: PropTypes.func,\n        replyChangeFlag: PropTypes.bool,\n        user: PropTypes.object,\n    };\n\n    getNotes() {\n        axios\n            .get('/process/note/' + this.props.timeseries + '/' + this.props.file + '/' + this.props.image + '/')\n            .then((res) => {\n                this.setState({ notes: res.data });\n            })\n            .catch((err) => console.log(err));\n    }\n\n    renderNote(note, count) {\n        if (note.parent !== null) {\n            var reply = note;\n            var iters = 0;\n            while (reply.parent !== null) {\n                var parentFunc = (element) => element.id === reply.parent;\n                var reply = this.state.notes[this.state.notes.findIndex(parentFunc)];\n                iters = iters + 1;\n            }\n            if (count!==iters) {\n                return;\n            }\n        }\n        return(\n            <div>\n                <Note\n                    note={note}\n                    user={this.props.user.username}\n                    timeseries={this.props.timeseries}\n                    ifcb={this.props.ifcb}\n                    file={this.props.file}\n                    type={this.props.type}\n                    image={this.props.image}\n                />\n                <div className=\"reply\" style={{margin: \"0 0 0 \" + String((count+1)) + \"vw\"}}>\n                {(note.replies.length !== 0) ?\n                    note.replies.map((reply) => this.renderNote(reply, count+1)) :\n                    <div></div>\n                }\n                </div>\n            </div>\n        \n        );\n    }\n\n    componentDidMount() {\n        this.getNotes();\n    }\n\n    componentDidUpdate() {\n        if(this.props.noteChangeFlag) {\n            this.props.receiveNotesChange();\n            this.getNotes();\n        }\n        if(this.props.replyChangeFlag) {\n            this.props.receiveReplyOpen();\n            this.getNotes();\n        }\n    }\n\n    onChange = e => this.setState({ entry: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addBinNote(this.props.user.username, this.state.entry, null, [], this.props.timeseries, this.props.ifcb, this.props.file, this.props.image);\n        this.props.sendNotesChange();\n        this.getNotes();\n        const noteForm = document.getElementById(\"note-form\");\n        noteForm.reset()\n    }\n    \n    render() {\n        return(\n            <div className={this.props.type + \"-notes-content\"}>\n                {(this.props.type === 'bin') ? <div className=\"refresh\" onClick={() => this.getNotes()}></div> : <div></div>}\n                <div id=\"note-container\">\n                    {this.state.notes.map((note) => this.renderNote(note, 0))}\n                </div>\n                    <div className={this.props.type + \"-note-form\"}>\n                        <form onSubmit={this.onSubmit} id=\"note-form\">\n                            <div className={this.props.type + \"-new-note\"}>\n                            <input\n                                type=\"textarea\"\n                                rows=\"10\"\n                                className={this.props.type + \"-note-input\"}\n                                name={this.props.type + \"-note-entry\"}\n                                id=\"note-entry\"\n                                onChange={this.onChange}\n                                value={this.entry}\n                            />\n                            <button type=\"submit\" className={this.props.type + \"-note-submit\"}></button>\n                            </div>\n                            {(this.state.notes === []) ? <p className=\"bin-note-label\">Add a Note</p> : <div></div>}\n                        </form>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    noteChangeFlag: state.classify.noteChangeFlag,\n    replyChangeFlag: state.classify.replyChangeFlag,\n    user: state.auth.user\n });\n\nexport default connect(mapStateToProps, {addBinNote, sendNotesChange, receiveNotesChange, receiveReplyOpen})(BinNote);","/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Note.js",["110","111","112","113","114"],"import React from \"react\";\nimport { connect } from 'react-redux';\nimport { PropTypes } from \"prop-types\";\n\nimport { addBinNote, deleteBinNote, flagBinNote, sendNotesChange, sendReplyOpen } from \"../../actions/classify\";\n\nclass Note extends React.Component {\n    state = {\n        entry: '',\n    }\n\n    static propTypes = {\n        addBinNote: PropTypes.func,\n        deleteBinNote: PropTypes.func,\n        sendNotesChange: PropTypes.func,\n        sendReplyOpenChange: PropTypes.func,\n        notes: PropTypes.array,\n    };\n    \n    reply(id) {\n        document.getElementById('reply-form' + id).classList.toggle('show');\n        this.props.sendReplyOpen();\n    }\n\n    delete(id) {\n        this.props.deleteBinNote(id);\n        this.props.sendNotesChange();\n    }\n\n    flag(id) {\n        this.props.flagBinNote(id);\n        this.props.sendNotesChange();\n    }\n\n    getFlagButton(isFlagged) {\n        if (isFlagged) {\n            return 'Unflag'\n        } else {\n            return 'Flag'\n        }\n    }\n\n    onChange = e => this.setState({ entry: e.target.value })\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addBinNote(this.props.user, this.state.entry, this.props.note.id, [], this.props.timeseries, this.props.ifcb, this.props.file, this.props.image);\n        this.props.sendNotesChange();\n        const replyForm = document.getElementById(\"note-form\");\n        replyForm.reset()\n        document.getElementById('reply-form' + this.props.note.id).classList.toggle('show');\n    }\n    \n    render() {\n        const { id, author, date, entry, parent, replies, timeseries, file, image, flag } = this.props.note;\n        return (\n            <div className={this.props.type + \"-note\"} id={id}>\n                <div className={this.props.type + \"-note-header\"}>\n                    <p className=\"note-author\">{author}</p>\n                    <p className=\"note-date\">{date.slice(0,10)}</p>\n                    {(flag) ? <div className=\"flag-small\"></div> : <div></div>}\n                </div>\n                <p className={this.props.type + \"-note-entry\"}>{entry}</p>\n                {(this.props.type === 'bin') ? \n                    <button className=\"reply-button\" onClick={() => this.reply(id)}>Reply</button> :\n                    <div></div>}\n                {(author === this.props.user) ? \n                    <button className=\"reply-button\" onClick={() => this.delete(id)}>Delete</button> :\n                    <div></div>}\n                {(author === this.props.user) ? \n                    <button className=\"reply-button\" onClick={() => this.flag(id)}>{this.getFlagButton(flag)}</button> :\n                    <div></div>}\n                <div className=\"reply-form\" id={\"reply-form\" + id}>\n                        <form onSubmit={this.onSubmit} id=\"note-form\">\n                            <div className=\"new-note\">\n                            <input\n                                type=\"textarea\"\n                                rows=\"10\"\n                                className=\"note-input\"\n                                name=\"note-entry\"\n                                id=\"note-entry\"\n                                onChange={this.onChange}\n                                value={this.entry}\n                            />\n                            <button type=\"submit\" className={this.props.type + \"-note-submit\"}></button>\n                            </div>\n                        </form>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    notes: state.classify.notes,\n });\n\nexport default connect(mapStateToProps, {addBinNote, deleteBinNote, flagBinNote, sendNotesChange, sendReplyOpen})(Note);","/Users/jamiewalton/Desktop/Classification_v3/src/reducers/menu.js",["115"],"/Users/jamiewalton/Desktop/Classification_v3/src/actions/menu.js",[],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/Analysis.js",["116","117","118","119"],"/Users/jamiewalton/Desktop/Classification_v3/src/components/annotations/ClassDownload.js",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":872,"column":16,"nodeType":"126","endLine":872,"endColumn":44},{"ruleId":"127","severity":1,"message":"128","line":951,"column":13,"nodeType":"126","endLine":951,"endColumn":78},{"ruleId":"129","severity":1,"message":"130","line":4,"column":8,"nodeType":"131","messageId":"132","endLine":4,"endColumn":17},{"ruleId":"133","severity":1,"message":"134","line":20,"column":1,"nodeType":"135","endLine":59,"endColumn":2},{"ruleId":"133","severity":1,"message":"134","line":21,"column":1,"nodeType":"135","endLine":71,"endColumn":2},{"ruleId":"129","severity":1,"message":"136","line":12,"column":8,"nodeType":"131","messageId":"132","endLine":12,"endColumn":14},{"ruleId":"129","severity":1,"message":"137","line":189,"column":11,"nodeType":"131","messageId":"132","endLine":189,"endColumn":16},{"ruleId":"138","severity":1,"message":"139","line":328,"column":41,"nodeType":"140","messageId":"141","endLine":328,"endColumn":68},{"ruleId":"142","severity":1,"message":"143","line":39,"column":34,"nodeType":"144","messageId":"145","endLine":39,"endColumn":74},{"ruleId":"146","severity":1,"message":"147","line":40,"column":21,"nodeType":"131","messageId":"148","endLine":40,"endColumn":26},{"ruleId":"129","severity":1,"message":"149","line":55,"column":42,"nodeType":"131","messageId":"132","endLine":55,"endColumn":48},{"ruleId":"129","severity":1,"message":"150","line":55,"column":50,"nodeType":"131","messageId":"132","endLine":55,"endColumn":57},{"ruleId":"129","severity":1,"message":"151","line":55,"column":59,"nodeType":"131","messageId":"132","endLine":55,"endColumn":69},{"ruleId":"129","severity":1,"message":"152","line":55,"column":71,"nodeType":"131","messageId":"132","endLine":55,"endColumn":75},{"ruleId":"129","severity":1,"message":"153","line":55,"column":77,"nodeType":"131","messageId":"132","endLine":55,"endColumn":82},{"ruleId":"133","severity":1,"message":"134","line":16,"column":1,"nodeType":"135","endLine":56,"endColumn":2},{"ruleId":"129","severity":1,"message":"154","line":2,"column":8,"nodeType":"131","messageId":"132","endLine":2,"endColumn":13},{"ruleId":"155","severity":1,"message":"156","line":28,"column":50,"nodeType":"157","messageId":"158","endLine":29,"endColumn":74},{"ruleId":"155","severity":1,"message":"156","line":30,"column":61,"nodeType":"157","messageId":"158","endLine":31,"endColumn":83},{"ruleId":"159","severity":1,"message":"160","line":50,"column":13,"nodeType":"161","messageId":"162","endLine":51,"endColumn":61},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'loader' is defined but never used.","'flags' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'reply'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'reply' is already defined.","redeclared","'parent' is assigned a value but never used.","'replies' is assigned a value but never used.","'timeseries' is assigned a value but never used.","'file' is assigned a value but never used.","'image' is assigned a value but never used.","'axios' is defined but never used.","no-multi-str","Multiline support is limited to browsers supporting ES5 only.","Literal","multilineString","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-global-assign","no-unsafe-negation"]