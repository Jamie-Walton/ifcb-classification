[{"/Users/jamiewalton/Desktop/Classification_v2/frontend/src/index.js":"1","/Users/jamiewalton/Desktop/Classification_v2/frontend/src/reportWebVitals.js":"2","/Users/jamiewalton/Desktop/Classification_v2/frontend/src/App.js":"3","/Users/jamiewalton/Desktop/Classification_v3/frontend/src/index.js":"4","/Users/jamiewalton/Desktop/Classification_v3/frontend/src/App.js":"5","/Users/jamiewalton/Desktop/Classification_v3/frontend/src/reportWebVitals.js":"6"},{"size":600,"mtime":1624983513619,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1624911946752,"results":"9","hashOfConfig":"8"},{"size":19215,"mtime":1625631628511,"results":"10","hashOfConfig":"8"},{"size":600,"mtime":1626051296443,"results":"11","hashOfConfig":"12"},{"size":19190,"mtime":1626054138163,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1624911946000,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"16v9ttl",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xevqa1",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/jamiewalton/Desktop/Classification_v2/frontend/src/index.js",[],["30","31"],"/Users/jamiewalton/Desktop/Classification_v2/frontend/src/reportWebVitals.js",[],"/Users/jamiewalton/Desktop/Classification_v2/frontend/src/App.js",[],"/Users/jamiewalton/Desktop/Classification_v3/frontend/src/index.js",[],"/Users/jamiewalton/Desktop/Classification_v3/frontend/src/App.js",["32"],"import React from \"react\";\nimport axios from \"axios\";\nimport Draggable from 'react-draggable';\n\nimport loader from \"./loader.GIF\";\nimport toTop from \"./icons/to-top.png\"\nimport selectWhite from \"./icons/select-white.png\";\nimport dropdown from \"./icons/dropdown.png\";\n/*\nimport calendar from \"./icons/calendar.png\";\nimport dropup from \"./icons/dropup.png\";\nimport selectGray from \"./icons/select-gray.png\";\n*/\n\nclass TimeSeriesControl extends React.Component {\n    handleDropdown() {\n        document.getElementById('timeseries_dropdown').classList.toggle('show');\n        document.getElementById('timeseries_label').classList.toggle('hide');\n        document.getElementById('timeseries_bar').classList.toggle('accommodate-dropdown');\n    }\n    \n    render() {\n        const options = this.props.options.map((x) => \n        <li key={x} onClick={() => this.props.onClick(x)}><button id={x}>{x}</button></li>)\n        return (\n            <div>\n                <div className=\"time\" id='timeseries_bar'>\n                    <p className=\"time-selection\">{this.props.timeseries}</p>\n                    <img src={dropdown} className=\"time-icon\" \n                    alt={'Select time series'} onClick={() => this.handleDropdown()}></img>\n                </div>\n                <div className=\"time-dropdown\" id='timeseries_dropdown'>\n                    <ul className=\"timeseries-option\">{options}</ul>\n                </div>\n                <p className=\"time-label\" id='timeseries_label'>Time Series</p>\n            </div>\n        );\n    }\n}\n\nclass YearControl extends React.Component {\n    handleDropdown() {\n        document.getElementById('year_dropdown').classList.toggle('show');\n        document.getElementById('year_label').classList.toggle('hide');\n        document.getElementById('year_bar').classList.toggle('accommodate-dropdown');\n    }\n    \n    render() {\n        const options = this.props.options.map((x) => \n        <li key={x} onClick={() => this.props.onClick(x)}><button id={x}>{x}</button></li>)\n        return(\n            <div>\n                <div className=\"time\" id='year_bar'>\n                    <p className=\"time-selection\">{this.props.year}</p>\n                    <img src={dropdown} className=\"time-icon\" \n                    alt={'Select Year'} onClick={() => this.handleDropdown()}></img>\n                </div>\n                <div className=\"time-dropdown\" id='year_dropdown'>\n                    <ul className=\"year-option\">{options}</ul>\n                </div>\n                <p className=\"time-label\" id='year_label'>Year</p>\n            </div>\n        );\n    }\n}\n\nclass DayControl extends React.Component {\n    handleDropdown() {\n        document.getElementById('day_dropdown').classList.toggle('show');\n        document.getElementById('day_label').classList.toggle('hide');\n        document.getElementById('day_bar').classList.toggle('accommodate-dropdown');\n    }\n    \n    render() {\n        const options = this.props.options.map((x) => \n        <li key={x} onClick={() => this.props.onClick(x)}><button id={x}>{x}</button></li>)\n        return(\n            <div>\n                <div className=\"time\" id='day_bar'>\n                    <p className=\"time-selection\">{this.props.day}</p>\n                    <img src={dropdown} className=\"time-icon\" \n                    alt={'Select Day'} onClick={() => this.handleDropdown()}></img>\n                </div>\n                <div className=\"time-dropdown\" id='day_dropdown'>\n                    <ul className=\"day-option\">{options}</ul>\n                </div>\n                <p className=\"time-label\" id='day_label'>Day</p>\n            </div>\n        );\n    }\n}\n\nclass FileControl extends React.Component {\n    handleDropdown() {\n        document.getElementById('file_dropdown').classList.toggle('show');\n        document.getElementById('file_label').classList.toggle('hide');\n        document.getElementById('file_bar').classList.toggle('accommodate-dropdown');\n    }\n    \n    render() {\n        const options = this.props.options.map((x) => \n        <li key={x} onClick={() => this.props.onClick(x)}><button id={x}>{x}</button></li>)\n        var fileName = this.props.file;\n        const file = fileName.slice(9,12) + ':' + fileName.slice(12,14) + ':' + fileName.slice(14,16) + 'Z';\n        return(\n            <div>\n                <div className=\"time\" id='file_bar'>\n                    <p className=\"time-selection\">{file}</p>\n                    <img src={dropdown} className=\"time-icon\" \n                    alt={'Select File'} onClick={() => this.handleDropdown()}></img>\n                </div>\n                <div className=\"time-dropdown\" id='file_dropdown'>\n                    <ul className=\"file-option\">{options}</ul>\n                </div>\n                <p className=\"time-label\" id='file_label'>File</p>\n            </div>\n        );\n    }\n}\n\nclass SetControl extends React.Component {\n    handleDropdown() {\n        document.getElementById('set_dropdown').classList.toggle('show');\n        document.getElementById('set_label').classList.toggle('hide');\n        document.getElementById('set_bar').classList.toggle('accommodate-dropdown');\n    }\n    \n    render() {\n        const options = this.props.options.map((x) => \n        <li key={x} onClick={() => this.props.onClick(x)}><button id={x}>{x}</button></li>)\n        return(\n            <div>\n                <div className=\"set\" id=\"set_bar\">\n                <p className=\"time-selection\">{this.props.set}</p>\n                <img src={dropdown} className=\"time-icon\"\n                alt={'Select Set'} onClick={() => this.handleDropdown()}></img>\n                </div>\n                <div className=\"set-dropdown\" id='set_dropdown'>\n                    <ul className=\"set-option\">{options}</ul>\n                </div>\n                <p className=\"time-label\" id=\"set_label\">Set</p>\n            </div>\n        );\n    }\n}\n\nclass PlanktonImage extends React.Component {\n\n  render() {\n  const url = this.props.nameSpace + this.props.timestamp + '_' + this.props.ifcb + '_' + this.props.targetNum + '.jpg';\n      return(\n          <img src={url} className=\"image\" \n          alt={this.props.classification} \n          id={this.props.targetNum + '-image'}\n          style={{height: String(Number(this.props.width)*Number(this.props.scale)*0.07)+'vw'}}></img>\n      );\n  }\n}\n\nclass Plankton extends React.Component {\n  \n  renderImage() {  \n    return (\n      <div>\n          <PlanktonImage \n              nameSpace={'http://128.114.25.154:8888/' + this.props.ifcb + '/'}\n              timestamp={this.props.timestamp}\n              ifcb={this.props.ifcb}\n              targetNum={this.props.targetNum}\n              classification={this.props.classification}\n              width={this.props.width}\n              scale={this.props.scale}\n          />\n      </div>\n      );\n  }\n\n  render() {\n      return(\n          <button className=\"plankton-button\" onClick={() => this.props.onClick(this.props.targetNum)}>\n              <div className=\"plankton\">\n                  {this.renderImage()}\n                  <div className={'id'} id={this.props.targetNum}>\n                      <p className={'id-text'} id={this.props.targetNum + '-text'}>{this.props.classification}</p>\n                  </div>\n              </div>\n          </button>\n      );\n  }\n}\n\nclass Micrometer extends React.Component {\n    render() {\n        return(\n            <Draggable>\n                <div className=\"drag-box\">\n                    <div className=\"micrometer-block\"\n                    style={{width: '1.904vw'}}></div>\n                    <p className=\"micrometer-text\">10Âµm</p>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nclass ClassMenu extends React.Component {\n  render() {\n      const options = this.props.classes.map((x) => \n      <li key={x}><button id={x} onClick={() => this.props.onClick(x)}>{x}</button></li>);\n      return(\n      <div className=\"sidebar\">\n      <div className=\"class-menu\">\n          <div className=\"control-box\">\n            <div className=\"annotation-control\" onClick={() =>  this.props.handleSelectAllClick()}>\n                <p className=\"control-text\">Select All</p>\n            </div>\n            <div className=\"annotation-control\" onClick={() =>  this.props.handleSelectAllClick()}>\n                <p className=\"control-text\">Undo</p>\n            </div>\n          </div>\n          <ul>{options}</ul>\n      </div>\n      <Micrometer/>\n      </div>\n      );\n  }\n}\n\nclass Annotations extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          loading: true,\n          classes: [],\n          classPicker: 'Unclassified',\n          bin: {timeseries:'', year:'', day:'', file:''},\n          set: 1,\n          timeSeriesOptions: [],\n          yearOptions: [],\n          dayOptions: [],\n          fileOptions: [],\n          setOptions: [],\n          targets: [],\n          scale: 1,\n      }\n  }\n\n  getNewTimeSeries(option) {\n    this.setState({loading: true});\n    axios\n        .get('/process/timeseries/' + option + '/')\n        .then((binResponse) => {\n            this.setState({ \n                bin: binResponse.data.bin,\n                set: binResponse.data.set.number,\n                yearOptions: binResponse.data.options.year_options.reverse(),\n                dayOptions: binResponse.data.options.day_options.reverse(),\n                fileOptions: binResponse.data.options.file_options,\n                setOptions: binResponse.data.options.set_options,\n            });\n            axios\n                .get('/process/targets/' + option + '/' + binResponse.data.bin.file + '/1/')\n                .then((targetResponse) => {\n                    this.setState({ \n                        targets: targetResponse.data,\n                        scale: targetResponse.data[0].scale,\n                        loading: false,\n                     });\n                });\n        });\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"/api/timeseries/\")\n      .then((res) => {this.setState({ timeSeriesOptions: res.data.map((c) => (c.name)) })})\n      .catch((err) => console.log(err));\n\n    axios\n      .get(\"/api/classes/\")\n      .then((res) => this.setState({ classes: res.data.map((c) => (c.name)) }))\n      .catch((err) => console.log(err));\n\n    this.getNewTimeSeries('IFCB104');\n  }\n  \n  getNewYear(option) {\n      console.log(option);\n  }\n\n  handleNewDay(option) {\n    document.getElementById('day_dropdown').classList.toggle('show');\n    document.getElementById('day_label').classList.toggle('hide');\n    document.getElementById('day_bar').classList.toggle('accommodate-dropdown');\n    \n    this.setState({\n        loading: true,\n        bin: {\n            timeseries: this.state.bin.timeseries,\n            year: this.state.bin.year,\n            day: option,\n            file: this.state.bin.file\n        },\n        set: 1\n    });\n    axios\n        .get('/process/day/' + this.state.bin.timeseries + '/' + this.state.bin.year + '/' + option + '/')\n        .then((dayResponse) => {\n            this.setState({ \n                bin: {\n                    timeseries: this.state.bin.timeseries,\n                    year: this.state.bin.year,\n                    day: option,\n                    file: this.dayResponse.bin.file\n                },\n                fileOptions: dayResponse.data.options.file_options,\n                setOptions: dayResponse.data.options.set_option\n            });\n            axios\n                .get('/process/targets/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/1/')\n                .then((targetResponse) => {\n                    this.setState({ \n                        targets: targetResponse.data,\n                        scale: targetResponse.data[0].scale,\n                        loading: false,\n                    });\n                });\n    })\n        .catch((err) => console.log(err));\n  }\n\n  handleNewFile(option) {\n    document.getElementById('file_dropdown').classList.toggle('show');\n    document.getElementById('file_label').classList.toggle('hide');\n    document.getElementById('file_bar').classList.toggle('accommodate-dropdown');\n    \n    const file = 'D' + this.state.bin.year + this.state.bin.day.slice(0,2) + this.state.bin.day.slice(3,5) + \n    option.slice(0,3) + option.slice(4,6) + option.slice(7,9);\n    this.setState({\n        loading: true,\n        bin: {\n            timeseries: this.state.bin.timeseries,\n            year: this.state.bin.year,\n            day: this.state.bin.day,\n            file: file\n        },\n        set: 1\n    });\n    axios\n        .get('/process/file/' + this.state.bin.timeseries + '/' + file + '/')\n        .then((res) => this.setState({ setOptions: res.data.options.set_options }))\n        .catch((err) => console.log(err));\n    axios\n        .get('/process/targets/' + this.state.bin.timeseries + '/' + file + '/1/')\n        .then((targetResponse) => {\n            this.setState({ \n                targets: targetResponse.data,\n                scale: targetResponse.data[0].scale,\n                loading: false,\n             });\n        });\n  }\n\n  handleNewSet(option) {\n    this.setState({\n        loading: true,\n        set: option,\n        targets: [],\n    });\n    axios\n      .get('process/targets/' + this.state.bin.timeseries + '/' + this.state.bin.file + '/' + option + '/')\n      .then((res) => {this.setState({ \n          targets: res.data,\n          scale: res.data[0].scale,\n        })})\n      .catch((err) => console.log(err));\n    this.setState({loading: false});\n  }\n\n\n  handleMenuClick(name) {\n      const prevMenu = document.getElementById(this.state.classPicker);\n      prevMenu.style.backgroundColor = '#079CCC';\n      prevMenu.addEventListener('mouseover', function() {\n        prevMenu.style.backgroundColor = '#16609F';\n      });\n      prevMenu.addEventListener('mouseout', function() {\n        prevMenu.style.backgroundColor = '#079CCC';\n      });\n\n      const ids = document.getElementsByClassName('id');\n      const idTexts = document.getElementsByClassName('id-text');\n      for (let i=0; i<ids.length; i++) {\n          if (ids[i].style.backgroundColor !== '#FFFFFF') {\n            ids[i].style.backgroundColor = '#FFFFFF';\n            idTexts[i].style.color = '#4E4E4E';\n        }\n      }\n\n      this.setState({ classPicker: name });\n      const menu = document.getElementById(name);\n      menu.style.backgroundColor = '#16609F';\n      \n      for (const target of this.state.targets) {\n          if (target.classification === name) {\n              const container = document.getElementById(target.number);\n              const text = document.getElementById(target.number+'-text');\n              container.style.backgroundColor = '#16609F';\n              text.style.color = '#FFFFFF';\n          }\n      }\n  }\n\n  /* Fix this entire function later (will need updates to targets and row calls)\n  handleRowClick(row) {\n      for (const sample of this.state.rows[row]) {\n          this.state.targets[sample] = this.state.classPicker;\n          const container = document.getElementById(sample);\n          const text = document.getElementById(sample+'_text');\n          container.style.backgroundColor = '#16609F';\n          text.style.color = '#FFFFFF';\n      }\n      this.setState({targets: this.state.targets});\n  }\n  */\n\n  backToTop() {\n    document.body.scrollTop = 0; // For Safari\n    document.documentElement.scrollTop = 0;\n  }\n\n  handleSelectAllClick() {\n      const targets = this.state.targets;\n      for (let i = 0; i < targets.length; i++) {\n          targets[i].classification = this.state.classPicker;\n          const container = document.getElementById(targets[i].number);\n          const text = document.getElementById(targets[i].number+'_text');\n          container.style.backgroundColor = '#16609F';\n          text.style.color = '#FFFFFF';\n      }\n      this.setState({ targets: targets });\n  }\n\n  handlePlanktonClick(i) {\n    var targets = this.state.targets;\n    const k = targets.findIndex(target => target.number === i);\n    targets[k].classification = this.state.classPicker;\n    this.setState({ targets: targets });\n    const container = document.getElementById(targets[k].number);\n    const text = document.getElementById(targets[k].number+'-text');\n    container.style.backgroundColor = '#16609F';\n    text.style.color = '#FFFFFF';\n  }\n\n  renderTimeSeriesControl() {\n    return <TimeSeriesControl\n        timeseries={this.state.bin.timeseries}\n        options={this.state.timeSeriesOptions}\n        onClick={(option) => this.getNewTimeSeries(option)}\n    />;\n  }\n\n  renderYearControl() {\n    return <YearControl\n        year={this.state.bin.year}\n        options={this.state.yearOptions}\n        onClick={(option) => this.getNewYear(option)} \n    />;\n  }\n\n  renderDayControl() {\n    return <DayControl\n        day={this.state.bin.day} \n        options={this.state.dayOptions}\n        onClick={(option) => this.handleNewDay(option)}\n    />;\n  }\n\n  renderFileControl() {\n    return <FileControl\n        file={this.state.bin.file} \n        options={this.state.fileOptions}\n        onClick={(option) => this.handleNewFile(option)} \n    />;\n  }\n\n  renderSetControl() {\n    return <SetControl\n        set={this.state.set} \n        options={this.state.setOptions}\n        onClick={(option) => this.handleNewSet(option)} \n    />;\n  }\n  \n  renderPlankton(i) {\n      return <Plankton \n              ifcb={this.state.bin.timeseries}\n              timestamp={this.state.bin.file}\n              id={i}\n              targetNum={this.state.targets[i].number}\n              classification={this.state.targets[i].classification}\n              scale={this.state.targets[i].scale}\n              width={this.state.targets[i].width}\n              onClick={(i) => this.handlePlanktonClick(i)}\n          />;\n  }\n\n  renderClassMenu() {\n    return <ClassMenu \n          classes={this.state.classes}\n          onClick={(name) => this.handleMenuClick(name)}\n          handleSelectAllClick={() => this.handleSelectAllClick()}\n          handleUndoClick={() => this.handleUndoClick()}\n      />;\n  }\n\n  renderMicrometer() {\n      return <Micrometer\n      scale={this.state.scale}/>\n  }\n\n  renderLoader() {\n    console.log('Loading...');\n    return <img src={loader} alt=\"Loading targets...\" width=\"80\" loop=\"infinite\"></img>\n  }\n\n  render() {  \n    return(\n      <div>\n        <h1>Manual Annotations</h1>\n        <div className=\"time-controls\">\n            {this.renderTimeSeriesControl()}\n            {this.renderYearControl()}\n            {this.renderDayControl()}\n            {this.renderFileControl()}\n            {this.renderSetControl()}\n        </div>\n        <div className=\"annotations\">\n            {this.renderClassMenu()}\n            <div>\n                <div className=\"image-grid\">\n                    {\n                    this.state.loading ? this.renderLoader() :\n                    this.state.targets.map((target, i) => this.renderPlankton(i))\n                    }\n                    <img src={toTop} alt=\"Back to Top\" className=\"to-top\" onClick={() => this.backToTop()}></img>\n                </div>\n            </div>\n        </div>\n      </div>\n      );\n  }\n}\n\nexport default Annotations;","/Users/jamiewalton/Desktop/Classification_v3/frontend/src/reportWebVitals.js",[],["33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":7,"column":8,"nodeType":"41","messageId":"42","endLine":7,"endColumn":19},{"ruleId":"35","replacedBy":"43"},{"ruleId":"37","replacedBy":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'selectWhite' is defined but never used.","Identifier","unusedVar",["45"],["46"],"no-global-assign","no-unsafe-negation"]